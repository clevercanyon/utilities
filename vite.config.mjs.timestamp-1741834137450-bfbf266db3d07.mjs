var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all2) => {
  for (var name in all2)
    __defProp(target, name, { get: all2[name], enumerable: true });
};

// node_modules/@clevercanyon/utilities.node/dist/chalk.js
var chalk_exports = {};
__export(chalk_exports, {
  $: () => default2,
  ansi256: () => ansi256,
  bgAnsi256: () => bgAnsi256,
  bgBlack: () => bgBlack,
  bgBlackBright: () => bgBlackBright,
  bgBlue: () => bgBlue,
  bgBlueBright: () => bgBlueBright,
  bgCyan: () => bgCyan,
  bgCyanBright: () => bgCyanBright,
  bgGray: () => bgGray,
  bgGreen: () => bgGreen,
  bgGreenBright: () => bgGreenBright,
  bgGrey: () => bgGrey,
  bgHex: () => bgHex,
  bgMagenta: () => bgMagenta,
  bgMagentaBright: () => bgMagentaBright,
  bgRed: () => bgRed,
  bgRedBright: () => bgRedBright,
  bgRgb: () => bgRgb,
  bgWhite: () => bgWhite,
  bgWhiteBright: () => bgWhiteBright,
  bgYellow: () => bgYellow,
  bgYellowBright: () => bgYellowBright,
  black: () => black,
  blackBright: () => blackBright,
  blue: () => blue,
  blueBright: () => blueBright,
  bold: () => bold,
  cyan: () => cyan,
  cyanBright: () => cyanBright,
  dim: () => dim,
  errorBox: () => errorBox,
  finaleBox: () => finaleBox,
  gray: () => gray,
  green: () => green,
  greenBright: () => greenBright,
  grey: () => grey,
  hex: () => hex,
  hidden: () => hidden,
  inverse: () => inverse,
  italic: () => italic,
  magenta: () => magenta,
  magentaBright: () => magentaBright,
  overline: () => overline,
  red: () => red,
  redBright: () => redBright,
  reset: () => reset,
  rgb: () => rgb,
  strikethrough: () => strikethrough,
  supportsColor: () => supportsColor2,
  underline: () => underline,
  visible: () => visible,
  white: () => white,
  whiteBright: () => whiteBright,
  yellow: () => yellow,
  yellowBright: () => yellowBright
});
import { $obj } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@clevercanyon/utilities/dist/index.js";
import coloredBox from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/boxen/index.js";
import chalk, { supportsColor } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/chalk/source/index.js";
import { default as default2, supportsColor as supportsColor2 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/chalk/source/index.js";
import termImage from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/term-img/index.js";
var hex, bgHex, rgb, bgRgb, ansi256, bgAnsi256, reset, bold, dim, italic, underline, overline, inverse, hidden, strikethrough, visible, black, red, green, yellow, blue, magenta, cyan, white, blackBright, gray, grey, redBright, greenBright, yellowBright, blueBright, magentaBright, cyanBright, whiteBright, bgBlack, bgRed, bgGreen, bgYellow, bgBlue, bgMagenta, bgCyan, bgWhite, bgBlackBright, bgGray, bgGrey, bgRedBright, bgGreenBright, bgYellowBright, bgBlueBright, bgMagentaBright, bgCyanBright, bgWhiteBright, errorBox, finaleBox;
var init_chalk = __esm({
  "node_modules/@clevercanyon/utilities.node/dist/chalk.js"() {
    ({ hex, bgHex, rgb, bgRgb, ansi256, bgAnsi256 } = chalk);
    ({ reset, bold, dim, italic, underline, overline, inverse, hidden, strikethrough, visible } = chalk);
    ({
      black,
      red,
      green,
      yellow,
      blue,
      magenta,
      cyan,
      white,
      blackBright,
      gray,
      grey,
      redBright,
      greenBright,
      yellowBright,
      blueBright,
      magentaBright,
      cyanBright,
      whiteBright
    } = chalk);
    ({
      bgBlack,
      bgRed,
      bgGreen,
      bgYellow,
      bgBlue,
      bgMagenta,
      bgCyan,
      bgWhite,
      bgBlackBright,
      bgGray,
      bgGrey,
      bgRedBright,
      bgGreenBright,
      bgYellowBright,
      bgBlueBright,
      bgMagentaBright,
      bgCyanBright,
      bgWhiteBright
    } = chalk);
    errorBox = (title, text, options4) => {
      const opts = $obj.defaults({}, options4 || {}, { image: "" });
      if (!process.stdout.isTTY || !supportsColor || !supportsColor?.has16m) {
        return chalk.red(text);
      }
      return "\n" + coloredBox(chalk.bold.red(text), {
        margin: 0,
        padding: 0.75,
        textAlignment: "left",
        dimBorder: false,
        borderStyle: "round",
        borderColor: "#551819",
        backgroundColor: "",
        titleAlignment: "left",
        title: chalk.bold.redBright("\u2691 " + title)
      }) + (opts.image ? "\n" + termImage(opts.image, { width: "300px", fallback: () => "" }) : "");
    };
    finaleBox = (title, text, options4) => {
      const opts = $obj.defaults({}, options4 || {}, { image: "" });
      if (!process.stdout.isTTY || !supportsColor || !supportsColor?.has16m) {
        return chalk.green(text);
      }
      return "\n" + coloredBox(chalk.bold.hex("#ed5f3b")(text), {
        margin: 0,
        padding: 0.75,
        textAlignment: "left",
        dimBorder: false,
        borderStyle: "round",
        borderColor: "#8e3923",
        backgroundColor: "",
        titleAlignment: "left",
        title: chalk.bold.green("\u2713 " + title)
      }) + (opts.image ? "\n" + termImage(opts.image, { width: "300px", fallback: () => "" }) : "");
    };
  }
});

// node_modules/@clevercanyon/utilities.node/dist/cmd.js
var cmd_exports = {};
__export(cmd_exports, {
  esc: () => esc,
  escAll: () => escAll,
  exec: () => exec,
  quote: () => quote,
  quoteAll: () => quoteAll,
  spawn: () => spawn,
  split: () => split
});
import * as splitCMD from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@clevercanyon/split-cmd.fork/index.js";
import { $obj as $obj2 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@clevercanyon/utilities/dist/index.js";
import { execSync } from "node:child_process";
import { Shescape } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/shescape/index.js";
import spawnPlease from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/spawn-please/index.js";
var stdout, stderr, bash, shellWarning, split, shEscape, esc, escAll, quote, quoteAll, spawn, exec;
var init_cmd = __esm({
  "node_modules/@clevercanyon/utilities.node/dist/cmd.js"() {
    init_chalk();
    stdout = process.stdout.write.bind(process.stdout);
    stderr = process.stderr.write.bind(process.stderr);
    bash = "bash";
    shellWarning = "Only `" + bash + "` shell is supported at this time.";
    ({ splitCMD: split } = splitCMD);
    shEscape = new Shescape({
      shell: bash,
      flagProtection: false
    });
    esc = shEscape.escape.bind(shEscape);
    escAll = shEscape.escapeAll.bind(shEscape);
    quote = shEscape.quote.bind(shEscape);
    quoteAll = shEscape.quoteAll.bind(shEscape);
    spawn = async (cmd, args = [], options4) => {
      const opts = $obj2.defaults({}, options4 || {}, { quiet: false, stdoutChalk: white, stderrChalk: gray });
      const shell = "shell" in opts ? opts.shell : bash;
      if (shell && shell !== bash) {
        throw Error(shellWarning);
      }
      if (shell) {
        cmd = quote(cmd), args = quoteAll(args);
      }
      return await spawnPlease(cmd, args, {
        shell: bash,
        cwd: process.cwd(),
        env: { ...process.env },
        // Output handlers do not run when `stdio: 'inherit'` or `quiet: true`.
        stdio: opts.quiet ? "pipe" : "inherit",
        // `pipe` enables output handlers below.
        stdout: opts.quiet ? null : (buffer2) => stdout(opts.stdoutChalk(buffer2.toString())),
        stderr: opts.quiet ? null : (buffer2) => stderr(opts.stderrChalk(buffer2.toString())),
        ...$obj2.omit(opts, ["quiet", "stdoutChalk", "stderrChalk"])
      });
    };
    exec = async (cmd, options4) => {
      const opts = $obj2.defaults({}, options4 || {}, { quiet: false });
      const shell = "shell" in opts ? opts.shell : bash;
      if (shell && shell !== bash) {
        throw Error(shellWarning);
      }
      return (execSync(cmd, {
        shell: bash,
        cwd: process.cwd(),
        env: { ...process.env },
        stdio: opts.quiet ? "pipe" : "inherit",
        // `execSync` does not support output handlers.
        ...$obj2.omit(opts, ["quiet"])
      }) || Buffer.from("")).toString();
    };
  }
});

// node_modules/@clevercanyon/utilities.node/dist/dotenv.js
var dotenv_exports = {};
__export(dotenv_exports, {
  $: () => default22,
  config: () => config,
  expand: () => expand,
  parse: () => parse,
  parseExpand: () => parseExpand,
  vault: () => default3
});
import { $obj as $obj3, $to } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@clevercanyon/utilities/dist/index.js";
import dotenv from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dotenv/lib/main.js";
import { default as default22 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dotenv/lib/main.js";
import dotenvExpand from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dotenv-expand/lib/main.js";
import { default as default3 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dotenv-vault/dist/index.js";
import fs from "node:fs";
var parse, config, expand, parseExpand;
var init_dotenv = __esm({
  "node_modules/@clevercanyon/utilities.node/dist/dotenv.js"() {
    ({ parse, config } = dotenv);
    ({ expand } = dotenvExpand);
    parseExpand = (files, options4) => {
      let origProcessEnv;
      const opts = $obj3.defaults({}, options4 || {}, { ignoreProcessEnv: false, preserveProcessEnv: true });
      if (!opts.ignoreProcessEnv && opts.preserveProcessEnv) {
        origProcessEnv = { ...process.env };
      }
      const env = (
        // Parses all, then expands, while considering options.
        expand({
          ignoreProcessEnv: opts.ignoreProcessEnv,
          parsed: Object.fromEntries(
            $to.array(files).flatMap((file) => {
              if (!fs.existsSync(file))
                return [];
              return Object.entries(parse(fs.readFileSync(file).toString()));
            })
          )
        }).parsed || {}
      );
      if (!opts.ignoreProcessEnv && opts.preserveProcessEnv && origProcessEnv) {
        process.env = origProcessEnv;
      }
      return env;
    };
  }
});

// node_modules/@clevercanyon/utilities.node/dist/fs.js
var fs_exports = {};
__export(fs_exports, {
  archiver: () => default23,
  findUp: () => findUp,
  findUpSync: () => findUpSync,
  imuDirname: () => imuDirname,
  imuFilename: () => imuFilename
});
import path from "node:path";
import url from "node:url";
import { findUp, findUpSync } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/find-up/index.js";
import { default as default23 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/archiver/index.js";
var imuDirname, imuFilename;
var init_fs = __esm({
  "node_modules/@clevercanyon/utilities.node/dist/fs.js"() {
    imuDirname = (importMetaURL) => {
      return path.dirname(imuFilename(importMetaURL));
    };
    imuFilename = (importMetaURL) => {
      return url.fileURLToPath(importMetaURL);
    };
  }
});

// node_modules/@clevercanyon/utilities.node/dist/glob.js
var glob_exports = {};
__export(glob_exports, {
  promise: () => promise,
  stream: () => stream
});
import { $obj as $obj4 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@clevercanyon/utilities/dist/index.js";
import { globby, globbyStream } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/globby/index.js";
var promise, stream;
var init_glob = __esm({
  "node_modules/@clevercanyon/utilities.node/dist/glob.js"() {
    promise = async (patterns, options4) => {
      const opts = $obj4.defaults({}, options4 || {}, { expandDirectories: false, caseSensitiveMatch: true, absolute: true });
      if (Object.hasOwn(opts, "ignoreCase")) {
        opts.caseSensitiveMatch = opts.ignoreCase ? false : true;
        delete opts.ignoreCase;
      }
      return globby(patterns, opts);
    };
    stream = (patterns, options4) => {
      const opts = $obj4.defaults({}, options4 || {}, { expandDirectories: false, caseSensitiveMatch: true, absolute: true });
      if (Object.hasOwn(opts, "ignoreCase")) {
        opts.caseSensitiveMatch = opts.ignoreCase ? false : true;
        delete opts.ignoreCase;
      }
      return globbyStream(patterns, opts);
    };
  }
});

// node_modules/@clevercanyon/utilities.node/dist/prettier.js
var prettier_exports = {};
__export(prettier_exports, {
  $: () => default24,
  format: () => format,
  resolveConfig: () => resolveConfig,
  resolveConfigFile: () => resolveConfigFile
});
import prettier from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/prettier/index.mjs";
import { default as default24 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/prettier/index.mjs";
var format, resolveConfig, resolveConfigFile;
var init_prettier = __esm({
  "node_modules/@clevercanyon/utilities.node/dist/prettier.js"() {
    ({ format, resolveConfig, resolveConfigFile } = prettier);
  }
});

// node_modules/@clevercanyon/utilities.node/dist/index.js
var init_dist = __esm({
  "node_modules/@clevercanyon/utilities.node/dist/index.js"() {
    init_chalk();
    init_cmd();
    init_dotenv();
    init_fs();
    init_glob();
    init_prettier();
  }
});

// node_modules/@clevercanyon/utilities/dist/resources/standalone/index.js
import microMemoizeWithBrokenTypes from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/micro-memoize/dist/micro-memoize.cjs.js";
// @__NO_SIDE_EFFECTS__
function $fn\uA4FAmemo(...args) {
  let fn, options4, memoizedFn, deep;
  if ($is\uA4FAfunction(args[0])) {
    fn = args[0];
    options4 = args[1];
  } else {
    if ("number" === typeof args[0]) {
      options4 = { maxSize: args[0] };
    } else
      options4 = args[0];
    fn = args[1];
  }
  deep = options4?.deep || false;
  if (options4)
    delete options4.deep;
  memoizedFn = $fn\uA4FAmicroMemoize(fn, {
    isPromise: $is\uA4FAasyncFunction(fn),
    isEqual: deep ? $is\uA4FAdeepEqual : $is\uA4FAequal,
    ...options4
    // Implementation-specific options.
  });
  Object.defineProperty(memoizedFn, "flush", { value: $fn\uA4FAmemo\uA4FAflush\uA4FAhelper });
  Object.defineProperty(memoizedFn, "fresh", { get: $fn\uA4FAmemo\uA4FAfresh\uA4FAhelper });
  return memoizedFn;
}
var $app\uA4FA$pkgName, $symbol\uA4FAobjTag, $symbol\uA4FAobjStringTag, $symbol\uA4FAobjToEquals, $obj\uA4FAplainC9rStr, $fn\uA4FAnoOp, $is\uA4FAarray, $is\uA4FAobject, $is\uA4FAproto, $is\uA4FAfunction, $is\uA4FAasyncFunction, $is\uA4FAobjectTag, $is\uA4FAobjectOfTag, $obj\uA4FAc9r, $obj\uA4FAownC9r, $obj\uA4FAproto, $obj\uA4FAtag, $obj\uA4FAtags, $obj\uA4FAkeysAndSymbols, $is\uA4FAequal, $is\uA4FAdeepEqual, $is\uA4FAdeepEqual\uA4FAhelper, $fn\uA4FAmicroMemoize, $fn\uA4FAmemo\uA4FAflush\uA4FAhelper, $fn\uA4FAmemo\uA4FAfresh\uA4FAhelper, $fn\uA4FAonce;
var init_standalone = __esm({
  "node_modules/@clevercanyon/utilities/dist/resources/standalone/index.js"() {
    $app\uA4FA$pkgName = "@clevercanyon/utilities";
    $symbol\uA4FAobjTag = Symbol("objTag");
    $symbol\uA4FAobjStringTag = Symbol.toStringTag;
    $symbol\uA4FAobjToEquals = Symbol("objToEquals");
    $obj\uA4FAplainC9rStr = String(Object);
    $fn\uA4FAnoOp = () => void 0;
    $is\uA4FAarray = (value) => {
      return value instanceof Array || Array.isArray(value);
    };
    $is\uA4FAobject = (value) => {
      return null !== value && ["object", "function"].includes(typeof value);
    };
    $is\uA4FAproto = (value) => {
      return $is\uA4FAobject(value) && value === (value.constructor?.prototype || Object.prototype);
    };
    $is\uA4FAfunction = (value) => {
      return value instanceof Function;
    };
    $is\uA4FAasyncFunction = (value) => {
      return $is\uA4FAfunction(value) && $is\uA4FAobjectOfTag(value, "AsyncFunction");
    };
    $is\uA4FAobjectTag = (value, requiredTag) => {
      return $obj\uA4FAtag(value) === requiredTag;
    };
    $is\uA4FAobjectOfTag = (value, ...requiredTags) => {
      const objTags = $obj\uA4FAtags(value);
      for (const condition of requiredTags) {
        if ($is\uA4FAarray(condition)) {
          let hasAnyOfTheseTags = false;
          for (const tag2 of new Set(condition)) {
            if (objTags.includes(tag2)) {
              hasAnyOfTheseTags = true;
              break;
            }
          }
          if (!hasAnyOfTheseTags) {
            return false;
          }
        } else {
          if (!objTags.includes(condition)) {
            return false;
          }
        }
      }
      return true;
    };
    $obj\uA4FAc9r = (value) => {
      return $is\uA4FAobject(value) && value?.constructor || void 0;
    };
    $obj\uA4FAownC9r = (value) => {
      return $is\uA4FAobject(value) && Object.hasOwn(value, "constructor") && value.constructor || void 0;
    };
    $obj\uA4FAproto = (value, levelsUp = 1) => {
      let __proto__ = levelsUp >= 1 ? value : void 0;
      for (let levels = levelsUp, times = 0; levels >= 1; levels--, times++) {
        if (null === __proto__ || void 0 === __proto__)
          break;
        __proto__ = Object.getPrototypeOf(__proto__);
      }
      return __proto__ || void 0;
    };
    $obj\uA4FAtag = (value) => {
      let tag2 = $is\uA4FAobject(value) ? String(value[$symbol\uA4FAobjTag] || "") : "";
      if (!tag2)
        tag2 = Object.prototype.toString.call(value).slice(8, -1);
      if ("Object" === tag2) {
        const __proto__ = $is\uA4FAproto(value) ? value : $obj\uA4FAproto(value);
        const __proto__ownC9r = __proto__ ? $obj\uA4FAownC9r(__proto__) : void 0;
        if (__proto__ && (!(__proto__ownC9r instanceof Object) || String(__proto__ownC9r) !== $obj\uA4FAplainC9rStr)) {
          if (__proto__ownC9r?.name) {
            return tag2 + ":" + __proto__ownC9r.name;
          } else {
            return tag2 + ":?";
          }
        }
      }
      return tag2;
    };
    $obj\uA4FAtags = (value, deepTags) => {
      let nextProto;
      if (!deepTags) {
        deepTags = /* @__PURE__ */ new Set();
        deepTags.add($obj\uA4FAtag(value));
        nextProto = $obj\uA4FAproto(value, 2);
      } else {
        const __proto__ = value;
        deepTags.add($obj\uA4FAtag(__proto__));
        nextProto = $obj\uA4FAproto(__proto__);
      }
      if (nextProto) {
        return $obj\uA4FAtags(nextProto, deepTags);
      }
      return Object.freeze(Array.from(deepTags));
    };
    $obj\uA4FAkeysAndSymbols = (value) => {
      const keys = [];
      const objValue = Object(value);
      for (const keyOrSymbol of Reflect.ownKeys(objValue)) {
        if (Object.getOwnPropertyDescriptor(objValue, keyOrSymbol)?.enumerable) {
          keys.push(keyOrSymbol);
        }
      }
      return keys;
    };
    $is\uA4FAequal = (a, b) => {
      return Object.is(a, b);
    };
    $is\uA4FAdeepEqual = (a, b) => {
      return $is\uA4FAdeepEqual\uA4FAhelper(a, b);
    };
    $is\uA4FAdeepEqual\uA4FAhelper = (a, b, circular = /* @__PURE__ */ new Map()) => {
      if ($is\uA4FAequal(a, b))
        return true;
      if (!a || !b || "object" !== typeof a || "object" !== typeof b)
        return false;
      if (!$is\uA4FAequal(a.constructor, b.constructor))
        return false;
      if (circular.has(a)) {
        if (circular.get(a)?.has(b)) {
          return circular.get(a)?.get(b);
        }
      } else {
        circular.set(a, /* @__PURE__ */ new Map());
      }
      let rtn = false;
      const objTag = $obj\uA4FAtag(a);
      const isPlain = "Object" === objTag;
      const hasToEquals = !isPlain && Object.hasOwn(a, $symbol\uA4FAobjToEquals);
      switchCase:
        switch (true) {
          case (isPlain || hasToEquals): {
            let aObj = a;
            let bObj = b;
            if (hasToEquals) {
              aObj = aObj[$symbol\uA4FAobjToEquals]();
              bObj = bObj[$symbol\uA4FAobjToEquals]();
            }
            const keysAndSymbols2 = $obj\uA4FAkeysAndSymbols(aObj);
            if (keysAndSymbols2.length !== $obj\uA4FAkeysAndSymbols(bObj).length)
              break switchCase;
            for (let i = 0; i < keysAndSymbols2.length; i++) {
              if (!Object.hasOwn(bObj, keysAndSymbols2[i]))
                break switchCase;
              if (!$is\uA4FAdeepEqual\uA4FAhelper(aObj[keysAndSymbols2[i]], bObj[keysAndSymbols2[i]], circular))
                break switchCase;
            }
            rtn = true;
            break switchCase;
          }
          case ($is\uA4FAarray(a) || "Arguments" === objTag): {
            const aObj = a;
            const bObj = b;
            if (aObj.length !== bObj.length)
              break switchCase;
            for (let i = 0; i < aObj.length; i++) {
              if (!$is\uA4FAdeepEqual\uA4FAhelper(aObj[i], bObj[i], circular))
                break switchCase;
            }
            rtn = true;
            break switchCase;
          }
          case a instanceof Set: {
            const aObj = a;
            const bObj = b;
            if (aObj.size !== bObj.size)
              break switchCase;
            const aValues = [...aObj];
            const bValues = [...bObj];
            for (let i = 0; i < aValues.length; i++) {
              if (!$is\uA4FAdeepEqual\uA4FAhelper(aValues[i], bValues[i], circular))
                break switchCase;
            }
            rtn = true;
            break switchCase;
          }
          case a instanceof Map: {
            const aObj = a;
            const bObj = b;
            if (aObj.size !== bObj.size)
              break switchCase;
            for (const [key, value] of aObj) {
              if (!bObj.has(key))
                break switchCase;
              if (!$is\uA4FAdeepEqual\uA4FAhelper(value, bObj.get(key), circular))
                break switchCase;
            }
            rtn = true;
            break switchCase;
          }
          case (ArrayBuffer.isView(a) && !(a instanceof DataView)): {
            const aObj = a;
            const bObj = b;
            if (aObj.length !== bObj.length)
              break switchCase;
            for (let i = 0; i < aObj.length; i++) {
              if (aObj[i] !== bObj[i])
                break switchCase;
            }
            rtn = true;
            break switchCase;
          }
          case a instanceof URL: {
            const aObj = a;
            const bObj = b;
            rtn = aObj.toString() === bObj.toString();
            break switchCase;
          }
          case a instanceof Date: {
            const aObj = a;
            const bObj = b;
            rtn = aObj.getTime() === bObj.getTime();
            break switchCase;
          }
          case a instanceof RegExp: {
            const aObj = a;
            const bObj = b;
            rtn = aObj.source === bObj.source && aObj.flags === bObj.flags;
            break switchCase;
          }
          case ["Boolean", "Number", "String"].includes(objTag): {
            const aObj = a;
            const bObj = b;
            rtn = aObj.valueOf() === bObj.valueOf();
            break switchCase;
          }
        }
      circular.get(a)?.set(b, rtn);
      return rtn;
    };
    $fn\uA4FAmicroMemoize = microMemoizeWithBrokenTypes;
    $fn\uA4FAmemo\uA4FAflush\uA4FAhelper = function() {
      const { cache, options: options4 } = this;
      cache.keys.length = cache.values.length = 0;
      if (options4.onCacheChange)
        options4.onCacheChange(cache, options4, this);
      return { fresh: this };
    };
    $fn\uA4FAmemo\uA4FAfresh\uA4FAhelper = function() {
      this.flush();
      return this;
    };
    $fn\uA4FAonce = /* @__NO_SIDE_EFFECTS__ */ (fn) => {
      return /* @__PURE__ */ $fn\uA4FAmemo({ maxSize: 1, isMatchingKey: () => true }, fn);
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/symbol.js
var objToPlain, objToJSON, objToClone, objFreezeClones, objDeepFreezeClones, objReadableLength;
var init_symbol = __esm({
  "node_modules/@clevercanyon/utilities/dist/symbol.js"() {
    objToPlain = Symbol("objToPlain");
    objToJSON = "toJSON";
    objToClone = Symbol("objToClone");
    objFreezeClones = Symbol("objFreezeClones");
    objDeepFreezeClones = Symbol("objDeepFreezeClones");
    objReadableLength = Symbol("objReadableLength");
  }
});

// node_modules/@clevercanyon/utilities/dist/to.js
var string, numberBetween, array2, plainObject2, plainObjectDeep, plainObjectDeep\uA4FAhelper, plainObjectDeep\uA4FAplainValue\uA4FAhelper, flatObject, flatObject\uA4FAhelper;
var init_to = __esm({
  "node_modules/@clevercanyon/utilities/dist/to.js"() {
    init_is();
    init_symbol();
    init_obj();
    string = (value) => {
      return nul(value) ? "" : String(value);
    };
    numberBetween = (value, min, max) => {
      return Math.max(min, Math.min(max, Number(value) || 0));
    };
    array2 = (value) => {
      if (array(value)) {
        return value;
      } else if (nul(value)) {
        return [];
      }
      return [value];
    };
    plainObject2 = (value) => {
      if (!object(value)) {
        return { ...Object(value) };
      }
      for (const fnKey of [objToPlain, objToJSON]) {
        if (value[fnKey] && _function(value[fnKey])) {
          const derivation = value[fnKey]();
          if (object(derivation)) {
            value = derivation;
            break;
          }
        }
      }
      if (set(value)) {
        return { ...[...value] };
      } else if (map(value)) {
        return Object.fromEntries(value.entries());
      }
      return { ...value };
    };
    plainObjectDeep = (value) => {
      return plainObjectDeep\uA4FAhelper(value);
    };
    plainObjectDeep\uA4FAhelper = (value, circular = /* @__PURE__ */ new Map()) => {
      const isObjectValue = object(value);
      if (isObjectValue && circular.has(value)) {
        return circular.get(value);
      }
      const plain = plainObject2(value);
      if (isObjectValue)
        circular.set(value, plain);
      for (const [key, value2] of keyAndSymbolEntries(plain)) {
        plain[key] = plainObjectDeep\uA4FAplainValue\uA4FAhelper(value2, circular);
      }
      return plain;
    };
    plainObjectDeep\uA4FAplainValue\uA4FAhelper = (value, circular) => {
      if (!object(value) || _function(value) || promise2(value)) {
        return value;
      }
      if (circular.has(value))
        return circular.get(value);
      if (set(value) || array(value)) {
        const plain = [];
        circular.set(value, plain);
        value = set(value) ? [...value] : value;
        for (let key = 0; key < value.length; key++) {
          plain[key] = plainObjectDeep\uA4FAplainValue\uA4FAhelper(value[key], circular);
        }
        return plain;
      } else {
        return plainObjectDeep\uA4FAhelper(value, circular);
      }
    };
    flatObject = (value, separator = ".") => {
      return flatObject\uA4FAhelper(Object(value), separator);
    };
    flatObject\uA4FAhelper = (value, separator, path15 = void 0, flat = {}, circular = /* @__PURE__ */ new Set()) => {
      const inDeep = void 0 !== path15;
      const isObjectValue = object(value);
      if (inDeep && isObjectValue && circular.has(value)) {
        if (void 0 !== path15)
          flat[path15] = value;
      } else {
        if (isObjectValue)
          circular.add(value);
        if (isObjectValue && array(value) && value.length) {
          for (let key = 0; key < value.length; key++) {
            const keyPath = void 0 !== path15 ? `${path15}[${key}]` : `[${key}]`;
            flatObject\uA4FAhelper(value[key], separator, keyPath, flat, circular);
          }
        } else if (isObjectValue && (!inDeep || plainObject(value)) && Object.keys(value).length) {
          for (const [key, keyValue] of Object.entries(value)) {
            const keyPath = void 0 !== path15 ? `${path15}${separator}${key}` : key;
            flatObject\uA4FAhelper(keyValue, separator, keyPath, flat, circular);
          }
        } else if (inDeep) {
          if (void 0 !== path15)
            flat[path15] = value;
        }
      }
      return flat;
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/obp.js
var obp_exports = {};
__export(obp_exports, {
  defaultTo: () => defaultTo,
  get: () => get,
  has: () => has,
  leave: () => leave,
  omit: () => omit,
  pick: () => pick,
  set: () => set2,
  splitPath: () => splitPath,
  toScriptCode: () => toScriptCode,
  unset: () => unset
});
var has, get, set2, defaultTo, unset, leave, omit, pick, splitPath, toScriptCode;
var init_obp = __esm({
  "node_modules/@clevercanyon/utilities/dist/obp.js"() {
    init_is();
    init_to();
    init_obj();
    init_str();
    has = (objValue, path15, separator = ".", opts = {}) => {
      path15 = splitPath(path15, separator);
      if (0 === path15.length || !object(objValue) || !(path15[0] in objValue)) {
        return false;
      }
      if (1 === path15.length && (!opts.endOwn || Object.hasOwn(objValue, path15[0]))) {
        return true;
      }
      return has(objValue[path15[0]], path15.slice(1), separator, opts);
    };
    get = (objValue, path15, defaultValue = void 0, separator = ".") => {
      if (void 0 === objValue) {
        return defaultValue;
      }
      path15 = splitPath(path15, separator);
      if (0 === path15.length) {
        return objValue;
      }
      if (!object(objValue)) {
        return defaultValue;
      }
      return get(objValue[path15[0]], path15.slice(1), defaultValue, separator);
    };
    set2 = (objValue, path15, value, separator = ".", intOpts = {}) => {
      if (!object(objValue)) {
        return;
      }
      path15 = splitPath(path15, separator);
      if (0 === path15.length) {
        return;
      }
      const currentPath2 = path15[0];
      if (protoPollutionKey(currentPath2)) {
        throw Error("vdW86ej9");
      }
      if (1 === path15.length) {
        if (!intOpts.defaultTo || void 0 === objValue[currentPath2]) {
          objValue[currentPath2] = value;
        }
      } else {
        if (void 0 === objValue[currentPath2]) {
          objValue[currentPath2] = number(path15[1]) ? [] : {};
        }
        set2(objValue[currentPath2], path15.slice(1), value, separator, intOpts);
      }
    };
    defaultTo = (objValue, path15, value, separator = ".") => {
      set2(objValue, path15, value, separator, { defaultTo: true });
    };
    unset = (objValue, path15, separator = ".") => {
      if (!object(objValue)) {
        return;
      }
      path15 = splitPath(path15, separator);
      if (0 === path15.length) {
        return;
      }
      const currentPath2 = path15[0];
      if (protoPollutionKey(currentPath2)) {
        throw Error("CcguuNCd");
      }
      if ("*" === currentPath2) {
        if (array(objValue)) {
          objValue.splice(0, objValue.length);
        } else {
          for (const key of Array.from(Object.keys(objValue))) {
            delete objValue[key];
          }
        }
      } else if (1 === path15.length) {
        if (array(objValue) && numeric(currentPath2, "safeArrayKey")) {
          objValue.splice(Number(currentPath2), 1);
        } else {
          delete objValue[currentPath2];
        }
      } else {
        if ("*" === path15[1] && !object(objValue[currentPath2])) {
          objValue[currentPath2] = void 0;
        } else {
          unset(objValue[currentPath2], path15.slice(1), separator);
        }
      }
    };
    leave = (objValue, paths, separator = ".") => {
      if (!object(objValue)) {
        return;
      }
      const leavePaths = {};
      for (const path15 of array2(paths)) {
        if (!safeObjectPath(path15)) {
          throw Error("b8aD3mN4");
        }
        let leavePath = path15;
        let subPaths = [];
        if (string2(path15)) {
          [leavePath, ...subPaths] = splitPath(path15, separator);
        }
        if (!leavePaths[leavePath]) {
          leavePaths[leavePath] = [];
        }
        if (subPaths.length) {
          leavePaths[leavePath].push(subPaths.join(separator));
        }
      }
      if (array(objValue)) {
        for (let key = objValue.length - 1; key >= 0; key--) {
          if (!(key in leavePaths)) {
            objValue.splice(key, 1);
          } else if (leavePaths[key].length && object(objValue[key])) {
            leave(objValue[key], leavePaths[key], separator);
          }
        }
      } else {
        for (const key of Array.from(Object.keys(objValue))) {
          if (!(key in leavePaths)) {
            delete objValue[key];
          } else if (leavePaths[key].length && object(objValue[key])) {
            leave(objValue[key], leavePaths[key], separator);
          }
        }
      }
    };
    omit = (objValue, paths, separator = ".") => {
      const objClone = cloneDeep(objValue);
      for (const path15 of array2(paths)) {
        unset(objClone, path15, separator);
      }
      return objClone;
    };
    pick = (objValue, paths, separator = ".") => {
      const objClone = cloneDeep(objValue);
      leave(objClone, paths, separator);
      return objClone;
    };
    splitPath = (path15, separator = ".") => {
      if (array(path15)) {
        return path15;
      }
      if (number(path15)) {
        if (!safeObjectPath(path15)) {
          throw Error("tZVtFWYz");
        }
        return [path15];
      }
      if (string2(path15)) {
        if (/^\[[0-9]+\]$/u.test(path15)) {
          path15 = Number(path15.slice(1, -1));
          if (!safeObjectPath(path15)) {
            throw Error("GnWqwYxh");
          }
          return [path15];
        }
        let splitPath2 = path15.split(new RegExp("(" + escRegExp(separator) + "|\\[[0-9]+\\])"));
        splitPath2 = splitPath2.filter((pathPart) => pathPart && separator !== pathPart ? true : false);
        return splitPath2.map((_pathPart) => {
          let pathPart = _pathPart;
          if (/^\[[0-9]+\]$/u.test(_pathPart)) {
            pathPart = Number(_pathPart.slice(1, -1));
          }
          if (!safeObjectPath(pathPart)) {
            throw Error("Zscn3aVu");
          }
          return pathPart;
        });
      }
      throw Error("npkVYFWz");
    };
    toScriptCode = (path15, separator = ".") => {
      let init = "";
      let set22 = "globalThis";
      for (let parts = splitPath(path15, separator), i = 0; i < parts.length; i++) {
        set22 += number(parts[i]) ? "[" + String(parts[i]) + "]" : "[" + quote2(String(parts[i])) + "]";
        init += (init ? " " : "") + set22 + " = " + set22 + " || {};";
      }
      return { init, set: set22 };
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/type.js
var ensure;
var init_type = __esm({
  "node_modules/@clevercanyon/utilities/dist/type.js"() {
    init_to();
    ensure = (value, type) => {
      switch (type) {
        case "boolean": {
          return Boolean(value);
        }
        case "boolean[]": {
          return array2(value).map(Boolean);
        }
        case "number": {
          return Number(value);
        }
        case "number[]": {
          return array2(value).map(Number);
        }
        case "bigint": {
          return BigInt(value);
        }
        case "bigint[]": {
          return array2(value).map(BigInt);
        }
        case "string": {
          return string(value);
        }
        case "string[]": {
          return array2(value).map(string);
        }
        case "object": {
          return Object(value);
        }
        case "object[]": {
          return array2(value).map(Object);
        }
        case "plainObject": {
          return plainObject2(value);
        }
        case "plainObject[]": {
          return array2(value).map((v) => plainObject2(v));
        }
        case "plainObjectDeep": {
          return plainObjectDeep(value);
        }
        case "plainObjectDeep[]": {
          return array2(value).map((v) => plainObjectDeep(v));
        }
        case "unknown": {
          return value;
        }
        default: {
          throw Error("Y8PGpTWn");
        }
      }
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/url.js
var url_exports = {};
__export(url_exports, {
  addAppBasePath: () => addAppBasePath,
  addAppR2BasePath: () => addAppR2BasePath,
  addAppRootR2BasePath: () => addAppRootR2BasePath,
  addBasePath: () => addBasePath,
  addCurrentBasePath: () => addCurrentBasePath,
  addQueryVar: () => addQueryVar,
  addQueryVars: () => addQueryVars,
  appBasePath: () => appBasePath,
  appR2BasePath: () => appR2BasePath,
  appRootR2BasePath: () => appRootR2BasePath,
  current: () => current,
  currentBase: () => currentBase,
  currentBasePath: () => currentBasePath,
  currentHash: () => currentHash,
  currentHost: () => currentHost,
  currentPath: () => currentPath,
  currentPathQuery: () => currentPathQuery,
  currentPathQueryHash: () => currentPathQueryHash,
  currentPort: () => currentPort,
  currentQuery: () => currentQuery,
  currentReferrer: () => currentReferrer,
  currentRootHost: () => currentRootHost,
  currentScheme: () => currentScheme,
  currentSubpath: () => currentSubpath,
  decode: () => decode,
  encode: () => encode,
  fromAppBase: () => fromAppBase,
  fromAppR2Base: () => fromAppR2Base,
  fromAppR2Origin: () => fromAppR2Origin,
  fromAppRootR2Base: () => fromAppRootR2Base,
  fromAppRootR2Origin: () => fromAppRootR2Origin,
  fromCurrentBase: () => fromCurrentBase,
  getQueryVar: () => getQueryVar,
  getQueryVars: () => getQueryVars,
  isAbsolute: () => isAbsolute,
  isPotentiallyTrustworthy: () => isPotentiallyTrustworthy,
  isProtoRelative: () => isProtoRelative,
  isRelative: () => isRelative,
  isRootRelative: () => isRootRelative,
  localHostPatterns: () => localHostPatterns,
  parse: () => parse2,
  pathFromAppBase: () => pathFromAppBase,
  pathFromAppR2Base: () => pathFromAppR2Base,
  pathFromAppR2Origin: () => pathFromAppR2Origin,
  pathFromAppRootR2Base: () => pathFromAppRootR2Base,
  pathFromAppRootR2Origin: () => pathFromAppRootR2Origin,
  pathFromCurrentBase: () => pathFromCurrentBase,
  queryRFC1738: () => queryRFC1738,
  queryRFC3986: () => queryRFC3986,
  queryRFC3986AWS4: () => queryRFC3986AWS4,
  removeAppBasePath: () => removeAppBasePath,
  removeAppR2BasePath: () => removeAppR2BasePath,
  removeAppRootR2BasePath: () => removeAppRootR2BasePath,
  removeBasePath: () => removeBasePath,
  removeCSOQueryVars: () => removeCSOQueryVars,
  removeCurrentBasePath: () => removeCurrentBasePath,
  removeQueryVar: () => removeQueryVar,
  removeQueryVars: () => removeQueryVars,
  rootHost: () => rootHost,
  stdLocalHostnames: () => stdLocalHostnames,
  toCanonical: () => toCanonical,
  toHashless: () => toHashless,
  toPath: () => toPath,
  toPathQuery: () => toPathQuery,
  toPathQueryHash: () => toPathQueryHash,
  tryParse: () => tryParse
});
function addCurrentBasePath(parseable) {
  return addBasePath(parseable, currentBase());
}
function removeCurrentBasePath(parseable) {
  return removeBasePath(parseable, currentBase());
}
function _addAppBasePath(parseable) {
  return addBasePath(parseable, baseURL());
}
function _removeAppBasePath(parseable) {
  return removeBasePath(parseable, baseURL());
}
function _addAppRootR2BasePath(parseable) {
  return addBasePath(parseable, rootR2BaseURL());
}
function _removeAppRootR2BasePath(parseable) {
  return removeBasePath(parseable, rootR2BaseURL());
}
function _addAppR2BasePath(parseable) {
  return addBasePath(parseable, r2BaseURL());
}
function _removeAppR2BasePath(parseable) {
  return removeBasePath(parseable, r2BaseURL());
}
function addBasePath(parseable, base) {
  base = url2(base) ? base : parse2(base);
  let baseDirPath = base.pathname;
  const url$1 = parse2(parseable, base.origin + "/");
  let pathQueryHash = toPathQueryHash(url$1);
  const rtnURL = url2(parseable);
  const rtnPathQueryHash = !rtnURL && !isAbsolute(parseable);
  if (baseDirPath && !baseDirPath.endsWith("/")) {
    baseDirPath = baseDirPath.replace(/\/[^/]+$/u, "/");
  }
  if (!["", "/"].includes(baseDirPath)) {
    pathQueryHash = rTrim(baseDirPath, "/") + pathQueryHash;
  }
  return rtnURL ? parse2(pathQueryHash, url$1.origin + "/") : rtnPathQueryHash ? pathQueryHash : parse2(pathQueryHash, url$1.origin + "/").toString();
}
function removeBasePath(parseable, base) {
  base = url2(base) ? base : parse2(base);
  let baseDirPath = base.pathname;
  const url$1 = parse2(parseable, base.origin + "/");
  let pathQueryHash = toPathQueryHash(url$1);
  const rtnURL = url2(parseable);
  const rtnPathQueryHash = !rtnURL && !isAbsolute(parseable);
  if (baseDirPath && !baseDirPath.endsWith("/")) {
    baseDirPath = baseDirPath.replace(/\/[^/]+$/u, "/");
  }
  if (!["", "/"].includes(baseDirPath)) {
    pathQueryHash = pathQueryHash.replace(new RegExp("^" + escRegExp(rTrim(baseDirPath, "/")) + "(?:$|/|([?#]))", "u"), "$1");
  }
  pathQueryHash = "./" + lTrim(pathQueryHash, "/");
  return rtnURL ? parse2(pathQueryHash, url$1.origin + "/") : rtnPathQueryHash ? pathQueryHash : parse2(pathQueryHash, url$1.origin + "/").toString();
}
function getQueryVars(...args) {
  let names;
  let parseable;
  let base;
  if (!args.length || !array(args[0])) {
    names = [];
    parseable = args[0];
    base = args[1];
  } else {
    names = args[0] || [];
    parseable = args[1];
    base = args[2];
  }
  const url22 = parse2(parseable, base);
  const vars2 = {};
  if (![...url22.searchParams].length) {
    return vars2;
  }
  for (const [name, value] of url22.searchParams) {
    vars2[name] = value;
  }
  if (names.length) {
    for (const name of Array.from(Object.keys(vars2))) {
      if (!names.includes(name))
        delete vars2[name];
    }
  }
  return vars2;
}
function addQueryVar(name, value, parseable, base, options4) {
  return addQueryVars({ [name]: value }, parseable, base, options4);
}
function addQueryVars(vars2, parseable, base, options4) {
  const opts = defaults({}, options4 || {}, { replaceExisting: true });
  const url$1 = parse2(parseable, base);
  const rtnURL = url2(parseable);
  const rtnPathQueryHash = !rtnURL && void 0 !== parseable && !isAbsolute(parseable);
  for (const [name, value] of Object.entries(vars2)) {
    if (opts.replaceExisting || !url$1.searchParams.has(name)) {
      url$1.searchParams.set(name, value);
    }
  }
  url$1.searchParams.sort();
  return rtnURL ? url$1 : rtnPathQueryHash ? toPathQueryHash(url$1) : url$1.toString();
}
function removeQueryVar(name, parseable, base) {
  return removeQueryVars([name], parseable, base);
}
function removeQueryVars(...args) {
  let names;
  let parseable;
  let base;
  if (!args.length || !array(args[0])) {
    names = [];
    parseable = args[0];
    base = args[1];
  } else {
    names = args[0] || [];
    parseable = args[1];
    base = args[2];
  }
  const url$1 = parse2(parseable, base);
  const rtnURL = url2(parseable);
  const rtnPathQueryHash = !rtnURL && void 0 !== parseable && !isAbsolute(parseable);
  for (const name of Array.from(url$1.searchParams.keys()))
    if (!names.length || names.includes(name)) {
      url$1.searchParams.delete(name);
    }
  url$1.searchParams.sort();
  return rtnURL ? url$1 : rtnPathQueryHash ? toPathQueryHash(url$1) : url$1.toString();
}
function removeCSOQueryVars(parseable, base) {
  const url$1 = parse2(parseable, base);
  const rtnURL = url2(parseable);
  const rtnPathQueryHash = !rtnURL && void 0 !== parseable && !isAbsolute(parseable);
  for (const name of Array.from(url$1.searchParams.keys()))
    if (/^(?:ut[mx]_[a-z_0-9]+|_g[al]|(?:gcl|dcl|msclk|fbcl)(?:id|src)|wbraid|_ck)$/iu.test(name)) {
      url$1.searchParams.delete(name);
    }
  url$1.searchParams.sort();
  return rtnURL ? url$1 : rtnPathQueryHash ? toPathQueryHash(url$1) : url$1.toString();
}
var stdLocalHostnames, localHostPatterns, current, currentReferrer, currentScheme, currentHost, currentRootHost, currentPort, currentPath, currentSubpath, currentQuery, currentHash, currentPathQuery, currentPathQueryHash, currentBase, currentBasePath, fromCurrentBase, pathFromCurrentBase, appBasePath, fromAppBase, pathFromAppBase, addAppBasePath, removeAppBasePath, fromAppRootR2Origin, pathFromAppRootR2Origin, appRootR2BasePath, fromAppRootR2Base, pathFromAppRootR2Base, addAppRootR2BasePath, removeAppRootR2BasePath, fromAppR2Origin, pathFromAppR2Origin, appR2BasePath, fromAppR2Base, pathFromAppR2Base, addAppR2BasePath, removeAppR2BasePath, isAbsolute, isProtoRelative, isRootRelative, isRelative, isPotentiallyTrustworthy, rootHost, parse2, tryParse, toHashless, toCanonical, toPath, toPathQuery, toPathQueryHash, getQueryVar, queryRFC1738, queryRFC3986, queryRFC3986AWS4, encode, decode;
var init_url = __esm({
  "node_modules/@clevercanyon/utilities/dist/url.js"() {
    init_standalone();
    init_obj();
    init_str();
    init_app();
    init_is();
    init_env();
    stdLocalHostnames = () => ["local", "localhost"];
    localHostPatterns = $fn\uA4FAmemo(() => {
      return freeze([
        .../* @__PURE__ */ new Set([
          /^\[::\]$/u,
          // IPv6 null address.
          /^0\.0\.0\.0$/u,
          // IPv4 null address.
          /^\[::1\]$/u,
          // IPv6 loopback address.
          /^127\.0\.0\.1$/u,
          // IPv4 loopback address.
          // These can be used as hostnames, or as TLDs; e.g., `local`, `x.local`.
          ...stdLocalHostnames().map((name) => new RegExp("^(?:.+\\.)?" + escRegExp(name) + "$", "ui")),
          // These can only be used as TLDs; e.g., `x.mac`, `x.loc`, etc.
          ...["mac", "loc", "dkr", "vm"].map((name) => new RegExp("^(?:.+\\.)" + escRegExp(name) + "$", "ui"))
        ])
      ]);
    });
    current = () => {
      return location.href;
    };
    currentReferrer = () => {
      return document.referrer;
    };
    currentScheme = $fn\uA4FAmemo({ deep: true, maxSize: 2 }, (options4) => {
      const opts = defaults({}, options4 || {}, { withMark: false });
      return opts.withMark ? location.protocol : location.protocol.slice(0, -1);
    });
    currentHost = $fn\uA4FAmemo({ deep: true, maxSize: 2 }, (options4) => {
      const opts = defaults({}, options4 || {}, { withPort: true });
      return opts.withPort ? location.host : location.hostname;
    });
    currentRootHost = $fn\uA4FAmemo({ deep: true, maxSize: 2 }, (options4) => {
      const opts = defaults({}, options4 || {}, { withPort: true });
      return rootHost(currentHost(), { withPort: opts.withPort });
    });
    currentPort = $fn\uA4FAmemo(() => {
      return location.port;
    });
    currentPath = () => {
      return location.pathname;
    };
    currentSubpath = () => {
      return location.pathname.replace(/^\/+|\/+$/gu, "");
    };
    currentQuery = (options4) => {
      const opts = defaults({}, options4 || {}, { withMark: false });
      return opts.withMark ? location.search : location.search.slice(1);
    };
    currentHash = (options4) => {
      const opts = defaults({}, options4 || {}, { withMark: false });
      return opts.withMark ? location.hash : location.hash.slice(1);
    };
    currentPathQuery = () => {
      return location.pathname + location.search;
    };
    currentPathQueryHash = () => {
      return location.pathname + location.search + location.hash;
    };
    currentBase = () => {
      return document.baseURI;
    };
    currentBasePath = () => {
      return parse2(currentBase()).pathname;
    };
    fromCurrentBase = (parseable) => {
      return parse2(parseable, currentBase()).toString();
    };
    pathFromCurrentBase = (parseable) => {
      return toPathQueryHash(fromCurrentBase(parseable));
    };
    appBasePath = $fn\uA4FAmemo(() => {
      return parse2(baseURL()).pathname;
    });
    fromAppBase = $fn\uA4FAmemo(24, (parseable) => {
      return parse2(parseable, baseURL()).toString();
    });
    pathFromAppBase = $fn\uA4FAmemo(24, (parseable) => {
      return toPathQueryHash(fromAppBase(parseable));
    });
    addAppBasePath = $fn\uA4FAmemo(24, _addAppBasePath);
    removeAppBasePath = $fn\uA4FAmemo(24, _removeAppBasePath);
    fromAppRootR2Origin = $fn\uA4FAmemo(24, (parseable) => {
      return parse2(parseable, rootR2OriginURL() + "/").toString();
    });
    pathFromAppRootR2Origin = $fn\uA4FAmemo(24, (parseable) => {
      return toPathQueryHash(fromAppRootR2Origin(parseable));
    });
    appRootR2BasePath = $fn\uA4FAmemo(() => {
      return parse2(rootR2BaseURL()).pathname;
    });
    fromAppRootR2Base = $fn\uA4FAmemo(24, (parseable) => {
      return parse2(parseable, rootR2BaseURL()).toString();
    });
    pathFromAppRootR2Base = $fn\uA4FAmemo(24, (parseable) => {
      return toPathQueryHash(fromAppRootR2Base(parseable));
    });
    addAppRootR2BasePath = $fn\uA4FAmemo(24, _addAppRootR2BasePath);
    removeAppRootR2BasePath = $fn\uA4FAmemo(24, _removeAppRootR2BasePath);
    fromAppR2Origin = $fn\uA4FAmemo(24, (parseable) => {
      return parse2(parseable, r2OriginURL() + "/").toString();
    });
    pathFromAppR2Origin = $fn\uA4FAmemo(24, (parseable) => {
      return toPathQueryHash(fromAppR2Origin(parseable));
    });
    appR2BasePath = $fn\uA4FAmemo(() => {
      return parse2(r2BaseURL()).pathname;
    });
    fromAppR2Base = $fn\uA4FAmemo(24, (parseable) => {
      return parse2(parseable, r2BaseURL()).toString();
    });
    pathFromAppR2Base = $fn\uA4FAmemo(24, (parseable) => {
      return toPathQueryHash(fromAppR2Base(parseable));
    });
    addAppR2BasePath = $fn\uA4FAmemo(24, _addAppR2BasePath);
    removeAppR2BasePath = $fn\uA4FAmemo(24, _removeAppR2BasePath);
    isAbsolute = $fn\uA4FAmemo(12, (parseable) => {
      return url2(parseable) || /^(?:[^:/?#\s]+:)?\/\//u.test(parseable);
    });
    isProtoRelative = $fn\uA4FAmemo(12, (parseable) => {
      return !url2(parseable) && /^\/\//u.test(parseable);
    });
    isRootRelative = $fn\uA4FAmemo(12, (parseable) => {
      return !isAbsolute(parseable) && /^\//u.test(parseable);
    });
    isRelative = $fn\uA4FAmemo(12, (parseable) => {
      return !isAbsolute(parseable) && !/^\//u.test(parseable);
    });
    isPotentiallyTrustworthy = $fn\uA4FAmemo(12, (parseable) => {
      if (string2(parseable) && ["about:blank", "about:srcdoc", "about:client"].includes(parseable.toLowerCase())) {
        return true;
      }
      const url22 = tryParse(parseable);
      if (!url22)
        return false;
      if (["https:", "wss:", "data:", "blob:", "file:", "filesystem:"].includes(url22.protocol)) {
        return true;
      }
      if (test(rootHost(url22, { withPort: false }), localHostPatterns())) {
        return true;
      }
      return false;
    });
    rootHost = $fn\uA4FAmemo({ deep: true, maxSize: 12 }, (host, options4) => {
      const opts = defaults({}, options4 || {}, { withPort: true });
      if (void 0 === host) {
        if (isWeb()) {
          host = currentHost();
        } else
          throw Error("xWX6jGrg");
      }
      let hostname;
      if (url2(host)) {
        const url22 = host;
        host = url22.host, hostname = url22.hostname;
      } else if (isIPv6Host(host)) {
        hostname = host.replace(/(\])(?::[0-9]+)$/u, "$1");
      } else {
        hostname = host.replace(/:[0-9]+$/u, "");
      }
      host = host.toLowerCase();
      hostname = hostname.toLowerCase();
      if (!opts.withPort)
        host = hostname;
      if (isIPHost(host)) {
        return host;
      }
      const localHostnames = stdLocalHostnames();
      if (localHostnames.includes(hostname) || localHostnames.find((localHostname) => hostname.endsWith("." + localHostname))) {
        return host.split(".").slice(-1).join(".");
      }
      return host.split(".").slice(-2).join(".");
    });
    parse2 = (parseable, base, options4) => {
      const opts = defaults({}, options4 || {}, { throwOnError: true });
      if (url2(parseable))
        return new URL(parseable);
      if (void 0 === parseable) {
        if (isWeb()) {
          parseable = current();
        } else
          throw Error("jKgRHAUK");
      }
      let strURL = parseable.toString();
      if (strURL && isProtoRelative(strURL)) {
        const scheme = isWeb() ? currentScheme() : "https";
        strURL = strURL.replace(/^\/\//u, scheme + "://");
      }
      let strBase = base ? base.toString() : "";
      if (strBase && isProtoRelative(strBase)) {
        const scheme = isWeb() ? currentScheme() : "https";
        strBase = strBase.replace(/^\/\//u, scheme + "://");
      }
      try {
        return new URL(strURL, strBase || void 0);
      } catch (thrown) {
        if (opts.throwOnError)
          throw thrown;
      }
      return void 0;
    };
    tryParse = (parseable, base, options4) => {
      return parse2(parseable, base, { ...options4, throwOnError: false });
    };
    toHashless = (parseable, base) => {
      const url22 = parse2(parseable, base);
      url22.hash = "";
      return url22.toString();
    };
    toCanonical = (parseable, base) => {
      const url22 = parse2(parseable, base);
      url22.pathname = rTrim(url22.pathname, "/") || "/";
      url22.search = url22.hash = "";
      return url22.toString();
    };
    toPath = (parseable, base) => {
      return parse2(parseable, base).pathname;
    };
    toPathQuery = (parseable, base) => {
      const url22 = parse2(parseable, base);
      return url22.pathname + url22.search;
    };
    toPathQueryHash = (parseable, base) => {
      const url22 = parse2(parseable, base);
      return url22.pathname + url22.search + url22.hash;
    };
    getQueryVar = (name, parseable, base) => {
      const url22 = parse2(parseable, base);
      if (!url22.searchParams.has(name)) {
        return void 0;
      }
      return url22.searchParams.get(name) || "";
    };
    queryRFC1738 = Symbol("queryRFC1738");
    queryRFC3986 = Symbol("queryRFC3986");
    queryRFC3986AWS4 = Symbol("queryRFC3986AWS4");
    encode = (str, strategy = queryRFC3986) => {
      switch (strategy) {
        case queryRFC1738:
          return encodeURIComponent(str).replace(/[!'()*~]/gu, function(c) {
            return "%" + c.charCodeAt(0).toString(16).toUpperCase();
          }).replace(/%20/gu, "+");
        case queryRFC3986:
        case queryRFC3986AWS4:
        default:
          return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
            return "%" + c.charCodeAt(0).toString(16).toUpperCase();
          });
      }
    };
    decode = (str, strategy = queryRFC3986) => {
      switch (strategy) {
        case queryRFC1738:
          return decodeURIComponent(str.replace(/%(?![0-9a-f]{2})/giu, () => "%25").replace(/\+/gu, "%20"));
        case queryRFC3986:
        case queryRFC3986AWS4:
        default:
          return decodeURIComponent(str.replace(/%(?![0-9a-f]{2})/giu, () => "%25"));
      }
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/cookie.js
var webCookieMap, validRegExp, invalidRegExp, nameIsValid, parse3, exists, get2;
var init_cookie = __esm({
  "node_modules/@clevercanyon/utilities/dist/cookie.js"() {
    init_standalone();
    init_env();
    init_is();
    init_str();
    init_url();
    init_obj();
    webCookieMap = /* @__PURE__ */ new Map();
    validRegExp = /^[a-z0-9_-]+$/iu;
    invalidRegExp = /^(?:domain|path|expires|max-age|samesite|secure|httponly)$/iu;
    nameIsValid = (name) => {
      return validRegExp.test(name) && !invalidRegExp.test(name);
    };
    parse3 = $fn\uA4FAmemo(
      // Ensures no args is the same as passing `header: undefined`.
      { maxSize: 6, transformKey: (args) => args.length ? args : [void 0] },
      (header) => {
        const cookies = {};
        let isWebHeader = false;
        if (void 0 === header) {
          if (isWeb()) {
            isWebHeader = true;
            header = document.cookie;
          } else
            throw Error("cYBccffX");
        } else if (request(header)) {
          header = header.headers.get("cookie") || "";
        }
        for (const cookie of header.split(/\s*;\s*/)) {
          let name, value;
          const eqIndex = cookie.indexOf("=");
          if (-1 !== eqIndex) {
            name = cookie.substring(0, eqIndex);
            value = cookie.substring(eqIndex + 1);
          } else {
            [name, value] = [cookie, ""];
          }
          if ("" === name || !nameIsValid(name)) {
            continue;
          }
          value = unquote(value, { type: "double" });
          cookies[decode(name)] = decode(value);
        }
        if (isWebHeader)
          for (const [key, value] of webCookieMap.entries())
            if (void 0 === value) {
              delete cookies[key];
            } else
              cookies[key] = value;
        return freeze(cookies);
      }
    );
    exists = $fn\uA4FAmemo(
      {
        maxSize: 24,
        // Special handling of matching keys.
        // Special, because we don’t want deep equals on a request object.
        isMatchingKey: (a, b) => {
          return a[0] === b[0] && //
          a[1]?.request === b[1]?.request;
        }
      },
      (name, options4) => {
        const opts = defaults({}, options4 || {}), cookies = parse3(opts.request);
        return Object.hasOwn(cookies, name);
      }
    );
    get2 = $fn\uA4FAmemo(
      {
        maxSize: 24,
        // Special handling of matching keys.
        // Special, because we don’t want deep equals on a request object.
        isMatchingKey: (a, b) => {
          return a[0] === b[0] && a[1]?.request === b[1]?.request && a[1]?.default === b[1]?.default;
        }
      },
      (name, options4) => {
        const opts = defaults({}, options4 || {}, { default: "" }), cookies = parse3(opts.request);
        return Object.hasOwn(cookies, name) ? cookies[name] : opts.default;
      }
    );
  }
});

// node_modules/@clevercanyon/utilities/dist/fn.js
var fn_exports = {};
__export(fn_exports, {
  curry: () => curry,
  debounce: () => debounce,
  memo: () => memo,
  noOp: () => noOp,
  once: () => once,
  throttle: () => throttle,
  try: () => tryFn
});
function tryFn(fn, catchReturn, options4) {
  const useCatchReturn = arguments.length >= 2;
  const opts = defaults({}, options4 || {}, { throwOnError: false });
  if (asyncFunction(fn)) {
    return async function(...args) {
      try {
        return await fn.apply(this, args);
      } catch (thrown) {
        if (opts.throwOnError)
          throw thrown;
        if (useCatchReturn)
          return catchReturn;
        return error(thrown) ? thrown : Error("T5TGFUSp");
      }
    };
  } else {
    return function(...args) {
      try {
        return fn.apply(this, args);
      } catch (thrown) {
        if (opts.throwOnError)
          throw thrown;
        if (useCatchReturn)
          return catchReturn;
        return error(thrown) ? thrown : Error("eKnHRRWW");
      }
    };
  }
}
var noOp, memo, once, curry, throttle, debounce;
var init_fn = __esm({
  "node_modules/@clevercanyon/utilities/dist/fn.js"() {
    init_standalone();
    init_obj();
    init_is();
    noOp = $fn\uA4FAnoOp;
    memo = $fn\uA4FAmemo;
    once = $fn\uA4FAonce;
    curry = (fn, ...startingArgs) => {
      return function(...partialArgs) {
        const args = [...startingArgs, ...partialArgs];
        if (args.length >= fn.length) {
          return fn.apply(this, args);
        } else {
          return curry(fn, ...args);
        }
      };
    };
    throttle = (fn, options4) => {
      const defaultOpts = { edge: "trailing", waitTime: 250, _debounceMode: false }, opts = defaults({}, options4 || {}, defaultOpts);
      const rtnFn = async function(...args) {
        rtnFn.$latestArgs = args;
        if (rtnFn.$promiseLock) {
          if (opts._debounceMode) {
            rtnFn.$lastDebounceTime = Date.now();
          }
          return rtnFn.$promiseLock;
        }
        rtnFn.$promiseLock = new Promise((resolve, reject) => {
          rtnFn.$promiseResolve = resolve;
          rtnFn.$promiseReject = reject;
          if ("leading" === opts.edge && rtnFn.$promiseResolve) {
            const fnRtn = fn.apply(this, rtnFn.$latestArgs);
            rtnFn.$promiseResolve(fnRtn);
          }
          const afterWaitTimeout = () => {
            if (opts._debounceMode && rtnFn.$lastDebounceTime) {
              const adjustedWaitTime = Math.max(0, rtnFn.$lastDebounceTime + opts.waitTime - Date.now());
              rtnFn.$lastDebounceTime = 0;
              rtnFn.$waitTimeout = setTimeout(afterWaitTimeout, adjustedWaitTime);
            } else {
              if ("trailing" === opts.edge && rtnFn.$promiseResolve) {
                const fnRtn = fn.apply(this, rtnFn.$latestArgs);
                rtnFn.$promiseResolve(fnRtn);
              }
              rtnFn.$releasePromiseLock();
            }
          };
          rtnFn.$waitTimeout = setTimeout(afterWaitTimeout, opts.waitTime);
        }).catch((fnRtn) => fnRtn);
        return rtnFn.$promiseLock;
      };
      rtnFn.$lastDebounceTime = 0;
      rtnFn.$latestArgs = [];
      rtnFn.$waitTimeout = void 0;
      rtnFn.$promiseLock = void 0;
      rtnFn.$promiseResolve = void 0;
      rtnFn.$promiseReject = void 0;
      rtnFn.$releasePromiseLock = function() {
        delete rtnFn.$promiseLock;
        delete rtnFn.$promiseResolve;
        delete rtnFn.$promiseReject;
      };
      rtnFn.flush = function() {
        if (rtnFn.$promiseLock) {
          clearTimeout(rtnFn.$waitTimeout);
          if ("trailing" === opts.edge && rtnFn.$promiseResolve) {
            const fnRtn = fn.apply(this, rtnFn.$latestArgs);
            rtnFn.$promiseResolve(fnRtn);
          }
          rtnFn.$releasePromiseLock();
        }
      };
      rtnFn.cancel = function(fnRtn) {
        if (rtnFn.$promiseLock) {
          clearTimeout(rtnFn.$waitTimeout);
          if ("trailing" === opts.edge && rtnFn.$promiseReject) {
            rtnFn.$promiseReject(fnRtn);
          }
          rtnFn.$releasePromiseLock();
        }
      };
      return rtnFn;
    };
    debounce = (fn, options4) => {
      return throttle(fn, { ...options4 || {}, _debounceMode: true });
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/env.js
function get3(...args) {
  if (!varsInitialized)
    initializeVars();
  let leadingObps, subObpOrObp, options4;
  if (1 === args.length || 2 === args.length && object(args[1])) {
    leadingObps = [""], subObpOrObp = args[0], options4 = args[1];
  } else
    leadingObps = args[0], subObpOrObp = args[1], options4 = args[2];
  let value;
  const opts = defaults({}, options4 || {}, { type: void 0, require: false, default: void 0 }), queriedObps = [];
  loop:
    for (const leadingObp of array2(leadingObps)) {
      const obp$1 = [leadingObp, subObpOrObp].filter((v) => "" !== v).join("."), obpVariants = [.../* @__PURE__ */ new Set([obp$1, obp$1.replace(/(^|\.)(APP_)/gu, "$1SSR_$2")])];
      if (isTopLevelObp(obp$1))
        for (let obp2 of obpVariants) {
          obp2 = globalTopLevelObp(obp2);
          queriedObps.push(obp2);
          value = get(vars, obp2);
          if (void 0 !== value)
            break loop;
        }
      for (let obp2 of obpVariants) {
        obp2 = resolveTopLevelObp(obp2);
        queriedObps.push(obp2);
        value = get(vars, obp2);
        if (void 0 !== value)
          break loop;
      }
    }
  if (void 0 === value)
    value = opts.default;
  if (opts.require && void 0 === value)
    throw Error(
      "Missing required env var.\nQueried object paths:\n" + queriedObps.join(", ")
    );
  if (opts.type) {
    return ensure(value, opts.type);
  }
  return value;
}
function set3(...args) {
  if (!varsInitialized)
    initializeVars();
  let leadingObp, subObpOrObp, value;
  if (2 === args.length) {
    leadingObp = "", subObpOrObp = args[0], value = args[1];
  } else
    leadingObp = args[0], subObpOrObp = args[1], value = args[2];
  const obp$1 = [leadingObp, subObpOrObp].filter((v) => "" !== v).join(".");
  set2(vars, resolveTopLevelObp(obp$1), string2(value) ? parseValue(value) : value);
}
function test2(...args) {
  let leadingObps, subObpOrObp;
  let tests, options4;
  if (1 === args.length || args.length >= 2 && object(args[1])) {
    leadingObps = [""], subObpOrObp = args[0];
    tests = args[1], options4 = args[2];
  } else {
    leadingObps = args[0], subObpOrObp = args[1];
    tests = args[2], options4 = args[3];
  }
  const opts = defaults({}, options4 || {}, { alsoTryCookie: false });
  let value = get3(leadingObps, subObpOrObp);
  if (void 0 === value && opts.alsoTryCookie && isWeb() && "" === array2(leadingObps).join("")) {
    value = get2(subObpOrObp);
  }
  if (emptyOrZero(value))
    return false;
  if (empty(tests))
    return true;
  const strValue = String(value);
  const qvs = tryFn(() => getQueryVars("http://x.tld/?" + strValue), {})();
  for (const [qv, test22] of Object.entries(tests)) {
    const exists2 = Object.hasOwn(qvs, qv);
    const parsedValue = exists2 ? parseValue(qvs[qv]) : void 0;
    if (null === test22 || void 0 === test22) {
      if (!exists2)
        return false;
    } else if (true === test22) {
      if (emptyOrZero(parsedValue))
        return false;
    } else if (false === test22) {
      if (!emptyOrZero(parsedValue))
        return false;
    } else if (!test(qvs[qv] || "", test22))
      return false;
  }
  return true;
}
var define_import_meta_env_default, topLevelObp, topLevelObpSet, varsInitialized, vars, isTopLevelObp, globalTopLevelObp, resolveTopLevelObp, capture, initializeVars, isCI, isTest, isC10n, isVite, inDebugMode, isWeb, isWebViaJSDOM, isSSR, isNode, isCFW, isWorker, isDedicatedWorker, isSharedWorker, isServiceWorker, isLocal, isLocalVite, isLocalVitePrefresh;
var init_env = __esm({
  "node_modules/@clevercanyon/utilities/dist/env.js"() {
    init_standalone();
    init_str();
    init_obj();
    init_obp();
    init_is();
    init_to();
    init_type();
    init_url();
    init_cookie();
    init_fn();
    init_app();
    define_import_meta_env_default = { APP_IS_VITE: "build=prod", BASE_URL: "/", MODE: "prod", DEV: false, PROD: true, SSR: false };
    topLevelObp = "";
    topLevelObpSet = false;
    varsInitialized = false;
    vars = {};
    isTopLevelObp = (obp) => {
      return !obp.includes(".") || /^@top\./u.test(obp);
    };
    globalTopLevelObp = (obp) => {
      if (!obp.includes(".")) {
        return "@global." + obp;
      }
      return obp.replace(/^@top\./u, "@global.");
    };
    resolveTopLevelObp = (obp) => {
      const tlObp = topLevelObp || obpPartSafe($pkgName);
      if (!obp.includes(".")) {
        return tlObp + "." + obp;
      }
      return obp.replace(/^@top\./u, tlObp + ".");
    };
    capture = (rootObp, env, options4) => {
      if (!varsInitialized)
        initializeVars();
      rootObp = obpPartSafe(rootObp);
      const opts = defaults({}, options4 || {}, { overrideExisting: false }), captureFn = opts.overrideExisting ? set2 : defaultTo;
      if ("@top" === rootObp && !topLevelObpSet) {
        throw Error("79yZmpRt");
      }
      for (const [subObp, value] of Object.entries(env)) {
        if (!subObp)
          continue;
        const obp = [rootObp, subObp].filter((v) => "" !== v).join(".");
        captureFn(vars, resolveTopLevelObp(obp), string2(value) ? parseValue(value) : value);
      }
    };
    initializeVars = () => {
      if (varsInitialized) {
        return;
      }
      varsInitialized = true;
      if (isNode() && "env" in process && object(process.env)) {
        capture("@global", process.env);
      }
      if (isWeb() && "env" in window && object(window.env)) {
        capture("@global", window.env);
      }
      capture($pkgName, {
        APP_PKG_NAME: $pkgName,
        APP_PKG_VERSION: "1.0.1023",
        APP_BUILD_TIME_STAMP: "1741829323",
        ...define_import_meta_env_default
      });
    };
    isCI = $fn\uA4FAmemo(() => {
      return test2("CI");
    });
    isTest = $fn\uA4FAmemo(() => {
      return test2("TEST");
    });
    isC10n = $fn\uA4FAmemo({ maxSize: 6, deep: true }, (tests = {}) => {
      return test2("APP_IS_C10N", tests);
    });
    isVite = $fn\uA4FAmemo({ maxSize: 6, deep: true }, (tests = { serve: true }) => {
      return test2("APP_IS_VITE", tests);
    });
    inDebugMode = $fn\uA4FAmemo({ maxSize: 6, deep: true }, (tests = {}) => {
      return test2("APP_DEBUG", tests, { alsoTryCookie: true });
    });
    isWeb = $fn\uA4FAmemo(() => {
      return "Window" in globalThis && _function(Window) && globalThis instanceof Window || isWebViaJSDOM();
    });
    isWebViaJSDOM = $fn\uA4FAmemo(() => {
      return "Window" in globalThis && _function(Window) && "Navigator" in globalThis && _function(Navigator) && "navigator" in globalThis && navigator instanceof Navigator && navigator.userAgent.includes("jsdom/");
    });
    isSSR = $fn\uA4FAmemo(() => !isWeb());
    isNode = $fn\uA4FAmemo(() => {
      return "process" in globalThis && object(process) && object(process.versions) && "node" in process.versions;
    });
    isCFW = $fn\uA4FAmemo(() => {
      return isServiceWorker() && // `ServiceWorkerGlobalScope`.
      "Navigator" in globalThis && _function(Navigator) && "navigator" in globalThis && navigator instanceof Navigator && "Cloudflare-Workers" === navigator.userAgent;
    });
    isWorker = $fn\uA4FAmemo(() => {
      return "WorkerGlobalScope" in globalThis && _function(WorkerGlobalScope) && globalThis instanceof WorkerGlobalScope;
    });
    isDedicatedWorker = $fn\uA4FAmemo(() => {
      return "DedicatedWorkerGlobalScope" in globalThis && _function(DedicatedWorkerGlobalScope) && globalThis instanceof DedicatedWorkerGlobalScope;
    });
    isSharedWorker = $fn\uA4FAmemo(() => {
      return "SharedWorkerGlobalScope" in globalThis && _function(SharedWorkerGlobalScope) && globalThis instanceof SharedWorkerGlobalScope;
    });
    isServiceWorker = $fn\uA4FAmemo(() => {
      return "ServiceWorkerGlobalScope" in globalThis && _function(ServiceWorkerGlobalScope) && globalThis instanceof ServiceWorkerGlobalScope;
    });
    isLocal = $fn\uA4FAmemo(2, (request2) => {
      if (request2) {
        const { url: url$1 } = request2;
        return test(rootHost(url$1, { withPort: false }), localHostPatterns());
      }
      return isWeb() && test(currentRootHost({ withPort: false }), localHostPatterns());
    });
    isLocalVite = $fn\uA4FAmemo(2, (request2) => {
      return isLocal(request2) && isVite();
    });
    isLocalVitePrefresh = $fn\uA4FAmemo(2, (request2) => {
      return isLocalVite(request2) && "__PREFRESH__" in globalThis;
    });
  }
});

// node_modules/@clevercanyon/utilities/dist/error.js
var codeRegExp;
var init_error = __esm({
  "node_modules/@clevercanyon/utilities/dist/error.js"() {
    init_standalone();
    codeRegExp = $fn\uA4FAmemo(() => /^[a-z0-9]{8}$/iu);
  }
});

// node_modules/@clevercanyon/utilities/dist/is.js
var is_exports = {};
__export(is_exports, {
  array: () => array,
  arrayBuffer: () => arrayBuffer,
  asyncFunction: () => asyncFunction,
  asyncIterable: () => asyncIterable,
  bigint: () => bigint,
  blob: () => blob,
  boolean: () => boolean,
  brand: () => brand,
  buffer: () => buffer,
  dataView: () => dataView,
  date: () => date,
  deepEqual: () => deepEqual,
  element: () => element,
  empty: () => empty,
  emptyOrZero: () => emptyOrZero,
  equal: () => equal,
  error: () => error,
  errorCause: () => errorCause,
  errorCode: () => errorCode,
  event: () => event,
  finite: () => finite,
  float: () => float,
  fnArguments: () => fnArguments,
  frozen: () => frozen,
  function: () => _function,
  htmlElement: () => htmlElement,
  integer: () => integer,
  iterable: () => iterable,
  leftClickMouseEvent: () => leftClickMouseEvent,
  map: () => map,
  nan: () => nan,
  nil: () => nil,
  node: () => node,
  notEmpty: () => notEmpty,
  notEmptyOrZero: () => notEmptyOrZero,
  nul: () => nul,
  null: () => _null,
  number: () => number,
  numeric: () => numeric,
  object: () => object,
  objectOfTag: () => objectOfTag,
  objectTag: () => objectTag,
  plainObject: () => plainObject,
  primitive: () => primitive,
  profile: () => profile,
  promise: () => promise2,
  proto: () => proto,
  protoPollutionKey: () => protoPollutionKey,
  readableStream: () => readableStream,
  regExp: () => regExp,
  request: () => request,
  response: () => response,
  safeArrayKey: () => safeArrayKey,
  safeInteger: () => safeInteger,
  safeObjectKey: () => safeObjectKey,
  safeObjectPath: () => safeObjectPath,
  sealed: () => sealed,
  set: () => set,
  string: () => string2,
  structuredCloneable: () => structuredCloneable,
  symbol: () => symbol,
  time: () => time,
  typedArray: () => typedArray,
  undefined: () => _undefined,
  url: () => url2,
  vNode: () => vNode
});
import { isValidElement } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
var structuredCloneableObjectTags, numericIntegerRegExp, numericFloatRegExp, nan, nul, nil, _null, _undefined, empty, notEmpty, emptyOrZero, notEmptyOrZero, primitive, boolean, number, bigint, integer, float, finite, numeric, string2, symbol, proto, object, plainObject, _function, asyncFunction, fnArguments, promise2, set, map, arrayBuffer, array, typedArray, dataView, buffer, blob, readableStream, error, errorCode, errorCause, request, response, brand, profile, time, date, url2, regExp, node, vNode, element, htmlElement, event, leftClickMouseEvent, objectTag, objectOfTag, frozen, sealed, iterable, asyncIterable, safeInteger, safeArrayKey, safeObjectKey, safeObjectPath, protoPollutionKey, equal, deepEqual, structuredCloneable;
var init_is = __esm({
  "node_modules/@clevercanyon/utilities/dist/is.js"() {
    init_standalone();
    init_obj();
    init_env();
    init_error();
    init_app();
    numericIntegerRegExp = /^(?:0|-?[1-9][0-9]*)$/u;
    numericFloatRegExp = /^(?:0|-?[1-9][0-9]*)?\.[0-9]+$/u;
    nan = (value) => {
      return Number.isNaN(value);
    };
    nul = (value) => {
      return null === value || void 0 === value;
    };
    nil = (value) => {
      return null === value || void 0 === value || nan(value);
    };
    _null = (value) => {
      return null === value;
    };
    _undefined = (value) => {
      return void 0 === value;
    };
    empty = (value) => {
      if (!value)
        return true;
      if (!object(value)) {
        return !value;
      }
      if (set(value) || map(value)) {
        return 0 === value.size;
      }
      if (arrayBuffer(value)) {
        return 0 === value.byteLength;
      }
      if (array(value) || typedArray(value) || buffer(value)) {
        return 0 === value.length;
      }
      if (iterable(value)) {
        for (const unused\uA4FA of value)
          return false;
        return true;
      }
      if (asyncIterable(value)) {
        return false;
      }
      return 0 === keysAndSymbols(value).length;
    };
    notEmpty = (value) => {
      return !empty(value);
    };
    emptyOrZero = (value) => {
      return "0" === value || empty(value);
    };
    notEmptyOrZero = (value) => {
      return !emptyOrZero(value);
    };
    primitive = (value) => {
      return !object(value);
    };
    boolean = (value) => {
      return "boolean" === typeof value;
    };
    number = (value) => {
      return "number" === typeof value && !nan(value);
    };
    bigint = (value) => {
      return "bigint" === typeof value;
    };
    integer = (value) => {
      return Number.isInteger(value);
    };
    float = (value) => {
      return finite(value) && value % 1 !== 0;
    };
    finite = (value) => {
      return Number.isFinite(value);
    };
    numeric = (value, type) => {
      switch (type) {
        case "integer":
        case "negativeInteger":
        case "positiveInteger": {
          const is = integer(value) || string2(value) && numericIntegerRegExp.test(value) && integer(Number(value));
          if (is && "negativeInteger" === type)
            return Number(value) < 0;
          if (is && "positiveInteger" === type)
            return Number(value) > 0;
          return is;
        }
        case "safeInteger":
          return safeInteger(value) || string2(value) && numericIntegerRegExp.test(value) && safeInteger(Number(value));
        case "safeArrayKey":
          return safeArrayKey(value) || string2(value) && numericIntegerRegExp.test(value) && safeArrayKey(Number(value));
        case "float":
          return float(value) || string2(value) && numericFloatRegExp.test(value) && number(Number(value));
      }
      return number(value) || string2(value) && (numericIntegerRegExp.test(value) || numericFloatRegExp.test(value)) && number(Number(value));
    };
    string2 = (value) => {
      return "string" === typeof value;
    };
    symbol = (value) => {
      return "symbol" === typeof value;
    };
    proto = $is\uA4FAproto;
    object = $is\uA4FAobject;
    plainObject = (value) => {
      return object(value) && objectTag(value, "Object");
    };
    _function = $is\uA4FAfunction;
    asyncFunction = $is\uA4FAasyncFunction;
    fnArguments = (value) => {
      return object(value) && objectTag(value, "Arguments");
    };
    promise2 = (value) => {
      return value instanceof Promise;
    };
    set = (value) => {
      return value instanceof Set;
    };
    map = (value) => {
      return value instanceof Map;
    };
    arrayBuffer = (value) => {
      return value instanceof ArrayBuffer;
    };
    array = $is\uA4FAarray;
    typedArray = (value) => {
      return ArrayBuffer.isView(value) && !dataView(value);
    };
    dataView = (value) => {
      return value instanceof DataView;
    };
    buffer = (value) => {
      return isNode() && Buffer.isBuffer(value);
    };
    blob = (value) => {
      return value instanceof Blob;
    };
    readableStream = (value) => {
      return value instanceof ReadableStream;
    };
    error = (value) => {
      return value instanceof Error;
    };
    errorCode = (value) => {
      return error(value) && codeRegExp().test(value.message);
    };
    errorCause = (value, options4) => {
      switch (options4?.type) {
        case "error": {
          return error(value);
        }
        case "string": {
          return string2(value);
        }
        case "object": {
          return object(value) && string2(value.code) && (nul(value.meta) || object(value.meta));
        }
        default: {
          return error(value) || string2(value) || object(value) && string2(value.code) && (nul(value.meta) || object(value.meta));
        }
      }
    };
    request = (value) => {
      return value instanceof Request;
    };
    response = (value) => {
      return value instanceof Response;
    };
    brand = (value) => {
      return object(value) && objectOfTag(value, $pkgName + "/Brand");
    };
    profile = (value) => {
      return object(value) && objectOfTag(value, $pkgName + "/Profile");
    };
    time = (value) => {
      return object(value) && objectOfTag(value, $pkgName + "/Time");
    };
    date = (value) => {
      return value instanceof Date;
    };
    url2 = (value) => {
      return value instanceof URL;
    };
    regExp = (value) => {
      return value instanceof RegExp;
    };
    node = (value) => {
      return isWeb() && value instanceof Node;
    };
    vNode = (value) => {
      return isValidElement(value) && plainObject(value) && Object.hasOwn(value, "type") && plainObject(value.props) && Object.hasOwn(
        value,
        "__e"
        /* `__e` = `_dom` */
      );
    };
    element = (value) => {
      return isWeb() && value instanceof Element;
    };
    htmlElement = (value) => {
      return isWeb() && value instanceof HTMLElement;
    };
    event = (value) => {
      return isWeb() && value instanceof Event;
    };
    leftClickMouseEvent = (value) => {
      return isWeb() && //
      value instanceof MouseEvent && "click" === value.type && !value.ctrlKey && !value.metaKey && !value.altKey && !value.shiftKey && 0 === (value.button || 0);
    };
    objectTag = $is\uA4FAobjectTag;
    objectOfTag = $is\uA4FAobjectOfTag;
    frozen = (value) => {
      return object(value) && Object.isFrozen(value);
    };
    sealed = (value) => {
      return object(value) && Object.isSealed(value);
    };
    iterable = (value) => {
      return Symbol.iterator in Object(value);
    };
    asyncIterable = (value) => {
      return Symbol.asyncIterator in Object(value);
    };
    safeInteger = (value) => {
      return Number.isSafeInteger(value);
    };
    safeArrayKey = (value) => {
      return Number.isSafeInteger(value) && value >= 0;
    };
    safeObjectKey = (value) => {
      return string2(value) || safeArrayKey(value) || symbol(value);
    };
    safeObjectPath = (value) => {
      return string2(value) || safeArrayKey(value);
    };
    protoPollutionKey = (key) => {
      return string2(key) && ["__proto__", "prototype", "constructor"].includes(key.toLowerCase());
    };
    equal = $is\uA4FAequal;
    deepEqual = $is\uA4FAdeepEqual;
    structuredCloneable = (value) => {
      if (!structuredCloneableObjectTags) {
        structuredCloneableObjectTags = [
          // See: <https://o5p.me/ZzJtat>.
          "Array",
          "ArrayBuffer",
          "Boolean",
          "DataView",
          "Date",
          "Error",
          "EvalError",
          "RangeError",
          "ReferenceError",
          "SyntaxError",
          "TypeError",
          "URIError",
          "AggregateError",
          "Map",
          "Object",
          "RegExp",
          "Set",
          "String",
          "Int8Array",
          "Uint8Array",
          "Uint8ClampedArray",
          "Int16Array",
          "Uint16Array",
          "Int32Array",
          "Uint32Array",
          "Float32Array",
          "Float64Array",
          "BigInt64Array",
          "BigUint64Array",
          ...isWeb() ? [
            "AudioData",
            "Blob",
            "CropTarget",
            "CryptoKey",
            "DOMException",
            "DOMMatrix",
            "DOMMatrixReadOnly",
            "DOMPoint",
            "DOMPointReadOnly",
            "DOMQuad",
            "DOMRect",
            "DOMRectReadOnly",
            "File",
            "FileList",
            "FileSystemDirectoryHandle",
            "FileSystemFileHandle",
            "FileSystemHandle",
            "GPUCompilationInfo",
            "GPUCompilationMessage",
            "ImageBitmap",
            "ImageData",
            "RTCCertificate",
            "VideoFrame"
          ] : []
        ];
      }
      return primitive(value) && !symbol(value) || structuredCloneableObjectTags.includes(tag(value));
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/resources/classes/base.js
var Base, getClass;
var init_base = __esm({
  "node_modules/@clevercanyon/utilities/dist/resources/classes/base.js"() {
    init_app();
    init_standalone();
    init_obj();
    init_symbol();
    init_is();
    getClass = () => {
      if (Base)
        return Base;
      Base = class {
        /**
         * App package name.
         */
        static appPkgName = $pkgName;
        /**
         * Object constructor.
         */
        constructor() {
        }
        /**
         * {@see $obj.tag()} helper.
         *
         * @returns Object tag (aka: class name).
         */
        get [$symbol\uA4FAobjTag]() {
          const c9r$1 = c9r(this);
          return (c9r$1.appPkgName || "?") + "/" + (c9r$1.name || "?");
        }
        /**
         * {@see $obj.tag()} helper.
         *
         * @returns Object tag (aka: class name).
         */
        get [$symbol\uA4FAobjStringTag]() {
          const c9r$1 = c9r(this);
          return (c9r$1.appPkgName || "?") + "/" + (c9r$1.name || "?");
        }
        /**
         * {@see $obj.clone()}, {@see $obj.cloneDeep()} helper.
         *
         * @returns True if object clones should be frozen.
         */
        get [objFreezeClones]() {
          return false;
        }
        /**
         * {@see $obj.clone()}, {@see $obj.cloneDeep()} helper.
         *
         * @returns True if object clones should be frozen deeply.
         */
        get [objDeepFreezeClones]() {
          return false;
        }
        /**
         * {@see $to.plainObject()} helper.
         *
         * @returns Object to derive a plain object from.
         */
        [objToPlain]() {
          return this;
        }
        /**
         * {@see $is.deepEqual()} helper.
         *
         * @returns Object to derive an equals check from.
         */
        [$symbol\uA4FAobjToEquals]() {
          return this;
        }
        /**
         * {@see $json.stringify()} helper.
         *
         * @returns What value to derive a JSON value from.
         */
        [objToJSON]() {
          return this;
        }
        /**
         * {@see $obj.clone()}, {@see $obj.cloneDeep()} helper.
         *
         * @param   data Containing `{deep, opts, circular, inDeep}`.
         *
         * @returns      A shallow or deep clone of this object.
         */
        [objToClone]({ deep, opts, circular }) {
          const c9r$1 = c9r(this);
          if (deep) {
            if (circular.has(this)) {
              return circular.get(this);
            }
            const deepClone = new c9r$1(this);
            circular.set(this, deepClone);
            if (!frozen(deepClone)) {
              for (const key of keysAndSymbols(deepClone)) {
                if (Object.getOwnPropertyDescriptor(deepClone, key)?.writable) {
                  deepClone[key] = cloneDeep(deepClone[key], opts, circular, true);
                }
              }
              if (deepClone[objDeepFreezeClones]) {
                deepFreeze(deepClone);
              } else if (deepClone[objFreezeClones]) {
                freeze(deepClone);
              }
            }
            return deepClone;
          } else {
            const clone2 = new c9r$1(this);
            if (!frozen(clone2)) {
              if (clone2[objDeepFreezeClones]) {
                deepFreeze(clone2);
              } else if (clone2[objFreezeClones]) {
                freeze(clone2);
              }
            }
            return clone2;
          }
        }
      };
      return Object.defineProperty(Base, "name", {
        ...Object.getOwnPropertyDescriptor(Base, "name"),
        value: "Base"
      });
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/resources/classes/utility.js
var Utility, getClass2;
var init_utility = __esm({
  "node_modules/@clevercanyon/utilities/dist/resources/classes/utility.js"() {
    init_base();
    init_app();
    getClass2 = () => {
      if (Utility)
        return Utility;
      Utility = class extends getClass() {
        /**
         * App package name.
         */
        static appPkgName = $pkgName;
        /**
         * Object constructor.
         */
        constructor() {
          super();
        }
      };
      return Object.defineProperty(Utility, "name", {
        ...Object.getOwnPropertyDescriptor(Utility, "name"),
        value: "Utility"
      });
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/resources/classes/obj-mc.js
var ObjMC, getClass3;
var init_obj_mc = __esm({
  "node_modules/@clevercanyon/utilities/dist/resources/classes/obj-mc.js"() {
    init_utility();
    init_is();
    init_obj();
    init_obp();
    init_to();
    getClass3 = () => {
      if (ObjMC)
        return ObjMC;
      ObjMC = class extends getClass2() {
        /**
         * Public API. ---
         */
        allowOps;
        /**
         * Defines merge kinds.
         */
        kinds;
        /**
         * Declares merge handlers.
         */
        mergeDeep;
        mergeClonesDeep;
        patchDeep;
        patchClonesDeep;
        updateDeep;
        updateClonesDeep;
        /**
         * Object constructor.
         *
         * @param props Props or instance.
         */
        constructor(props) {
          super();
          props = props || {};
          this.allowOps = boolean(props.allowOps) ? props.allowOps : true;
          this.kinds = {
            MERGE_DEEP: "mergeDeep",
            MERGE_CLONES_DEEP: "mergeClonesDeep",
            PATCH_DEEP: "patchDeep",
            PATCH_CLONES_DEEP: "patchClonesDeep",
            UPDATE_DEEP: "updateDeep",
            UPDATE_CLONES_DEEP: "updateClonesDeep"
          };
          this.mergeDeep = this.prepareMergeHandler(this.kinds.MERGE_DEEP);
          this.mergeClonesDeep = this.prepareMergeHandler(this.kinds.MERGE_CLONES_DEEP);
          this.patchDeep = this.prepareMergeHandler(this.kinds.PATCH_DEEP);
          this.patchClonesDeep = this.prepareMergeHandler(this.kinds.PATCH_CLONES_DEEP);
          this.updateDeep = this.prepareMergeHandler(this.kinds.UPDATE_DEEP);
          this.updateClonesDeep = this.prepareMergeHandler(this.kinds.UPDATE_CLONES_DEEP);
          for (const key of ["kinds", "mergeDeep", "mergeClonesDeep", "patchDeep", "patchClonesDeep", "updateDeep", "updateClonesDeep"]) {
            Object.defineProperty(this, key, { ...Object.getOwnPropertyDescriptor(this, key), enumerable: false });
          }
        }
        /**
         * Creates a new instance.
         *
         * @param   props Props.
         *
         * @returns       New class instance.
         */
        newInstance(props) {
          return new ObjMC(props);
        }
        /**
         * Adds a custom merge callback.
         *
         * @param   tagA     Object tag A.
         * @param   tagB     Object tag B.
         * @param   callback Merge callback.
         *
         * @returns          Previous merge callback.
         */
        addMerge(tagA, tagB, callback) {
          if (!tagA || !string2(tagA)) {
            throw Error("ZJuUzhPy");
          }
          if (!tagB || !string2(tagB)) {
            throw Error("yJbDxHjv");
          }
          if (!_function(callback)) {
            throw Error("J5EfwQxV");
          }
          const previousCallback = this[`merge${tagA}${tagB}`];
          this[`merge${tagA}${tagB}`] = callback;
          return previousCallback;
        }
        /**
         * Adds a custom declarative operation.
         *
         * @param   name     Operation `$name`, `$ꓺname`.
         * @param   callback Operation callback.
         *
         * @returns          Previous operation callback.
         */
        addOperation(name, callback) {
          if (!name || !string2(name)) {
            throw Error("QbhAHTVk");
          }
          if (!_function(callback)) {
            throw Error("aFZZdR4u");
          }
          if (!name.startsWith("$")) {
            name = "$" + name;
          }
          const previousCallback = this[`operation${name}`];
          this[`operation${name}`] = callback;
          return previousCallback;
        }
        /**
         * Protected API. ---
         */
        /**
         * Prepares a merge handler.
         *
         * @param   kind Kind of merge.
         *
         * @returns      Merge handler function.
         */
        prepareMergeHandler(kind) {
          const isCircularMapSymbol = Symbol(kind + ":isCircularMap"), isNewFromUndefinedSymbol = Symbol(kind + ":isNewFromUndefined");
          return function(...args) {
            let circular;
            const lastArg = args.at(-1);
            if (map(lastArg) && Object.hasOwn(lastArg, isCircularMapSymbol)) {
              circular = args.pop();
            } else {
              circular = /* @__PURE__ */ new Map();
              circular[isCircularMapSymbol] = true;
              circular.isNewFromUndefinedSymbol = isNewFromUndefinedSymbol;
            }
            return args.reduce((a, b) => {
              if (circular.has(a)) {
                if (circular.get(a)?.has(b)) {
                  return circular.get(a)?.get(b);
                }
              } else {
                circular.set(a, /* @__PURE__ */ new Map());
              }
              const tagA = tag(a), tagB = tag(b);
              for (const mergeCallback of [
                `merge${tagA}${tagB}`,
                //
                `merge${tagA}Any`,
                `mergeAny${tagB}`,
                `mergeAnyAny`
              ]) {
                if (_function(this[mergeCallback])) {
                  return this[mergeCallback](a, b, kind, circular);
                }
              }
              throw Error("QCDcJQwc");
            });
          };
        }
        /**
         * Checks if a declarative operation exists.
         *
         * @param   name Operation `$name`, `$ꓺname` to consider.
         *
         * @returns      True if a declarative operation callback exists for `name`.
         */
        isOperation(name) {
          return `operation${name}` in this && _function(this[`operation${name}`]);
        }
        /**
         * Performs a declarative operation.
         *
         * @param   target Target to operate on.
         * @param   name   Operation `$name`, `$ꓺname`.
         * @param   params Parameters to operation callback.
         *
         * @returns        True if changes occur in operation callback.
         */
        performOperation(target, name, params) {
          if (this.isOperation(name)) {
            return this[`operation${name}`](target, params);
          }
          return false;
        }
        /**
         * Extracts declarative operations.
         *
         * @param   value Mutated by reference.
         *
         * @returns       Object with declarative operations.
         */
        extractOperations(value) {
          const operations = {};
          if (!object(value) || array(value)) {
            return operations;
          }
          for (const key of Array.from(Object.keys(value))) {
            if (this.isOperation(key)) {
              operations[key] = value[key];
              delete value[key];
            }
          }
          return operations;
        }
        /**
         * Merges Array with Array.
         *
         * @param   a        Array A.
         * @param   b        Array B.
         * @param   kind     Merge kind.
         * @param   circular Circular map.
         *
         * @returns          Merged array.
         */
        mergeArrayArray(a, b, kind, circular) {
          const { isNewFromUndefinedSymbol } = circular;
          const aIsNewFromUndefined = Object.hasOwn(a, isNewFromUndefinedSymbol), bIsNewFromUndefined = Object.hasOwn(b, isNewFromUndefinedSymbol);
          if (aIsNewFromUndefined)
            delete a[isNewFromUndefinedSymbol];
          if (bIsNewFromUndefined)
            delete b[isNewFromUndefinedSymbol];
          if ([this.kinds.PATCH_DEEP, this.kinds.PATCH_CLONES_DEEP].includes(kind)) {
            circular.get(aIsNewFromUndefined ? void 0 : a)?.set(bIsNewFromUndefined ? void 0 : b, a);
            a.splice(0, a.length);
            for (let key = 0; key < b.length; key++) {
              a[key] = this[kind](void 0, b[key], circular);
            }
            return a;
          } else if ([this.kinds.UPDATE_DEEP, this.kinds.UPDATE_CLONES_DEEP].includes(kind) && deepEqual(a, b)) {
            circular.get(aIsNewFromUndefined ? void 0 : a)?.set(bIsNewFromUndefined ? void 0 : b, a);
            return a;
          } else {
            const bClone = bIsNewFromUndefined ? b : [];
            circular.get(aIsNewFromUndefined ? void 0 : a)?.set(bIsNewFromUndefined ? void 0 : b, bClone);
            for (let key = 0; key < b.length; key++) {
              bClone[key] = this[kind](void 0, b[key], circular);
            }
            return bClone;
          }
        }
        /**
         * Merges Object with Object.
         *
         * @param   a        Object A.
         * @param   b        Object B.
         * @param   kind     Merge kind.
         * @param   circular Circular map.
         *
         * @returns          Merged object.
         */
        mergeObjectObject(a, b, kind, circular) {
          const { isNewFromUndefinedSymbol } = circular;
          const aIsNewFromUndefined = Object.hasOwn(a, isNewFromUndefinedSymbol), bIsNewFromUndefined = Object.hasOwn(b, isNewFromUndefinedSymbol);
          if (aIsNewFromUndefined)
            delete a[isNewFromUndefinedSymbol];
          if (bIsNewFromUndefined)
            delete b[isNewFromUndefinedSymbol];
          const aKeys = keysAndSymbols(a), bKeys = new Set(keysAndSymbols(b));
          let newObj = [this.kinds.PATCH_DEEP, this.kinds.PATCH_CLONES_DEEP].includes(kind) ? a : aIsNewFromUndefined ? a : {};
          circular.get(aIsNewFromUndefined ? void 0 : a)?.set(bIsNewFromUndefined ? void 0 : b, newObj);
          let keyResult;
          const operations = [];
          let hasUpdates = ![this.kinds.UPDATE_DEEP, this.kinds.UPDATE_CLONES_DEEP].includes(kind);
          for (const key of aKeys) {
            if (bKeys.has(key)) {
              keyResult = this[kind](a[key], b[key], circular);
              bKeys.delete(key);
            } else {
              keyResult = this[kind](a[key], void 0, circular);
            }
            hasUpdates = hasUpdates || keyResult !== a[key];
            newObj[key] = keyResult;
          }
          for (const key of bKeys) {
            if (string2(key) && this.isOperation(key)) {
              operations.push([key, b[key]]);
            } else {
              keyResult = this[kind](void 0, b[key], circular);
              hasUpdates = hasUpdates || keyResult !== a[key];
              newObj[key] = keyResult;
            }
          }
          if (this.allowOps && operations.length) {
            if ([this.kinds.UPDATE_DEEP, this.kinds.UPDATE_CLONES_DEEP].includes(kind)) {
              newObj = cloneDeep(newObj);
              hasUpdates = true;
            }
            for (const [operation, params] of operations) {
              hasUpdates = this.performOperation(newObj, operation, params) || hasUpdates;
            }
          }
          if ([this.kinds.PATCH_DEEP, this.kinds.PATCH_CLONES_DEEP].includes(kind)) {
            return a;
          }
          if ([this.kinds.UPDATE_DEEP, this.kinds.UPDATE_CLONES_DEEP].includes(kind) && !hasUpdates) {
            return a;
          }
          return newObj;
        }
        /**
         * Merges Undefined with Array.
         *
         * @param   a        Undefined.
         * @param   b        Array B.
         * @param   kind     Merge kind.
         * @param   circular Circular map.
         *
         * @returns          Merged array.
         *
         * @note For merges, this ultimately uses {@see mergeArrayArray()} for processing.
         */
        mergeUndefinedArray(a, b, kind, circular) {
          const newAFromUndefined = [];
          newAFromUndefined[circular.isNewFromUndefinedSymbol] = true;
          return this[kind](newAFromUndefined, b, circular);
        }
        /**
         * Merges Array with Undefined.
         *
         * @param   a        Array A.
         * @param   b        Undefined.
         * @param   kind     Merge kind.
         * @param   circular Circular map.
         *
         * @returns          Merged array.
         *
         * @note For merges, this ultimately uses {@see mergeArrayArray()} for processing.
         */
        mergeArrayUndefined(a, b, kind, circular) {
          const newBFromUndefined = [...a];
          newBFromUndefined[circular.isNewFromUndefinedSymbol] = true;
          return this[kind](a, newBFromUndefined, circular);
        }
        /**
         * Merges Undefined with Object.
         *
         * @param   a        Undefined.
         * @param   b        Object B.
         * @param   kind     Merge kind.
         * @param   circular Circular map.
         *
         * @returns          Merged object.
         *
         * @note This ultimately uses {@see mergeObjectObject()} for processing.
         */
        mergeUndefinedObject(a, b, kind, circular) {
          const newAFromUndefined = {};
          newAFromUndefined[circular.isNewFromUndefinedSymbol] = true;
          return this[kind](newAFromUndefined, b, circular);
        }
        /**
         * Merges Object with Undefined.
         *
         * @param   a        Object A.
         * @param   b        Undefined.
         * @param   kind     Merge kind.
         * @param   circular Circular map.
         *
         * @returns          Merged object.
         *
         * @note This ultimately uses {@see mergeObjectObject()} for processing.
         */
        mergeObjectUndefined(a, b, kind, circular) {
          const newBFromUndefined = {};
          newBFromUndefined[circular.isNewFromUndefinedSymbol] = true;
          return this[kind](a, newBFromUndefined, circular);
        }
        /**
         * Merges Any with Any.
         *
         * @param   a        Unknown A.
         * @param   b        Unknown B.
         * @param   kind     Merge kind.
         * @param   circular Circular map.
         *
         * @returns          Merged object.
         */
        mergeAnyAny(a, b, kind, circular) {
          const bElseA = void 0 !== b ? b : a;
          if (!object(bElseA)) {
            circular.get(a)?.set(b, bElseA);
            return bElseA;
          }
          if (void 0 !== b && _function(this["mergeUndefined" + tag(b)])) {
            return this[kind](void 0, b, circular);
          }
          if ([this.kinds.UPDATE_DEEP, this.kinds.UPDATE_CLONES_DEEP].includes(kind) && (void 0 === b || deepEqual(a, b))) {
            circular.get(a)?.set(b, a);
            return a;
          } else if ([this.kinds.MERGE_CLONES_DEEP, this.kinds.PATCH_CLONES_DEEP, this.kinds.UPDATE_DEEP, this.kinds.UPDATE_CLONES_DEEP].includes(kind)) {
            const bElseAClone = cloneDeep(bElseA);
            circular.get(a)?.set(b, bElseAClone);
            return bElseAClone;
          } else {
            circular.get(a)?.set(b, bElseA);
            return bElseA;
          }
        }
        /**
         * Performs declarative operation: `$set`, `$ꓺset`.
         *
         * @param   target    Target to operate on.
         * @param   params    Parameters to operation callback.
         * @param   separator Depending on `$name`, `$ꓺname`. Default is `.`.
         * @param   calledAs  Internal use only. Do not pass.
         *
         * @returns           True if changes occur in operation callback.
         *
         * @note Object paths do not support symbol keys whatsoever.
         * @note This can set own or inherited, enumerable or not, object paths.
         */
        operation$set(target, params, separator = ".", unused\uA4FAcalledAs = "$set") {
          if (!object(target)) {
            throw Error("fB9tK7yq");
          }
          if (!object(params) || array(params)) {
            throw Error("xqsb9A6k");
          }
          for (const [path15, value] of Object.entries(params)) {
            set2(target, path15, value, separator);
          }
          return Object.keys(params).length > 0;
        }
        "operation$\uA4FAset"(target, params, separator = "\uA4FA") {
          return this.operation$set(target, params, separator, "$\uA4FAset");
        }
        /**
         * Performs declarative operation: `$unset`, `$ꓺunset`.
         *
         * - Aka: `$omit`, `$ꓺomit`.
         *
         * @param   target    Target to operate on.
         * @param   params    Parameters to operation callback.
         * @param   separator Depending on `$name`, `$ꓺname`. Default is `.`.
         * @param   calledAs  Internal use only. Do not pass.
         *
         * @returns           True if changes occur in operation callback.
         *
         * @note Object paths do not support symbol keys whatsoever.
         * @note This can unset own or inherited, enumerable or not, object paths.
         * @note However, the use of `*` only unsets array keys and/or end-own enumerable string keys.
         */
        operation$unset(target, params, separator = ".", unused\uA4FAcalledAs = "$unset") {
          if (!object(target)) {
            throw Error("Pzs7dSCe");
          }
          if (!array(params)) {
            throw Error("MqqWJEg4");
          }
          for (const path15 of params) {
            if (!safeObjectPath(path15)) {
              throw Error("XrpZw3vN");
            }
            unset(target, path15, separator);
          }
          return params.length > 0;
        }
        "operation$\uA4FAunset"(target, params, separator = "\uA4FA") {
          return this.operation$unset(target, params, separator, "$\uA4FAunset");
        }
        operation$omit(target, params, separator = ".") {
          return this.operation$unset(target, params, separator, "$omit");
        }
        "operation$\uA4FAomit"(target, params, separator = "\uA4FA") {
          return this.operation$unset(target, params, separator, "$\uA4FAomit");
        }
        /**
         * Performs declarative operation: `$leave`, `$ꓺleave`.
         *
         * - Aka: `$pick`, `$ꓺpick`.
         *
         * @param   target    Target to operate on.
         * @param   params    Parameters to operation callback.
         * @param   separator Depending on `$name`, `$ꓺname`. Default is `.`.
         * @param   calledAs  Internal use only. Do not pass.
         *
         * @returns           True if changes occur in operation callback.
         *
         * @note Object paths do not support symbol keys whatsoever.
         * @note You can target (i.e., leave) own or inherited, enumerable or not, object paths; unsetting all others.
         *       However, when unsetting all others, this only unsets array keys and/or end-own enumerable string keys.
         *       i.e., It doesn’t unset (get rid of) end-inherited keys, non-enumerable keys, or symbol keys.
         */
        operation$leave(target, params, separator = ".", unused\uA4FAcalledAs = "$leave") {
          if (!object(target)) {
            throw Error("SXGAEVtz");
          }
          if (!array(params)) {
            throw Error("eKB5Sd2j");
          }
          leave(target, params, separator);
          return params.length > 0;
        }
        "operation$\uA4FAleave"(target, params, separator = "\uA4FA") {
          return this.operation$leave(target, params, separator, "$\uA4FAleave");
        }
        operation$pick(target, params, separator = ".") {
          return this.operation$leave(target, params, separator, "$pick");
        }
        "operation$\uA4FApick"(target, params, separator = "\uA4FA") {
          return this.operation$leave(target, params, separator, "$\uA4FApick");
        }
        /**
         * Performs declarative operation: `$push`, `$ꓺpush`.
         *
         * @param   target    Target to operate on.
         * @param   params    Parameters to operation callback.
         * @param   separator Depending on `$name`, `$ꓺname`. Default is `.`.
         * @param   calledAs  Internal use only. Do not pass.
         *
         * @returns           True if changes occur in operation callback.
         *
         * @note Object paths do not support symbol keys whatsoever.
         * @note This can push onto own or inherited, enumerable or not, object paths.
         */
        operation$push(target, params, separator = ".", unused\uA4FAcalledAs = "$push") {
          if (!object(target)) {
            throw Error("Hw4pmuqg");
          }
          if (!object(params) || array(params)) {
            throw Error("4HrEp58g");
          }
          for (const [path15, value] of Object.entries(params)) {
            const array$1 = get(target, path15, [], separator);
            if (!array(array$1)) {
              throw Error("RFM5u7wc");
            }
            array$1.push(value);
            set2(target, path15, array$1, separator);
          }
          return Object.keys(params).length > 0;
        }
        "operation$\uA4FApush"(target, params, separator = "\uA4FA") {
          return this.operation$push(target, params, separator, "$\uA4FApush");
        }
        /**
         * Performs declarative operation: `$pull`, `$ꓺpull`.
         *
         * @param   target    Target to operate on.
         * @param   params    Parameters to operation callback.
         * @param   separator Depending on `$name`, `$ꓺname`. Default is `.`.
         * @param   calledAs  Internal use only. Do not pass.
         *
         * @returns           True if changes occur in operation callback.
         *
         * @note Object paths do not support symbol keys whatsoever.
         * @note This can pull from own or inherited, enumerable or not, object paths.
         */
        operation$pull(target, params, separator = ".", unused\uA4FAcalledAs = "$pull") {
          if (!object(target)) {
            throw Error("MQUS9pSr");
          }
          if (!object(params) || array(params)) {
            throw Error("CbsBX2Hd");
          }
          for (const [path15, value] of Object.entries(params)) {
            const array$1 = get(target, path15, [], separator);
            const pullValues = array(value) ? value : [value];
            if (!array(array$1)) {
              throw Error("Q8HSnJMQ");
            }
            for (let key = array$1.length - 1; key >= 0; key--) {
              if (pullValues.includes(array$1[key])) {
                array$1.splice(key, 1);
                break;
              }
            }
          }
          return Object.keys(params).length > 0;
        }
        "operation$\uA4FApull"(target, params, separator = "\uA4FA") {
          return this.operation$pull(target, params, separator, "$\uA4FApull");
        }
        /**
         * Performs declarative operation: `$concat`, `$ꓺconcat`.
         *
         * @param   target    Target to operate on.
         * @param   params    Parameters to operation callback.
         * @param   separator Depending on `$name`, `$ꓺname`. Default is `.`.
         * @param   calledAs  Internal use only. Do not pass.
         *
         * @returns           True if changes occur in operation callback.
         *
         * @note Object paths do not support symbol keys whatsoever.
         * @note This can concat onto own or inherited, enumerable or not, object paths.
         */
        operation$concat(target, params, separator = ".", unused\uA4FAcalledAs = "$concat") {
          if (!object(target)) {
            throw Error("MV5efAbR");
          }
          if (!object(params) || array(params)) {
            throw Error("ewMCyu5a");
          }
          for (const [path15, value] of Object.entries(params)) {
            const array$1 = get(target, path15, [], separator);
            if (!array(array$1)) {
              throw Error("kbfS6kg8");
            }
            set2(target, path15, array$1.concat(value), separator);
          }
          return Object.keys(params).length > 0;
        }
        "operation$\uA4FAconcat"(target, params, separator = "\uA4FA") {
          return this.operation$concat(target, params, separator, "$\uA4FAconcat");
        }
        /**
         * Performs declarative operation: `$default`, `$ꓺdefault`.
         *
         * - Aka: `$defaults`, `$ꓺdefaults`.
         *
         * @param   target    Target to operate on.
         * @param   params    Parameters to operation callback.
         * @param   separator Depending on `$name`, `$ꓺname`. Default is `.`.
         * @param   calledAs  Internal use only. Do not pass.
         *
         * @returns           True if changes occur in operation callback.
         *
         * @note Object paths do not support symbol keys whatsoever.
         * @note This can set own or inherited, enumerable or not, object paths.
         */
        operation$default(target, params, separator = ".", unused\uA4FAcalledAs = "$default") {
          if (!object(target)) {
            throw Error("38R9WUCZ");
          }
          if (!object(params) || array(params)) {
            throw Error("QVmxttTf");
          }
          for (const [path15, value] of Object.entries(params)) {
            defaultTo(target, path15, value, separator);
          }
          return Object.keys(params).length > 0;
        }
        "operation$\uA4FAdefault"(target, params, separator = "\uA4FA") {
          return this.operation$default(target, params, separator, "$\uA4FAdefault");
        }
        operation$defaults(target, params, separator = ".") {
          return this.operation$default(target, params, separator, "$defaults");
        }
        "operation$\uA4FAdefaults"(target, params, separator = "\uA4FA") {
          return this.operation$default(target, params, separator, "$\uA4FAdefaults");
        }
        /**
         * Performs declarative operation: `$keySortOrder`, `$ꓺkeySortOrder`.
         *
         * - Aka: `$propSortOrder`, `$ꓺpropSortOrder`.
         *
         * Sorts own or inherited, enumerable or not, non-numeric string keys.
         *
         * The final ordering of a sorted object is as follows.
         *
         * First, in this order:
         *
         * - Numeric keys are always first in ascending order. There’s no way to sort these within an object.
         * - Inherited and non-enumerable string keys that were not targeted by `params`, in their existing and unmodified
         *   insertion order. The only way to sort these is to explicitly target them using `params`, which effectively
         *   changes them into own and enumerable properties, so please consider that before targeting with `params`.
         *
         * Next, in the sort order given:
         *
         * - Sorted: own or inherited, enumerable or not, non-numeric string keys in `params` order given.
         *
         * Last, in this order:
         *
         * - Unsorted own enumerable string keys. Aside from being repositioned after those explicity targeted by
         *   `params`, their deeper ordering is preserved; i.e., as original and unmodified insertion order.
         * - Symbol keys in their existing and unmodified insertion order. There’s no way to sort these using object
         *   paths, which do not support symbols. Even if they did, symbol keys are always last in any object type.
         *
         * @param   target    Target to operate on.
         * @param   params    Parameters to operation callback.
         * @param   separator Depending on `$name`, `$ꓺname`. Default is `.`.
         * @param   calledAs  Internal use only. Do not pass.
         *
         * @returns           True if changes occur in operation callback.
         *
         * @note Object paths do not support symbol keys whatsoever.
         * @note Sorted key order matches that of `{ ...spread }` and {@see Object.keys()}.
         */
        operation$keySortOrder(target, params, separator = ".", unused\uA4FAcalledAs = "$keySortOrder") {
          if (!object(target)) {
            throw Error("turQAUfc");
          }
          if (!array(params)) {
            throw Error("mQyvX5dJ");
          }
          const unsortedTargetPaths = (
            //
            new Set(Object.keys(flatObject(target, separator)))
          );
          const targetClone = clone(target);
          unset(target, "*", separator);
          for (const path15 of params) {
            if (!safeObjectPath(path15)) {
              throw Error("WBc36nVD");
            }
            if (has(targetClone, path15, separator)) {
              set2(target, path15, get(targetClone, path15, void 0, separator), separator);
              unsortedTargetPaths.delete(path15);
            }
          }
          for (const path15 of unsortedTargetPaths) {
            set2(target, path15, get(targetClone, path15, void 0, separator), separator);
          }
          return params.length > 0;
        }
        "operation$\uA4FAkeySortOrder"(target, params, separator = "\uA4FA") {
          return this.operation$keySortOrder(target, params, separator, "$\uA4FAkeySortOrder");
        }
        operation$propSortOrder(target, params, separator = ".") {
          return this.operation$keySortOrder(target, params, separator, "$propSortOrder");
        }
        "operation$\uA4FApropSortOrder"(target, params, separator = "\uA4FA") {
          return this.operation$keySortOrder(target, params, separator, "$\uA4FApropSortOrder");
        }
      };
      return Object.defineProperty(ObjMC, "name", {
        ...Object.getOwnPropertyDescriptor(ObjMC, "name"),
        value: "ObjMC"
      });
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/obj.js
var obj_exports = {};
__export(obj_exports, {
  allEntries: () => allEntries,
  allKeyAndSymbolEntries: () => allKeyAndSymbolEntries,
  allKeys: () => allKeys,
  allKeysAndSymbols: () => allKeysAndSymbols,
  assign: () => assign,
  assignComplete: () => assignComplete,
  c9r: () => c9r,
  clone: () => clone,
  cloneDeep: () => cloneDeep,
  deepFreeze: () => deepFreeze,
  defaults: () => defaults,
  freeze: () => freeze,
  keyAndSymbolEntries: () => keyAndSymbolEntries,
  keysAndSymbols: () => keysAndSymbols,
  leave: () => leave2,
  map: () => map2,
  mapDeep: () => mapDeep,
  mcCustom: () => mcCustom,
  mergeClonesDeep: () => mergeClonesDeep,
  mergeClonesDeepNoOps: () => mergeClonesDeepNoOps,
  mergeDeep: () => mergeDeep,
  mergeDeepNoOps: () => mergeDeepNoOps,
  omit: () => omit2,
  ownC9r: () => ownC9r,
  patchClonesDeep: () => patchClonesDeep,
  patchClonesDeepNoOps: () => patchClonesDeepNoOps,
  patchDeep: () => patchDeep,
  patchDeepNoOps: () => patchDeepNoOps,
  pick: () => pick2,
  plainC9rStr: () => plainC9rStr,
  proto: () => proto2,
  protoC9r: () => protoC9r,
  protoOwnC9r: () => protoOwnC9r,
  tag: () => tag,
  tags: () => tags,
  unset: () => unset2,
  updateClonesDeep: () => updateClonesDeep,
  updateClonesDeepNoOps: () => updateClonesDeepNoOps,
  updateDeep: () => updateDeep,
  updateDeepNoOps: () => updateDeepNoOps
});
function assign(target, ...values) {
  const objTarget = Object(target);
  for (const value of values) {
    const objValue = Object(value);
    for (const key of keysAndSymbols(objValue)) {
      objTarget[key] = objValue[key];
    }
  }
  return objTarget;
}
function assignComplete(target, ...values) {
  const objTarget = Object(target);
  for (const value of values) {
    const objValue = Object(value);
    for (const key of keysAndSymbols(objValue)) {
      Object.defineProperty(objTarget, key, { ...Object.getOwnPropertyDescriptor(objValue, key) });
    }
  }
  return objTarget;
}
function defaults(target, ...values) {
  const objTarget = Object(target);
  for (const value of values) {
    const objValue = Object(value);
    for (const key of keysAndSymbols(objValue)) {
      if (void 0 !== objTarget[key] && Object.hasOwn(objTarget, key)) {
        continue;
      }
      objTarget[key] = objValue[key];
    }
  }
  return objTarget;
}
function omit2(value, keys, options4) {
  const opts = defaults({}, options4 || {}, { byReference: false, skipReadonly: false, undefinedValues: false });
  const objValue = Object(opts.byReference ? value : clone(value));
  if (set(objValue)) {
    for (const value2 of keys) {
      objValue.delete(value2);
    }
    if (opts.undefinedValues) {
      objValue.delete(void 0);
    }
  } else if (map(objValue)) {
    for (const key of keys) {
      objValue.delete(key);
    }
    if (opts.undefinedValues) {
      for (const [key, value2] of objValue) {
        if (void 0 === value2)
          objValue.delete(key);
      }
    }
  } else if (array(objValue)) {
    for (const key of keys.sort().reverse()) {
      if (!opts.byReference || !opts.skipReadonly || Object.getOwnPropertyDescriptor(objValue, key)?.writable) {
        objValue.splice(key, 1);
      }
    }
    if (opts.undefinedValues) {
      for (let key = objValue.length - 1; key >= 0; key--) {
        if (!opts.byReference || !opts.skipReadonly || Object.getOwnPropertyDescriptor(objValue, key)?.writable) {
          if (void 0 === objValue[key])
            objValue.splice(key, 1);
        }
      }
    }
  } else {
    for (const key of keys.sort().reverse()) {
      if (!opts.byReference || !opts.skipReadonly || Object.getOwnPropertyDescriptor(objValue, key)?.writable) {
        delete objValue[key];
      }
    }
    if (opts.undefinedValues) {
      for (const key of keysAndSymbols(objValue)) {
        if (!opts.byReference || !opts.skipReadonly || Object.getOwnPropertyDescriptor(objValue, key)?.writable) {
          if (void 0 === objValue[key])
            delete objValue[key];
        }
      }
    }
  }
  return objValue;
}
function unset2(value, keys, options4) {
  return omit2(value, keys, { byReference: true, ...options4 || {} });
}
function pick2(value, keys, options4) {
  const opts = defaults({}, options4 || {}, { byReference: false, skipReadonly: false });
  const objValue = Object(opts.byReference ? value : clone(value));
  if (set(objValue)) {
    for (const value2 of objValue) {
      if (!keys.includes(value2))
        objValue.delete(value2);
    }
  } else if (map(objValue)) {
    for (const [key] of objValue) {
      if (!keys.includes(key))
        objValue.delete(key);
    }
  } else if (array(objValue)) {
    for (let key = objValue.length - 1; key >= 0; key--) {
      if (!keys.includes(key) && (!opts.byReference || !opts.skipReadonly || Object.getOwnPropertyDescriptor(objValue, key)?.writable)) {
        objValue.splice(key, 1);
      }
    }
  } else {
    for (const key of keysAndSymbols(objValue).sort().reverse()) {
      if (!keys.includes(key) && (!opts.byReference || !opts.skipReadonly || Object.getOwnPropertyDescriptor(objValue, key)?.writable)) {
        delete objValue[key];
      }
    }
  }
  return objValue;
}
function leave2(value, keys, options4) {
  return pick2(value, keys, { byReference: true, ...options4 || {} });
}
var mc, mcNoOps, mcInitialized, plainC9rStr, tag, tags, c9r, ownC9r, proto2, protoC9r, protoOwnC9r, allKeys, allEntries, keysAndSymbols, keyAndSymbolEntries, allKeysAndSymbols, allKeyAndSymbolEntries, freeze, deepFreeze, clone, cloneDeep, mcInitialize, mcCustom, mergeDeep, mergeDeepNoOps, mergeClonesDeep, mergeClonesDeepNoOps, patchDeep, patchDeepNoOps, patchClonesDeep, patchClonesDeepNoOps, updateDeep, updateDeepNoOps, updateClonesDeep, updateClonesDeepNoOps, map2, mapDeep;
var init_obj = __esm({
  "node_modules/@clevercanyon/utilities/dist/obj.js"() {
    init_standalone();
    init_is();
    init_symbol();
    init_obj_mc();
    mcInitialized = false;
    plainC9rStr = $obj\uA4FAplainC9rStr;
    tag = $fn\uA4FAmemo(64, $obj\uA4FAtag);
    tags = $fn\uA4FAmemo(64, (value) => $obj\uA4FAtags(value));
    c9r = $obj\uA4FAc9r;
    ownC9r = $obj\uA4FAownC9r;
    proto2 = $obj\uA4FAproto;
    protoC9r = (value, levelsUp = 1) => {
      return proto2(value, levelsUp)?.constructor || void 0;
    };
    protoOwnC9r = (value, levelsUp = 1) => {
      const __proto__ = proto2(value, levelsUp);
      return __proto__ && Object.hasOwn(__proto__, "constructor") && __proto__.constructor || void 0;
    };
    allKeys = (value) => {
      const objValue = Object(value), keys = Object.keys(objValue);
      const objProto = proto2(objValue), inheritedKeys = objProto ? allKeys(objProto) : [];
      return [...new Set(keys.concat(inheritedKeys))];
    };
    allEntries = (value, _parentObjValue) => {
      const objValue = Object(value), parentObjValue = _parentObjValue || objValue, entries = [], keys = Object.keys(objValue);
      for (const key of keys) {
        entries.push([key, parentObjValue[key]]);
      }
      const objProto = proto2(objValue), inheritedEntries = objProto ? allEntries(objProto, parentObjValue) : [];
      return entries.concat(
        inheritedEntries.filter(([inheritedKey]) => {
          return !keys.includes(inheritedKey);
        })
      );
    };
    keysAndSymbols = $obj\uA4FAkeysAndSymbols;
    keyAndSymbolEntries = (value) => {
      const entries = [], objValue = Object(value);
      for (const keyOrSymbol of Reflect.ownKeys(objValue)) {
        if (Object.getOwnPropertyDescriptor(objValue, keyOrSymbol)?.enumerable) {
          entries.push([keyOrSymbol, objValue[keyOrSymbol]]);
        }
      }
      return entries;
    };
    allKeysAndSymbols = (value) => {
      const keys = [], objValue = Object(value);
      for (const keyOrSymbol of Reflect.ownKeys(objValue)) {
        if (Object.getOwnPropertyDescriptor(objValue, keyOrSymbol)?.enumerable) {
          keys.push(keyOrSymbol);
        }
      }
      const objProto = proto2(objValue), inheritedKeys = objProto ? allKeysAndSymbols(objProto) : [];
      return [...new Set(keys.concat(inheritedKeys))];
    };
    allKeyAndSymbolEntries = (value, _parentObjValue) => {
      const entries = [], objValue = Object(value), parentObjValue = _parentObjValue || objValue;
      for (const keyOrSymbol of Reflect.ownKeys(objValue)) {
        if (Object.getOwnPropertyDescriptor(objValue, keyOrSymbol)?.enumerable) {
          entries.push([keyOrSymbol, parentObjValue[keyOrSymbol]]);
        }
      }
      const objProto = proto2(objValue), objKeysAndSymbols = keysAndSymbols(objValue), inheritedEntries = objProto ? allKeyAndSymbolEntries(objProto, parentObjValue) : [];
      return entries.concat(
        inheritedEntries.filter(([inheritedKeyOrSymbol]) => {
          return !objKeysAndSymbols.includes(inheritedKeyOrSymbol);
        })
      );
    };
    freeze = (value) => {
      return Object.freeze(Object(value));
    };
    deepFreeze = (value, circular = /* @__PURE__ */ new Map()) => {
      const objValue = Object(value);
      if (circular.has(objValue)) {
        return circular.get(objValue);
      }
      circular.set(objValue, objValue);
      for (const [, keyOrSymbolValue] of keyAndSymbolEntries(objValue)) {
        if (object(keyOrSymbolValue))
          deepFreeze(keyOrSymbolValue, circular);
      }
      return Object.freeze(objValue);
    };
    clone = (value, options4 = {}, circular = /* @__PURE__ */ new Map()) => {
      const opts = defaults({}, options4, { with: void 0, transfer: [] });
      if (!object(value) || _function(value) || promise2(value)) {
        return value;
      }
      if (opts.with && _function(opts.with)) {
        const clone2 = opts.with(value, { deep: false, opts, circular, inDeep: false });
        if (object(clone2)) {
          return clone2;
        }
      }
      if (value[objToClone] && _function(value[objToClone])) {
        const clone2 = value[objToClone]({ deep: false, opts, circular, inDeep: false });
        if (object(clone2)) {
          return clone2;
        }
      }
      switch (true) {
        case plainObject(value): {
          return { ...value };
        }
        case map(value): {
          return new Map(value);
        }
        case set(value): {
          return new Set(value);
        }
        case array(value): {
          return [...value];
        }
        case url2(value): {
          return new URL(value);
        }
        case node(value): {
          return value.cloneNode(true);
        }
        case structuredCloneable(value): {
          try {
            return structuredClone(value, { transfer: opts.transfer });
          } catch {
          }
        }
        default: {
          return { ...value };
        }
      }
    };
    cloneDeep = (value, options4 = {}, circular = /* @__PURE__ */ new Map(), inDeep = false) => {
      const opts = !inDeep ? defaults({}, options4, { with: void 0, transfer: [] }) : options4;
      if (!object(value) || _function(value) || promise2(value)) {
        return value;
      }
      if (circular.has(value)) {
        return circular.get(value);
      }
      if (opts.with && _function(opts.with)) {
        const clone2 = opts.with(value, { deep: true, opts, circular, inDeep });
        if (object(clone2)) {
          circular.set(value, clone2);
          return clone2;
        }
      }
      if (value[objToClone] && _function(value[objToClone])) {
        const clone2 = value[objToClone]({ deep: true, opts, circular, inDeep });
        if (object(clone2)) {
          circular.set(value, clone2);
          return clone2;
        }
      }
      switch (true) {
        case plainObject(value): {
          const clone2 = {};
          circular.set(value, clone2);
          for (const [key, keyValue] of keyAndSymbolEntries(value)) {
            clone2[key] = cloneDeep(keyValue, opts, circular, true);
          }
          return clone2;
        }
        case map(value): {
          const clone2 = /* @__PURE__ */ new Map();
          circular.set(value, clone2);
          for (const [key, keyValue] of value) {
            clone2.set(key, cloneDeep(keyValue, opts, circular, true));
          }
          return clone2;
        }
        case set(value): {
          const clone2 = /* @__PURE__ */ new Set();
          circular.set(value, clone2);
          for (const _value of value) {
            clone2.add(cloneDeep(_value, opts, circular, true));
          }
          return clone2;
        }
        case array(value): {
          const clone2 = [];
          circular.set(value, clone2);
          for (let key = 0; key < value.length; key++) {
            clone2[key] = cloneDeep(value[key], opts, circular, true);
          }
          return clone2;
        }
        case url2(value): {
          const clone2 = new URL(value);
          circular.set(value, clone2);
          return clone2;
        }
        case node(value): {
          const clone2 = value.cloneNode(true);
          circular.set(value, clone2);
          return clone2;
        }
        case structuredCloneable(value): {
          try {
            const clone2 = structuredClone(value, { transfer: opts.transfer });
            circular.set(value, clone2);
            return clone2;
          } catch {
          }
        }
        default: {
          const clone2 = {};
          circular.set(value, clone2);
          for (const [key, keyValue] of keyAndSymbolEntries(value)) {
            clone2[key] = cloneDeep(keyValue, opts, circular, true);
          }
          return clone2;
        }
      }
    };
    mcInitialize = () => {
      if (mcInitialized) {
        return true;
      } else
        mcInitialized = true;
      const ObjMC2 = getClass3();
      mc = new ObjMC2();
      mcNoOps = new ObjMC2({ allowOps: false });
      return true;
    };
    mcCustom = (...args) => {
      return mcInitialize() && mc.newInstance(...args);
    };
    mergeDeep = (...args) => {
      return mcInitialize() && mc.mergeDeep(...args);
    };
    mergeDeepNoOps = (...args) => {
      return mcInitialize() && mcNoOps.mergeDeep(...args);
    };
    mergeClonesDeep = (...args) => {
      return mcInitialize() && mc.mergeClonesDeep(...args);
    };
    mergeClonesDeepNoOps = (...args) => {
      return mcInitialize() && mcNoOps.mergeClonesDeep(...args);
    };
    patchDeep = (...args) => {
      return mcInitialize() && mc.patchDeep(...args);
    };
    patchDeepNoOps = (...args) => {
      return mcInitialize() && mcNoOps.patchDeep(...args);
    };
    patchClonesDeep = (...args) => {
      return mcInitialize() && mc.patchClonesDeep(...args);
    };
    patchClonesDeepNoOps = (...args) => {
      return mcInitialize() && mcNoOps.patchClonesDeep(...args);
    };
    updateDeep = (...args) => {
      return mcInitialize() && mc.updateDeep(...args);
    };
    updateDeepNoOps = (...args) => {
      return mcInitialize() && mcNoOps.updateDeep(...args);
    };
    updateClonesDeep = (...args) => {
      return mcInitialize() && mc.updateClonesDeep(...args);
    };
    updateClonesDeepNoOps = (...args) => {
      return mcInitialize() && mcNoOps.updateClonesDeep(...args);
    };
    map2 = (value, callbackFn, options4) => {
      const opts = defaults({}, options4 || {}, { byReference: false, skipReadonly: true, _deep: false });
      const objValue = Object(opts.byReference ? value : clone(value));
      if (set(objValue)) {
        for (const value2 of Array.from(objValue)) {
          objValue.delete(value2);
          const newValue = callbackFn(value2);
          if (opts._deep && object(newValue)) {
            objValue.add(map2(newValue, callbackFn, opts));
          } else
            objValue.add(newValue);
        }
      } else if (map(objValue)) {
        for (const [key, value2] of objValue) {
          const newValue = callbackFn(value2, key);
          if (opts._deep && object(newValue)) {
            objValue.set(key, map2(newValue, callbackFn, opts));
          } else
            objValue.set(key, newValue);
        }
      } else if (array(objValue)) {
        for (let key = 0; key < objValue.length; key++) {
          if (!opts.byReference || !opts.skipReadonly || Object.getOwnPropertyDescriptor(objValue, key)?.writable) {
            objValue[key] = callbackFn(objValue[key], key);
            if (opts._deep && object(objValue[key])) {
              objValue[key] = map2(objValue[key], callbackFn, opts);
            }
          }
        }
      } else {
        for (const key of keysAndSymbols(objValue)) {
          if (!opts.byReference || !opts.skipReadonly || Object.getOwnPropertyDescriptor(objValue, key)?.writable) {
            objValue[key] = callbackFn(objValue[key], key);
            if (opts._deep && object(objValue[key])) {
              objValue[key] = map2(objValue[key], callbackFn, opts);
            }
          }
        }
      }
      return objValue;
    };
    mapDeep = (...args) => {
      return map2(args[0], args[1], { ...args[2], _deep: true });
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/resources/preact/classes/class-map.js
var ClassMap, getClass4;
var init_class_map = __esm({
  "node_modules/@clevercanyon/utilities/dist/resources/preact/classes/class-map.js"() {
    getClass4 = () => {
      if (ClassMap)
        return ClassMap;
      ClassMap = class extends Map {
        /**
         * Checks if map has a `text-[wrap]` class.
         *
         * @returns True if map has a `text-[wrap]` class.
         */
        hasTextWrap() {
          const regExp2 = /^text-(?:wrap|nowrap|balance|pretty)$/iu;
          return [...this.keys()].some((c) => regExp2.test(c));
        }
        /**
         * Checks if map has a `text-[size]` class.
         *
         * @returns True if map has a `text-[size]` class.
         */
        hasTextSize() {
          const regExp2 = /^text-(?:xs|sm|base|lg|[0-9]*xl)$/iu;
          return [...this.keys()].some((c) => regExp2.test(c));
        }
      };
      return Object.defineProperty(ClassMap, "name", {
        ...Object.getOwnPropertyDescriptor(ClassMap, "name"),
        value: "ClassMap"
      });
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/json.js
var json_exports = {};
__export(json_exports, {
  cloneDeep: () => cloneDeep2,
  contentType: () => contentType,
  parse: () => parse4,
  stringify: () => stringify,
  tryParse: () => tryParse2
});
function stringify(value, options4) {
  const opts = defaults({}, options4 || {}, { noMiddleware: t\uA4FAv\uA4FAfalse, pretty: t\uA4FAv\uA4FAfalse }), circular = /* @__PURE__ */ new Set(), space = opts.pretty ? number(opts.pretty) ? opts.pretty : 4 : t\uA4FAv\uA4FAundefined;
  return JSON.stringify(value, opts.noMiddleware ? t\uA4FAv\uA4FAundefined : (key, value2) => stringifyMiddleware(key, value2, circular, opts.middleware), space);
}
var t\uA4FAv\uA4FAfalse, t\uA4FAv\uA4FAundefined, contentType, parse4, tryParse2, cloneDeep2, stringifyMiddleware, parseMiddleware;
var init_json = __esm({
  "node_modules/@clevercanyon/utilities/dist/json.js"() {
    init_obj();
    init_is();
    init_fn();
    t\uA4FAv\uA4FAfalse = false;
    t\uA4FAv\uA4FAundefined = void 0;
    contentType = () => {
      return "application/json; charset=utf-8";
    };
    parse4 = (json, options4) => {
      const opts = defaults({}, options4 || {}, { noMiddleware: t\uA4FAv\uA4FAfalse });
      return t\uA4FAv\uA4FAundefined === json ? t\uA4FAv\uA4FAundefined : JSON.parse(json, opts.noMiddleware ? t\uA4FAv\uA4FAundefined : (key, value) => parseMiddleware(key, value, opts.middleware));
    };
    tryParse2 = (json, options4) => {
      return tryFn(() => parse4(json, options4), t\uA4FAv\uA4FAundefined)();
    };
    cloneDeep2 = (value, options4) => {
      const stringifyOptions = {
        noMiddleware: options4?.noMiddleware,
        middleware: options4?.stringifyMiddleware
      }, parseOptions = {
        noMiddleware: options4?.noMiddleware,
        middleware: options4?.parseMiddleware
      };
      return parse4(stringify(value, stringifyOptions), parseOptions);
    };
    stringifyMiddleware = (key, value, circular, middleware) => {
      let newValue = value;
      if (object(newValue)) {
        if (circular.has(newValue)) {
          return t\uA4FAv\uA4FAundefined;
        }
        circular.add(newValue);
        if (middleware) {
          newValue = middleware(key, newValue);
        }
        if (!middleware || object(newValue)) {
          if (set(newValue)) {
            newValue = { __dataType: "Set", __data: [...newValue] };
          } else if (map(newValue)) {
            newValue = { __dataType: "Map", __data: [...newValue] };
          }
        }
      } else if (middleware) {
        newValue = middleware(key, newValue);
      }
      return newValue;
    };
    parseMiddleware = (key, value, middleware) => {
      let newValue = value;
      if (middleware) {
        newValue = middleware(key, newValue);
      }
      if (object(newValue)) {
        if ("Set" === newValue.__dataType && array(newValue.__data)) {
          newValue = new Set(newValue.__data);
        } else if ("Map" === newValue.__dataType && array(newValue.__data)) {
          newValue = new Map(newValue.__data);
        }
      }
      return newValue;
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/time.js
var time_exports = {};
__export(time_exports, {
  $: () => default25,
  dayInMicroseconds: () => dayInMicroseconds,
  dayInMilliseconds: () => dayInMilliseconds,
  dayInSeconds: () => dayInSeconds,
  floatStamp: () => floatStamp,
  hourInMicroseconds: () => hourInMicroseconds,
  hourInMilliseconds: () => hourInMilliseconds,
  hourInSeconds: () => hourInSeconds,
  milliStamp: () => milliStamp,
  minuteInMicroseconds: () => minuteInMicroseconds,
  minuteInMilliseconds: () => minuteInMilliseconds,
  minuteInSeconds: () => minuteInSeconds,
  monthInMicroseconds: () => monthInMicroseconds,
  monthInMilliseconds: () => monthInMilliseconds,
  monthInSeconds: () => monthInSeconds,
  now: () => now,
  parse: () => parse5,
  secondInMicroseconds: () => secondInMicroseconds,
  secondInMilliseconds: () => secondInMilliseconds,
  secondInSeconds: () => secondInSeconds,
  stamp: () => stamp,
  tryParse: () => tryParse3,
  weekInMicroseconds: () => weekInMicroseconds,
  weekInMilliseconds: () => weekInMilliseconds,
  weekInSeconds: () => weekInSeconds,
  yearInMicroseconds: () => yearInMicroseconds,
  yearInMilliseconds: () => yearInMilliseconds,
  yearInSeconds: () => yearInSeconds
});
import dayjs from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dayjs/dayjs.min.js";
import { default as default25 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dayjs/dayjs.min.js";
import dayjsAdvancedFormat from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dayjs/plugin/advancedFormat.js";
import dayjsCustomParseFormat from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dayjs/plugin/customParseFormat.js";
import dayjsLocalizedFormat from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dayjs/plugin/localizedFormat.js";
import dayjsRelativeTime from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dayjs/plugin/relativeTime.js";
import dayjsTimezone from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dayjs/plugin/timezone.js";
import dayjsToObject from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dayjs/plugin/toObject.js";
import dayjsUTC from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/dayjs/plugin/utc.js";
var initialized, i18n, secondInSeconds, secondInMilliseconds, secondInMicroseconds, minuteInSeconds, minuteInMilliseconds, minuteInMicroseconds, hourInSeconds, hourInMilliseconds, hourInMicroseconds, dayInSeconds, dayInMilliseconds, dayInMicroseconds, weekInSeconds, weekInMilliseconds, weekInMicroseconds, monthInSeconds, monthInMilliseconds, monthInMicroseconds, yearInSeconds, yearInMilliseconds, yearInMicroseconds, stamp, floatStamp, milliStamp, now, parse5, tryParse3, initialize, applyLocaleTZOptions, tzAbbrToZZ, rfc7231RegExp, rfc2822\uA4FA5322RegExp, rfc822RegExp, rfc850RegExp, hasTZRegExp;
var init_time = __esm({
  "node_modules/@clevercanyon/utilities/dist/time.js"() {
    init_is();
    init_fn();
    init_standalone();
    init_app();
    init_symbol();
    init_obj();
    initialized = false;
    secondInSeconds = 1;
    secondInMilliseconds = secondInSeconds * 1e3;
    secondInMicroseconds = secondInMilliseconds * 1e3;
    minuteInSeconds = secondInSeconds * 60;
    minuteInMilliseconds = minuteInSeconds * secondInMilliseconds;
    minuteInMicroseconds = minuteInSeconds * secondInMicroseconds;
    hourInSeconds = minuteInSeconds * 60;
    hourInMilliseconds = hourInSeconds * secondInMilliseconds;
    hourInMicroseconds = hourInSeconds * secondInMicroseconds;
    dayInSeconds = hourInSeconds * 24;
    dayInMilliseconds = dayInSeconds * secondInMilliseconds;
    dayInMicroseconds = dayInSeconds * secondInMicroseconds;
    weekInSeconds = dayInSeconds * 7;
    weekInMilliseconds = weekInSeconds * secondInMilliseconds;
    weekInMicroseconds = weekInSeconds * secondInMicroseconds;
    monthInSeconds = dayInSeconds * 30;
    monthInMilliseconds = monthInSeconds * secondInMilliseconds;
    monthInMicroseconds = monthInSeconds * secondInMicroseconds;
    yearInSeconds = dayInSeconds * 365;
    yearInMilliseconds = yearInSeconds * secondInMilliseconds;
    yearInMicroseconds = yearInSeconds * secondInMicroseconds;
    stamp = (parseable) => {
      return parse5(parseable).toStamp();
    };
    floatStamp = (parseable) => {
      return parse5(parseable).toFloatStamp();
    };
    milliStamp = (parseable) => {
      return parse5(parseable).toMilliStamp();
    };
    now = (options4) => parse5("", options4);
    parse5 = (parseable, options4) => {
      if (!initialized)
        initialize();
      let time$1;
      if (!parseable || "now" === parseable)
        time$1 = dayjs();
      else if (date(parseable) || time(parseable)) {
        time$1 = dayjs(parseable);
      } else if (number(parseable) || numeric(parseable) && /^\d{10,}/u.test(parseable)) {
        parseable = Number(parseable);
        if (float(parseable) || parseable.toString().length <= 10) {
          time$1 = dayjs.unix(parseable);
        } else {
          time$1 = dayjs(parseable);
        }
      } else if (string2(parseable)) {
        if (rfc7231RegExp.test(parseable)) {
          time$1 = dayjs.utc(
            parseable.replace(/^[a-z]+,\s/iu, "").replace(/\s([^\s]+)$/iu, ""),
            "DD MMM YYYY HH:mm:ss"
          );
        } else if (rfc2822\uA4FA5322RegExp.test(parseable)) {
          time$1 = dayjs(
            parseable.replace(/^[a-z]+,\s/iu, "").replace(/\s([^\s]+)$/iu, (...m) => " " + tzAbbrToZZ(m[1])),
            "DD MMM YYYY HH:mm:ss ZZ"
          );
        } else if (rfc822RegExp.test(parseable)) {
          time$1 = dayjs(
            parseable.replace(/^[a-z]+,\s/iu, "").replace(/\s([^\s]+)$/iu, (...m) => " " + tzAbbrToZZ(m[1])),
            "DD MMM YY HH:mm:ss ZZ"
          );
        } else if (rfc850RegExp.test(parseable)) {
          time$1 = dayjs(
            parseable.replace(/^[a-z]+,\s/iu, "").replace(/\s([^\s]+)$/iu, (...m) => " " + tzAbbrToZZ(m[1])),
            "DD-MMM-YY HH:mm:ss ZZ"
          );
        } else if (!hasTZRegExp.test(parseable))
          time$1 = dayjs.utc(parseable);
        else
          time$1 = dayjs(parseable);
      }
      if (!time$1 || !time$1.isValid()) {
        throw Error("HavduxTK");
      }
      return applyLocaleTZOptions(time$1, options4);
    };
    tryParse3 = (parseable, options4) => {
      return tryFn(() => parse5(parseable, options4), void 0)();
    };
    initialize = () => {
      if (initialized)
        return;
      initialized = true;
      const { extend: dayjsExtend } = dayjs;
      dayjsExtend(dayjsUTC);
      dayjsExtend(dayjsTimezone);
      dayjsExtend(dayjsCustomParseFormat);
      dayjsExtend(dayjsLocalizedFormat);
      dayjsExtend(dayjsAdvancedFormat);
      dayjsExtend(dayjsRelativeTime);
      dayjsExtend(dayjsToObject);
      dayjs.locale("en-US");
      dayjs.tz.setDefault("utc");
      i18n = new Intl.DateTimeFormat().resolvedOptions();
      dayjsExtend((unused\uA4FA, Dayjs) => {
        const { prototype } = Dayjs;
        Object.defineProperty(prototype, $symbol\uA4FAobjTag, {
          get: function() {
            return $pkgName + "/Time";
          }
        });
        prototype[objToPlain] = //
        function() {
          return this.utc().toObject();
        };
        prototype[$symbol\uA4FAobjToEquals] = //
        function() {
          return this[objToPlain]();
        };
        prototype[objToClone] = //
        function() {
          return this.clone();
        };
        const brokenClone = prototype.clone;
        prototype.clone = function() {
          const clone2 = brokenClone.call(this);
          for (const prop of ["$y", "$M", "$D", "$W", "$H", "$m", "$s", "$ms"]) {
            clone2[prop] = this[prop];
          }
          return clone2;
        };
        prototype.equals = function(other) {
          return other.toISOString() === this.toISOString();
        };
        prototype.toStamp = function() {
          return this.unix();
        };
        prototype.toFloatStamp = function() {
          return this.valueOf() / 1e3;
        };
        prototype.toMilliStamp = function() {
          return this.valueOf();
        };
        prototype.toYMD = function() {
          return this.format("YYYY-MM-DD");
        };
        prototype.toSQL = function() {
          return this.format("YYYY-MM-DD HH:mm:ss");
        };
        prototype.toISO = function() {
          return this.toISOString();
        };
        prototype.toHTTP = function() {
          return this.toDate().toUTCString();
        };
        prototype.toProse = function() {
          return this.format("lll z");
        };
        prototype.toProseDate = function() {
          return this.format("ll");
        };
        prototype.toI18n = function(options4) {
          const defaultOpts = { locale: "i18n", zone: "i18n", format: "lll z" };
          const opts = defaults({}, options4 || {}, defaultOpts);
          return applyLocaleTZOptions(this, opts).format(opts.format);
        };
        prototype.toI18nDate = function(options4) {
          return this.toI18n({ format: "ll", ...options4 });
        };
      });
    };
    applyLocaleTZOptions = (time2, options4) => {
      const defaultOpts = { locale: "en-US", zone: "utc" };
      const opts = defaults({}, options4 || {}, defaultOpts);
      if ("i18n" === opts.locale)
        opts.locale = i18n.locale;
      if ("en-US" === opts.locale)
        opts.locale = "en";
      if ("i18n" === opts.zone)
        opts.zone = i18n.timeZone;
      return time2.locale(opts.locale).tz(opts.zone);
    };
    tzAbbrToZZ = (abbr) => {
      switch (abbr.toUpperCase()) {
        case "Z":
        case "UT":
        case "UTC":
        case "GMT":
          return "+0000";
        case "EDT":
          return "-0400";
        case "EST":
        case "CDT":
          return "-0500";
        case "CST":
        case "MDT":
          return "-0600";
        case "MST":
        case "PDT":
          return "-0700";
        case "PST":
        case "AKDT":
          return "-0800";
        case "AKST":
          return "-0900";
        default:
          return abbr;
      }
    };
    rfc7231RegExp = /^(?:[a-z]{3},\s)?\d{2}\s[a-z]{3}\s\d{4}\s\d{2}:\d{2}:\d{2}\s(?:Z|UT|UTC|GMT|[+-]00(?::?00)?)$/iu;
    rfc2822\uA4FA5322RegExp = /^(?:[a-z]{3},\s)?\d{2}\s[a-z]{3}\s\d{4}\s\d{2}:\d{2}:\d{2}\s(?:Z|UT|UTC|GMT|EST|EDT|CST|CDT|MST|MDT|PST|PDT|AKST|AKDT[+-]\d{2}(?::?\d{2})?)$/iu;
    rfc822RegExp = /^(?:[a-z]{3},\s)?\d{2}\s[a-z]{3}\s\d{2}\s\d{2}:\d{2}:\d{2}\s(?:Z|UT|UTC|GMT|EST|EDT|CST|CDT|MST|MDT|PST|PDT|AKST|AKDT|[+-]\d{2}(?::?\d{2})?)$/iu;
    rfc850RegExp = /^(?:[a-z]+,\s)?\d{2}-[a-z]{3}-\d{2}\s\d{2}:\d{2}:\d{2}\s(?:Z|UT|UTC|GMT|EST|EDT|CST|CDT|MST|MDT|PST|PDT|AKST|AKDT|[+-]\d{2}(?::?\d{2})?)$/iu;
    hasTZRegExp = /(?:Z|\s(?:Z|UT|UTC|GMT|EST|EDT|CST|CDT|MST|MDT|PST|PDT|AKST|AKDT[+-]\d{2}(?::?\d{2})?))$/iu;
  }
});

// node_modules/@clevercanyon/utilities/dist/crypto.js
var crypto_exports = {};
__export(crypto_exports, {
  authToken: () => authToken,
  authTokenName: () => authTokenName,
  authTokenSalt: () => authTokenSalt,
  authVerify: () => authVerify,
  base64Decode: () => base64Decode,
  base64Encode: () => base64Encode,
  base64ToBlob: () => base64ToBlob,
  blobToBase64: () => blobToBase64,
  cspNonce: () => cspNonce,
  cspNonceReplacementCode: () => cspNonceReplacementCode,
  emailToken: () => emailToken,
  emailVerify: () => emailVerify,
  hmacSHA: () => hmacSHA,
  hmacSHA1: () => hmacSHA1,
  hmacSHA256: () => hmacSHA256,
  hmacSHA384: () => hmacSHA384,
  hmacSHA512: () => hmacSHA512,
  md5: () => md5,
  randomNumber: () => randomNumber,
  randomString: () => randomString,
  safeEqual: () => safeEqual,
  sha: () => sha,
  sha1: () => sha1,
  sha256: () => sha256,
  sha384: () => sha384,
  sha512: () => sha512,
  uuidV4: () => uuidV4
});
var dataURIBase64PrefixRegExp, md5, sha, hmacSHA, sha1, hmacSHA1, sha256, hmacSHA256, sha384, hmacSHA384, sha512, hmacSHA512, base64Encode, base64Decode, blobToBase64, base64ToBlob, emailToken, emailVerify, authTokenName, authTokenSalt, authToken, authVerify, randomNumber, randomString, uuidV4, cspNonce, cspNonceReplacementCode, safeEqual, bufferToHex, buildHash, buildHMACHash;
var init_crypto = __esm({
  "node_modules/@clevercanyon/utilities/dist/crypto.js"() {
    init_standalone();
    init_to();
    init_obj();
    init_str();
    init_fn();
    init_time();
    init_is();
    init_env();
    dataURIBase64PrefixRegExp = /^data:([^:=;,]+(?:\s*;[^:=;,]+=[^:=;,]+)*);base64,/iu;
    md5 = $fn\uA4FAmemo(2, async (str) => buildHash("md5", str));
    sha = $fn\uA4FAmemo(2, async (str, x) => {
      return (await buildHash("sha-512", str)).slice(0, numberBetween(x, 1, 128));
    });
    hmacSHA = $fn\uA4FAmemo(2, async (str, x, key) => {
      return (await buildHMACHash("sha-512", str, key)).slice(0, numberBetween(x, 1, 128));
    });
    sha1 = $fn\uA4FAmemo(2, async (str) => buildHash("sha-1", str));
    hmacSHA1 = $fn\uA4FAmemo(2, async (str, key) => buildHMACHash("sha-1", str, key));
    sha256 = $fn\uA4FAmemo(2, async (str) => buildHash("sha-256", str));
    hmacSHA256 = $fn\uA4FAmemo(2, async (str, key) => buildHMACHash("sha-256", str, key));
    sha384 = $fn\uA4FAmemo(2, async (str) => buildHash("sha-384", str));
    hmacSHA384 = $fn\uA4FAmemo(2, async (str, key) => buildHMACHash("sha-384", str, key));
    sha512 = $fn\uA4FAmemo(2, async (str) => buildHash("sha-512", str));
    hmacSHA512 = $fn\uA4FAmemo(2, async (str, key) => buildHMACHash("sha-512", str, key));
    base64Encode = (str$1, options4) => {
      const opts = defaults({}, options4 || {}, { urlSafe: false }), base64 = btoa(textEncode(str$1).reduce((str2, i) => str2 += String.fromCodePoint(i), ""));
      return opts.urlSafe ? base64.replaceAll("+", "-").replaceAll("/", "_").replaceAll("=", "") : base64;
    };
    base64Decode = (base64, options4) => {
      const opts = defaults({}, options4 || {}, { urlSafe: false });
      base64 = base64.replace(dataURIBase64PrefixRegExp, "");
      base64 = opts.urlSafe ? base64.replaceAll("-", "+").replaceAll("_", "/") + "=".repeat((4 - base64.length % 4) % 4) : base64;
      return textDecode(Uint8Array.from(tryFn(() => atob(base64), "")(), (v) => Number(v.codePointAt(0))));
    };
    blobToBase64 = async (blob2, options4) => {
      const opts = defaults({}, options4 || {}, { urlSafe: false, type: "" }), base64 = btoa(new Uint8Array(await blob2.arrayBuffer()).reduce((str, i) => str += String.fromCodePoint(i), "")), type = opts.type || blob2.type || "";
      return "data:" + type + ";base64," + // As a data URI to preserve MIME type.
      (opts.urlSafe ? base64.replaceAll("+", "-").replaceAll("/", "_").replaceAll("=", "") : base64);
    };
    base64ToBlob = async (base64, options4) => {
      const opts = defaults({}, options4 || {}, { urlSafe: false, type: "" }), [, dataURIType = ""] = base64.match(dataURIBase64PrefixRegExp) || [], type = opts.type || dataURIType || "";
      base64 = base64.replace(dataURIBase64PrefixRegExp, "");
      base64 = opts.urlSafe ? base64.replaceAll("-", "+").replaceAll("_", "/") + "=".repeat(base64.length % 4) : base64;
      return new Blob([Uint8Array.from(tryFn(() => atob(base64), "")(), (v) => Number(v.codePointAt(0)))], { type });
    };
    emailToken = async (email, userId = 0) => {
      const tokenEmail = email.toLowerCase(), tokenUUIDV4x2 = uuidV4() + uuidV4(), tokenUserId = userId.toString().padStart(20, "0"), tokenExpireTime = stamp() + dayInSeconds * 2, tokenHash = await hmacSHA256(tokenUUIDV4x2 + tokenEmail + tokenUserId + String(tokenExpireTime));
      return base64Encode(tokenEmail, { urlSafe: true }) + tokenUUIDV4x2 + tokenUserId + tokenHash + String(tokenExpireTime);
    };
    emailVerify = async (token, userId = 0) => {
      if (!token)
        return "";
      const tokenHash = token.slice(-74, -10), tokenUserId = token.slice(-94, -74), tokenUUIDV4x2 = token.slice(-158, -94), tokenExpireTime = Number(token.slice(-10)), tokenEmail = base64Decode(token.slice(0, -158), { urlSafe: true }), tokenActualUserId = Number(lTrim(tokenUserId, "0") || "0");
      if (safeInteger(tokenExpireTime) && tokenExpireTime > stamp()) {
        if (safeEqual(tokenHash, await hmacSHA256(tokenUUIDV4x2 + tokenEmail + tokenUserId + String(tokenExpireTime)))) {
          if (isEmail(tokenEmail) && safeEqual(String(userId), String(tokenActualUserId))) {
            return tokenEmail;
          }
        }
      }
      return "";
    };
    authTokenName = () => {
      return "user_auth_" + get3("APP_AUTH_TOKEN_NAME_HASH", { type: "string", require: true }).padStart(32, "0").slice(0, 32);
    };
    authTokenSalt = () => {
      return get3("APP_AUTH_TOKEN_SECRET_SALT", { type: "string", require: true });
    };
    authToken = async (userId) => {
      const tokenName = authTokenName(), tokenSalt = authTokenSalt(), tokenUUIDV4x2 = uuidV4() + uuidV4(), tokenUserId = userId.toString().padStart(20, "0"), tokenExpireTime = stamp() + yearInSeconds, tokenHash = await hmacSHA256(tokenUUIDV4x2 + tokenName + tokenSalt + tokenUserId + String(tokenExpireTime));
      return tokenUUIDV4x2 + tokenUserId + tokenHash + String(tokenExpireTime);
    };
    authVerify = async (token) => {
      if (!token || 158 !== byteLength(token)) {
        return 0;
      }
      const tokenName = authTokenName(), tokenSalt = authTokenSalt(), tokenHash = token.slice(-74, -10), tokenUUIDV4x2 = token.slice(0, -94), tokenUserId = token.slice(-94, -74), tokenExpireTime = Number(token.slice(-10)), tokenActualUserId = Number(lTrim(tokenUserId, "0") || "0");
      if (safeInteger(tokenExpireTime) && tokenExpireTime > stamp()) {
        if (safeEqual(tokenHash, await hmacSHA256(tokenUUIDV4x2 + tokenName + tokenSalt + tokenUserId + String(tokenExpireTime)))) {
          if (safeInteger(tokenActualUserId) && tokenActualUserId > 0) {
            return tokenActualUserId;
          }
        }
      }
      return 0;
    };
    randomNumber = (min = 1, max = Number.MAX_SAFE_INTEGER) => {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    };
    randomString = (byteLength2 = 32, options4) => {
      let str = "", byteDictionary = "";
      byteLength2 = Math.max(0, byteLength2);
      const opts = defaults({}, options4 || {}, { type: "default", byteDictionary: "" });
      if (opts.byteDictionary) {
        byteDictionary = opts.byteDictionary;
      } else {
        const byteGroups = {
          numbers: "0123456789",
          lowerLetters: "abcdefghijklmnopqrstuvwxyz",
          upperLetters: "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
          symbols: "`~!@#$%^&*+-=_()[]{}<>|\\/?.,;:'\""
        };
        const byteExclusionGroups = {
          similar: /[iIlL|1oO0]/gu,
          ambiguous: /[$`~()[\]{}<>\\/.,;:'"]/gu,
          urlUnsafe: /[^a-zA-Z0-9.~_-]/gu
        };
        switch (opts.type) {
          case "alphabetic": {
            byteDictionary += byteGroups.lowerLetters;
            byteDictionary += byteGroups.upperLetters;
            break;
          }
          case "lower-alphabetic": {
            byteDictionary += byteGroups.lowerLetters;
            break;
          }
          case "upper-alphabetic": {
            byteDictionary += byteGroups.upperLetters;
            break;
          }
          case "alphanumeric": {
            byteDictionary += byteGroups.numbers;
            byteDictionary += byteGroups.lowerLetters;
            byteDictionary += byteGroups.upperLetters;
            break;
          }
          case "lower-alphanumeric": {
            byteDictionary += byteGroups.numbers;
            byteDictionary += byteGroups.lowerLetters;
            break;
          }
          case "upper-alphanumeric": {
            byteDictionary += byteGroups.numbers;
            byteDictionary += byteGroups.upperLetters;
            break;
          }
          case "numeric": {
            byteDictionary += byteGroups.numbers;
            break;
          }
          case "cryptic":
          case "url-safe":
          case "default":
          default: {
            byteDictionary += byteGroups.numbers;
            byteDictionary += byteGroups.lowerLetters;
            byteDictionary += byteGroups.upperLetters;
            byteDictionary += byteGroups.symbols;
          }
        }
        switch (opts.type) {
          case "cryptic": {
            break;
          }
          case "default":
          default: {
            byteDictionary = byteDictionary.replace(byteExclusionGroups.similar, "");
            byteDictionary = byteDictionary.replace(byteExclusionGroups.ambiguous, "");
            if ("url-safe" === opts.type) {
              byteDictionary = byteDictionary.replace(byteExclusionGroups.urlUnsafe, "");
            }
          }
        }
      }
      if (byteDictionary.length <= 1) {
        throw Error("JqrKKDY2");
      }
      for (let i = 0; i < byteLength2; i++) {
        str += byteDictionary.at(randomNumber(0, byteDictionary.length - 1));
      }
      return str;
    };
    uuidV4 = (options4) => {
      const opts = defaults({}, options4 || {}, { dashes: false });
      return opts.dashes ? crypto.randomUUID() : crypto.randomUUID().replace(/-/gu, "");
    };
    cspNonce = () => {
      return base64Encode(
        uuidV4()
        /* 32 bytes */
      );
    };
    cspNonceReplacementCode = () => {
      return "{%-_{%-___________cspNonce___________-%}_-%}";
    };
    safeEqual = (strA, strB) => {
      if (!isCFW())
        return strA === strB;
      if (strA.length !== strB.length)
        return false;
      const a = textEncode(strA), b = textEncode(strB);
      if (a.byteLength !== b.byteLength)
        return false;
      return crypto.subtle.timingSafeEqual(a, b);
    };
    bufferToHex = (buffer2) => {
      return Array.from(new Uint8Array(buffer2)).map((bin) => bin.toString(16).padStart(2, "0")).join("");
    };
    buildHash = async (algo, str$1) => {
      return bufferToHex(await crypto.subtle.digest(algo, textEncode(str$1)));
    };
    buildHMACHash = async (algo, str$1, key) => {
      if ("&" === key) {
        key = get3("APP_C10N_HMAC_SHA_KEY", { type: "string", require: true });
      } else if (!key) {
        key = get3("APP_HMAC_SHA_KEY", { type: "string", require: true });
      }
      if (!key)
        throw Error("Fh5H2DRf");
      const encodedKey = textEncode(key), cryptoKey = await crypto.subtle.importKey("raw", encodedKey, { name: "hmac", hash: { name: algo } }, false, ["sign", "verify"]);
      return bufferToHex(await crypto.subtle.sign("hmac", cryptoKey, textEncode(str$1)));
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/mime.js
var vsCodeLangBinary, mimeTypeStream, typeClean, typeIsBinary, cleanType, types, exts, extsPipedForRegExp, extsRegExp;
var init_mime = __esm({
  "node_modules/@clevercanyon/utilities/dist/mime.js"() {
    init_standalone();
    init_path();
    init_obj();
    vsCodeLangBinary = "code-text-binary";
    mimeTypeStream = "application/octet-stream";
    typeClean = (type) => {
      return type.toLowerCase().split(/\s*;\s*/u)[0].trim();
    };
    typeIsBinary = (type) => {
      if (!(type = typeClean(type))) {
        return true;
      }
      for (const [, group] of Object.entries(types())) {
        for (const [, subgroup] of Object.entries(group)) {
          if (type === subgroup.type)
            return subgroup.binary;
        }
      }
      return false;
    };
    cleanType = (file, defaultType) => {
      const fileExt = ext(file);
      defaultType = defaultType || mimeTypeStream;
      if (!fileExt)
        return defaultType;
      for (const [, group] of Object.entries(types())) {
        for (const [subgroupExts, subgroup] of Object.entries(group)) {
          if (subgroupExts.split("|").includes(fileExt))
            return subgroup.type;
        }
      }
      return defaultType;
    };
    types = $fn\uA4FAmemo(() => {
      return deepFreeze({
        // Documents.
        "Text": {
          "txt|text": { type: "text/plain", binary: false, canonical: "txt", vsCodeLang: "plaintext" }
        },
        "Markdown": {
          "mdx": { type: "text/markdown", binary: false, canonical: "mdx", vsCodeLang: "mdx" },
          "md|markdown|mdown|mdwn|mkd|mdtxt|mdtext": { type: "text/markdown", binary: false, canonical: "md", vsCodeLang: "markdown" }
        },
        "Rich Text": {
          "rtx": { type: "text/richtext", binary: true, canonical: "rtx", vsCodeLang: vsCodeLangBinary },
          "rtf": { type: "application/rtf", binary: true, canonical: "rtf", vsCodeLang: vsCodeLangBinary }
        },
        "HTML": {
          "html|htm": { type: "text/html", binary: false, canonical: "html", vsCodeLang: "html" },
          "shtml|shtm": { type: "text/html", binary: false, canonical: "shtml", vsCodeLang: "html" },
          "xhtml|xhtm": { type: "application/xhtml+xml", binary: false, canonical: "xhtml", vsCodeLang: "html" }
        },
        "PDF": {
          "pdf": { type: "application/pdf", binary: true, canonical: "pdf", vsCodeLang: vsCodeLangBinary }
        },
        // Backend code.
        "PHP": {
          "php|phtml|phtm": { type: "text/html", binary: false, canonical: "php", vsCodeLang: "php" },
          "phps": { type: "application/php-source", binary: false, canonical: "phps", vsCodeLang: "php" }
        },
        "ASP": {
          "asp|aspx": { type: "text/html", binary: false, canonical: "asp", vsCodeLang: "asp" }
        },
        "Ruby": {
          "rb": { type: "text/html", binary: false, canonical: "rb", vsCodeLang: "ruby" }
        },
        "Python": {
          "py": { type: "text/html", binary: false, canonical: "py", vsCodeLang: "python" }
        },
        "Perl": {
          "pl6|perl6": { type: "text/html", binary: false, canonical: "pl6", vsCodeLang: "perl6" },
          "pl|plx|cgi|ppl|perl": { type: "text/html", binary: false, canonical: "pl", vsCodeLang: "perl" }
        },
        "Shell": {
          "bash": { type: "text/html", binary: false, canonical: "bash", vsCodeLang: "shellscript" },
          "zsh": { type: "text/html", binary: false, canonical: "zsh", vsCodeLang: "shellscript" },
          "sh": { type: "text/html", binary: false, canonical: "sh", vsCodeLang: "shellscript" }
        },
        "C": {
          "c": { type: "text/plain", binary: false, canonical: "c", vsCodeLang: "c" },
          "cs": { type: "text/plain", binary: false, canonical: "cs", vsCodeLang: "csharp" },
          "cpp|cc": { type: "text/plain", binary: false, canonical: "cpp", vsCodeLang: "cpp" },
          "o": { type: "text/plain", binary: false, canonical: "o", vsCodeLang: "cpp" },
          "h": { type: "text/plain", binary: false, canonical: "h", vsCodeLang: "cpp" }
        },
        "Docker": {
          "dockerfile": { type: mimeTypeStream, binary: false, canonical: "dockerfile", vsCodeLang: "dockerfile" }
        },
        "JS Automation": {
          "jxa": { type: "text/javascript", binary: false, canonical: "jxa", vsCodeLang: "jxa" }
        },
        "AppleScript": {
          "applescript": { type: "application/applescript", binary: false, canonical: "applescript", vsCodeLang: "applescript" },
          "scpt|scptd": { type: "application/applescript", binary: true, canonical: "scpt", vsCodeLang: "applescript.binary" }
        },
        "Batch": {
          "bat": { type: "text/plain", binary: false, canonical: "bat", vsCodeLang: "bat" }
        },
        // Frontend code (most of the time).
        "JavaScript": {
          "wasm": { type: "application/wasm", binary: true, canonical: "wasm", vsCodeLang: vsCodeLangBinary },
          "js|mjs|cjs": { type: "text/javascript", binary: false, canonical: "js", vsCodeLang: "javascript" },
          "jsx|mjsx|cjsx": { type: "text/javascript", binary: false, canonical: "jsx", vsCodeLang: "javascriptreact" }
        },
        "TypeScript": {
          "ts|mts|cts": { type: "text/typescript", binary: false, canonical: "ts", vsCodeLang: "typescript" },
          "tsx|mtsx|ctsx": { type: "text/typescript", binary: false, canonical: "tsx", vsCodeLang: "typescriptreact" }
        },
        "Style": {
          "css": { type: "text/css", binary: false, canonical: "css", vsCodeLang: "css" },
          "scss": { type: "text/css", binary: false, canonical: "scss", vsCodeLang: "scss" },
          "less": { type: "text/css", binary: false, canonical: "less", vsCodeLang: "less" },
          "xsl|xslt": { type: "application/xslt+xml", binary: false, canonical: "xsl", vsCodeLang: "xml" }
        },
        // Other code.
        "Other Code": {
          "hta": { type: "application/hta", binary: false, canonical: "hta", vsCodeLang: "plaintext" },
          "htc": { type: "text/x-component", binary: false, canonical: "htc", vsCodeLang: "plaintext" },
          "class": { type: "application/java", binary: true, canonical: "class", vsCodeLang: vsCodeLangBinary }
        },
        // Templates.
        "EJS": {
          "ejs": { type: "text/plain", binary: false, canonical: "ejs", vsCodeLang: "html" }
        },
        "Liquid": {
          "liquid": { type: "text/plain", binary: false, canonical: "liquid", vsCodeLang: "html" }
        },
        "Other Template": {
          "tpl": { type: "text/plain", binary: false, canonical: "tpl", vsCodeLang: "plaintext" }
        },
        // Data|config files.
        "SQL": {
          "sql|sqlite": { type: "text/plain", binary: false, canonical: "sql", vsCodeLang: "sql" }
        },
        "Delimited": {
          "csv": { type: "text/csv", binary: false, canonical: "csv", vsCodeLang: "plaintext" },
          "tsv": { type: "text/tab-separated-values", binary: false, canonical: "tsv", vsCodeLang: "plaintext" }
        },
        "JSON": {
          "json": { type: "application/json", binary: false, canonical: "json", vsCodeLang: "json" },
          "json5": { type: "application/json5", binary: false, canonical: "json5", vsCodeLang: "jsonc" },
          "jsonld": { type: "application/ld+json", binary: false, canonical: "jsonld", vsCodeLang: "json" }
        },
        "TOML": {
          "toml": { type: "text/plain", binary: false, canonical: "toml", vsCodeLang: "toml" }
        },
        "YAML": {
          "yaml|yml": { type: "text/plain", binary: false, canonical: "yaml", vsCodeLang: "yaml" }
        },
        "INI": {
          "ini": { type: "text/plain", binary: false, canonical: "ini", vsCodeLang: "ini" }
        },
        "Properties": {
          "env": { type: "text/plain", binary: false, canonical: "env", vsCodeLang: "properties" },
          "props|properties": { type: "text/plain", binary: false, canonical: "props", vsCodeLang: "properties" }
        },
        "Form": {
          "form": { type: "application/x-www-form-urlencoded", binary: false, canonical: "form", vsCodeLang: "plaintext" }
        },
        "Apache": {
          "conf": { type: "text/plain", binary: false, canonical: "conf", vsCodeLang: "apacheconf" },
          "htaccess": { type: "text/plain", binary: false, canonical: "htaccess", vsCodeLang: "apacheconf" },
          "htpasswd": { type: "text/plain", binary: false, canonical: "htpasswd", vsCodeLang: "apacheconf" }
        },
        "I18n": {
          "po|pot": { type: "text/x-gettext-translation", binary: false, canonical: "po", vsCodeLang: "plaintext" },
          "mo": { type: "application/x-gettext-translation", binary: true, canonical: "mo", vsCodeLang: vsCodeLangBinary }
        },
        "XML": {
          "xml": { type: "text/xml", binary: false, canonical: "xml", vsCodeLang: "xml" },
          "xsd": { type: "application/xsd+xml", binary: false, canonical: "xsd", vsCodeLang: "xml" },
          "dtd": { type: "application/xml-dtd", binary: false, canonical: "dtd", vsCodeLang: "xml" }
        },
        "Calendar": {
          "ics": { type: "text/calendar", binary: false, canonical: "ics", vsCodeLang: "plaintext" }
        },
        "Feed": {
          "atom": { type: "application/atom+xml", binary: false, canonical: "atom", vsCodeLang: "xml" },
          "rdf": { type: "application/rdf+xml", binary: false, canonical: "rdf", vsCodeLang: "xml" },
          "rss|rss2": { type: "application/rss+xml", binary: false, canonical: "rss", vsCodeLang: "xml" },
          "rss-http": { type: "text/xml", binary: false, canonical: "rss", vsCodeLang: "xml" }
        },
        "Log": {
          "log": { type: "text/plain", binary: false, canonical: "log", vsCodeLang: "plaintext" }
        },
        "Other Data": {
          // ASX is an XML file w/ a weird MIME type; {@see https://o5p.me/Bqt8Zi}.
          "asx": { type: "video/x-ms-asf", binary: true, canonical: "asx", vsCodeLang: "xml" },
          "vtt": { type: "text/vtt", binary: false, canonical: "vtt", vsCodeLang: "plaintext" },
          "srt": { type: "text/plain", binary: false, canonical: "srt", vsCodeLang: "plaintext" },
          "dfxp": { type: "application/ttaf+xml", binary: false, canonical: "dfxp", vsCodeLang: "xml" },
          "hex": { type: mimeTypeStream, binary: true, canonical: "hex", vsCodeLang: "hexEditor.hexedit" }
        },
        "Other Config": {
          "babelrc": { type: "text/plain", binary: false, canonical: "babelrc", vsCodeLang: "jsonc" },
          "npmrc": { type: "text/plain", binary: false, canonical: "npmrc", vsCodeLang: "properties" },
          "yarnrc": { type: "text/plain", binary: false, canonical: "yarnrc", vsCodeLang: "plaintext" },
          "inputrc": { type: "text/plain", binary: false, canonical: "inputrc", vsCodeLang: "plaintext" },
          "tsbuildinfo": { type: "text/plain", binary: false, canonical: "tsbuildinfo", vsCodeLang: "plaintext" },
          "editorconfig": { type: "text/plain", binary: false, canonical: "editorconfig", vsCodeLang: "properties" },
          "shellcheckrc": { type: "text/plain", binary: false, canonical: "shellcheckrc", vsCodeLang: "shellcheckrc" },
          "browserslistrc": { type: "text/plain", binary: false, canonical: "browserslistrc", vsCodeLang: "browserslist" },
          "gitchange": { type: "text/plain", binary: false, canonical: "gitchange", vsCodeLang: "plaintext" },
          "gitconfig": { type: "text/plain", binary: false, canonical: "gitconfig", vsCodeLang: "properties" },
          "gitattributes": { type: "text/plain", binary: false, canonical: "gitattributes", vsCodeLang: "ignore" },
          "gitignore": { type: "text/plain", binary: false, canonical: "gitignore", vsCodeLang: "ignore" },
          "npmignore": { type: "text/plain", binary: false, canonical: "npmignore", vsCodeLang: "ignore" },
          "dockerignore": { type: "text/plain", binary: false, canonical: "dockerignore", vsCodeLang: "ignore" },
          "vscodeignore": { type: "text/plain", binary: false, canonical: "vscodeignore", vsCodeLang: "ignore" },
          "prettierignore": { type: "text/plain", binary: false, canonical: "prettierignore", vsCodeLang: "ignore" },
          "eslintignore": { type: "text/plain", binary: false, canonical: "eslintignore", vsCodeLang: "ignore" }
        },
        // Media formats.
        "Image": {
          "ai": { type: "image/vnd.adobe.illustrator", binary: true, canonical: "ai", vsCodeLang: vsCodeLangBinary },
          "bmp": { type: "image/bmp", binary: true, canonical: "bmp", vsCodeLang: vsCodeLangBinary },
          "eps": { type: "image/eps", binary: true, canonical: "eps", vsCodeLang: vsCodeLangBinary },
          "gif": { type: "image/gif", binary: true, canonical: "gif", vsCodeLang: vsCodeLangBinary },
          "heic": { type: "image/heic", binary: true, canonical: "heic", vsCodeLang: vsCodeLangBinary },
          "ico": { type: "image/x-icon", binary: true, canonical: "ico", vsCodeLang: vsCodeLangBinary },
          "jpg|jpeg|jpe": { type: "image/jpeg", binary: true, canonical: "jpg", vsCodeLang: vsCodeLangBinary },
          "pict": { type: "image/pict", binary: true, canonical: "pict", vsCodeLang: vsCodeLangBinary },
          "png": { type: "image/png", binary: true, canonical: "png", vsCodeLang: vsCodeLangBinary },
          "apng": { type: "image/apng", binary: true, canonical: "apng", vsCodeLang: vsCodeLangBinary },
          "xcf": { type: mimeTypeStream, binary: true, canonical: "xcf", vsCodeLang: vsCodeLangBinary },
          "psd": { type: "image/vnd.adobe.photoshop", binary: true, canonical: "psd", vsCodeLang: vsCodeLangBinary },
          "pspimage": { type: "image/vnd.corel.psp", binary: true, canonical: "pspimage", vsCodeLang: vsCodeLangBinary },
          "svg": { type: "image/svg+xml", binary: false, canonical: "svg", vsCodeLang: "xml" },
          "svgz": { type: "image/svg+xml", binary: true, canonical: "svgz", vsCodeLang: vsCodeLangBinary },
          "tiff|tif": { type: "image/tiff", binary: true, canonical: "tiff", vsCodeLang: vsCodeLangBinary },
          "webp": { type: "image/webp", binary: true, canonical: "webp", vsCodeLang: vsCodeLangBinary }
        },
        "Audio": {
          "aac": { type: "audio/aac", binary: true, canonical: "aac", vsCodeLang: vsCodeLangBinary },
          "flac": { type: "audio/flac", binary: true, canonical: "flac", vsCodeLang: vsCodeLangBinary },
          "mid|midi": { type: "audio/midi", binary: true, canonical: "mid", vsCodeLang: vsCodeLangBinary },
          "mka": { type: "audio/x-matroska", binary: true, canonical: "mka", vsCodeLang: vsCodeLangBinary },
          "mp3": { type: "audio/mpeg", binary: true, canonical: "mp3", vsCodeLang: vsCodeLangBinary },
          "m4a": { type: "audio/mpeg", binary: true, canonical: "m4a", vsCodeLang: vsCodeLangBinary },
          "m4b": { type: "audio/mpeg", binary: true, canonical: "m4b", vsCodeLang: vsCodeLangBinary },
          "ogg": { type: "audio/ogg", binary: true, canonical: "ogg", vsCodeLang: vsCodeLangBinary },
          "oga": { type: "audio/ogg", binary: true, canonical: "oga", vsCodeLang: vsCodeLangBinary },
          "pls": { type: "audio/x-scpls", binary: true, canonical: "pls", vsCodeLang: vsCodeLangBinary },
          "ra|ram": { type: "audio/x-realaudio", binary: true, canonical: "ra", vsCodeLang: vsCodeLangBinary },
          "wav": { type: "audio/wav", binary: true, canonical: "wav", vsCodeLang: vsCodeLangBinary },
          "wax": { type: "audio/x-ms-wax", binary: true, canonical: "wax", vsCodeLang: vsCodeLangBinary },
          "wma": { type: "audio/x-ms-wma", binary: true, canonical: "wma", vsCodeLang: vsCodeLangBinary }
        },
        "Video": {
          "asf": { type: "video/x-ms-asf", binary: true, canonical: "asf", vsCodeLang: vsCodeLangBinary },
          "avi": { type: "video/avi", binary: true, canonical: "avi", vsCodeLang: vsCodeLangBinary },
          "divx": { type: "video/divx", binary: true, canonical: "divx", vsCodeLang: vsCodeLangBinary },
          "flv": { type: "video/x-flv", binary: true, canonical: "flv", vsCodeLang: vsCodeLangBinary },
          "mkv": { type: "video/x-matroska", binary: true, canonical: "mkv", vsCodeLang: vsCodeLangBinary },
          "mov|qt": { type: "video/quicktime", binary: true, canonical: "mov", vsCodeLang: vsCodeLangBinary },
          "mp4|m4v": { type: "video/mp4", binary: true, canonical: "mp4", vsCodeLang: vsCodeLangBinary },
          "mpeg|mpg|mpe": { type: "video/mpeg", binary: true, canonical: "mpeg", vsCodeLang: vsCodeLangBinary },
          "ogv": { type: "video/ogg", binary: true, canonical: "ogv", vsCodeLang: vsCodeLangBinary },
          "webm": { type: "video/webm", binary: true, canonical: "webm", vsCodeLang: vsCodeLangBinary },
          "wm": { type: "video/x-ms-wm", binary: true, canonical: "wm", vsCodeLang: vsCodeLangBinary },
          "wmv": { type: "video/x-ms-wmv", binary: true, canonical: "wmv", vsCodeLang: vsCodeLangBinary },
          "wmx": { type: "video/x-ms-wmx", binary: true, canonical: "wmx", vsCodeLang: vsCodeLangBinary }
        },
        "Font": {
          "otf": { type: "application/x-font-otf", binary: true, canonical: "otf", vsCodeLang: vsCodeLangBinary },
          "ttf": { type: "application/x-font-ttf", binary: true, canonical: "ttf", vsCodeLang: vsCodeLangBinary },
          "woff|woff2": { type: "application/x-font-woff", binary: true, canonical: "woff", vsCodeLang: vsCodeLangBinary },
          "eot": { type: "application/vnd.ms-fontobject", binary: true, canonical: "eot", vsCodeLang: vsCodeLangBinary }
        },
        // Archives.
        "Archive": {
          "iso": { type: "application/iso-image", binary: true, canonical: "iso", vsCodeLang: vsCodeLangBinary },
          "dmg": { type: "application/x-apple-diskimage", binary: true, canonical: "dmg", vsCodeLang: vsCodeLangBinary },
          "tar": { type: "application/x-tar", binary: true, canonical: "tar", vsCodeLang: vsCodeLangBinary },
          "gtar": { type: "application/x-gtar", binary: true, canonical: "gtar", vsCodeLang: vsCodeLangBinary },
          "gz|tgz|gzip": { type: "application/x-gzip", binary: true, canonical: "gz", vsCodeLang: vsCodeLangBinary },
          "rar": { type: "application/rar", binary: true, canonical: "rar", vsCodeLang: vsCodeLangBinary },
          "zip": { type: "application/zip", binary: true, canonical: "zip", vsCodeLang: vsCodeLangBinary },
          "7z": { type: "application/x-7z-compressed", binary: true, canonical: "7z", vsCodeLang: vsCodeLangBinary },
          "jar": { type: "application/java-archive", binary: true, canonical: "jar", vsCodeLang: vsCodeLangBinary },
          "node": { type: "application/node-archive", binary: true, canonical: "node", vsCodeLang: vsCodeLangBinary },
          "phar": { type: "application/php-archive", binary: true, canonical: "phar", vsCodeLang: vsCodeLangBinary }
        },
        // Certificates.
        "Certificate": {
          "csr": { type: "text/plain", binary: false, canonical: "csr", vsCodeLang: "plaintext" },
          "crt": { type: "text/plain", binary: false, canonical: "crt", vsCodeLang: "plaintext" },
          "pem": { type: "text/plain", binary: false, canonical: "pem", vsCodeLang: "plaintext" },
          "asc": { type: "text/plain", binary: false, canonical: "asc", vsCodeLang: "plaintext" }
        },
        // Applications.
        "Other Application": {
          "so": { type: mimeTypeStream, binary: true, canonical: "so", vsCodeLang: vsCodeLangBinary },
          "app": { type: mimeTypeStream, binary: true, canonical: "app", vsCodeLang: vsCodeLangBinary },
          "bin": { type: mimeTypeStream, binary: true, canonical: "bin", vsCodeLang: vsCodeLangBinary },
          "com": { type: mimeTypeStream, binary: true, canonical: "com", vsCodeLang: vsCodeLangBinary },
          "dll": { type: mimeTypeStream, binary: true, canonical: "dll", vsCodeLang: vsCodeLangBinary },
          "exe": { type: "application/x-msdownload", binary: true, canonical: "exe", vsCodeLang: vsCodeLangBinary },
          "blend": { type: "application/x-blender", binary: true, canonical: "blend", vsCodeLang: vsCodeLangBinary },
          "sketch": { type: "application/zip", binary: true, canonical: "sketch", vsCodeLang: vsCodeLangBinary }
        },
        // Proprietary.
        "Google": {
          "kml": { type: "application/vnd.google-earth.kml+xml", binary: false, canonical: "kml", vsCodeLang: "xml" },
          "kmz": { type: "application/vnd.google-earth.kmz", binary: true, canonical: "kmz", vsCodeLang: vsCodeLangBinary }
        },
        "Adobe": {
          "ps": { type: "application/postscript", binary: true, canonical: "ps", vsCodeLang: vsCodeLangBinary },
          "fla": { type: "application/vnd.adobe.flash", binary: true, canonical: "fla", vsCodeLang: vsCodeLangBinary },
          "swf": { type: "application/x-shockwave-flash", binary: true, canonical: "swf", vsCodeLang: vsCodeLangBinary }
        },
        "Apple": {
          "key": { type: "application/vnd.apple.keynote", binary: true, canonical: "key", vsCodeLang: vsCodeLangBinary },
          "numbers": { type: "application/vnd.apple.numbers", binary: true, canonical: "numbers", vsCodeLang: vsCodeLangBinary },
          "pages": { type: "application/vnd.apple.pages", binary: true, canonical: "pages", vsCodeLang: vsCodeLangBinary }
        },
        "MS Office": {
          "doc": { type: "application/msword", binary: true, canonical: "doc", vsCodeLang: vsCodeLangBinary },
          "docm": { type: "application/vnd.ms-word.document.macroEnabled.12", binary: true, canonical: "docm", vsCodeLang: vsCodeLangBinary },
          "docx": { type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document", binary: true, canonical: "docx", vsCodeLang: vsCodeLangBinary },
          "dotm": { type: "application/vnd.ms-word.template.macroEnabled.12", binary: true, canonical: "dotm", vsCodeLang: vsCodeLangBinary },
          "dotx": { type: "application/vnd.openxmlformats-officedocument.wordprocessingml.template", binary: true, canonical: "dotx", vsCodeLang: vsCodeLangBinary },
          "mdb": { type: "application/vnd.ms-access", binary: true, canonical: "mdb", vsCodeLang: vsCodeLangBinary },
          "mpp": { type: "application/vnd.ms-project", binary: true, canonical: "mpp", vsCodeLang: vsCodeLangBinary },
          "one": { type: "application/onenote", binary: true, canonical: "one", vsCodeLang: vsCodeLangBinary },
          "onetoc|onetoc2": { type: "application/onenote", binary: true, canonical: "onetoc", vsCodeLang: vsCodeLangBinary },
          "onepkg": { type: "application/onenote", binary: true, canonical: "onepkg", vsCodeLang: vsCodeLangBinary },
          "oxps": { type: "application/oxps", binary: true, canonical: "oxps", vsCodeLang: vsCodeLangBinary },
          "ppt": { type: "application/vnd.ms-powerpoint", binary: true, canonical: "ppt", vsCodeLang: vsCodeLangBinary },
          "pps": { type: "application/vnd.ms-powerpoint", binary: true, canonical: "pps", vsCodeLang: vsCodeLangBinary },
          "potm": { type: "application/vnd.ms-powerpoint.template.macroEnabled.12", binary: true, canonical: "potm", vsCodeLang: vsCodeLangBinary },
          "potx": { type: "application/vnd.openxmlformats-officedocument.presentationml.template", binary: true, canonical: "potx", vsCodeLang: vsCodeLangBinary },
          "ppam": { type: "application/vnd.ms-powerpoint.addin.macroEnabled.12", binary: true, canonical: "ppam", vsCodeLang: vsCodeLangBinary },
          "ppsm": { type: "application/vnd.ms-powerpoint.slideshow.macroEnabled.12", binary: true, canonical: "ppsm", vsCodeLang: vsCodeLangBinary },
          "ppsx": { type: "application/vnd.openxmlformats-officedocument.presentationml.slideshow", binary: true, canonical: "ppsx", vsCodeLang: vsCodeLangBinary },
          "pptm": { type: "application/vnd.ms-powerpoint.presentation.macroEnabled.12", binary: true, canonical: "pptm", vsCodeLang: vsCodeLangBinary },
          "pptx": { type: "application/vnd.openxmlformats-officedocument.presentationml.presentation", binary: true, canonical: "pptx", vsCodeLang: vsCodeLangBinary },
          "sldm": { type: "application/vnd.ms-powerpoint.slide.macroEnabled.12", binary: true, canonical: "sldm", vsCodeLang: vsCodeLangBinary },
          "sldx": { type: "application/vnd.openxmlformats-officedocument.presentationml.slide", binary: true, canonical: "sldx", vsCodeLang: vsCodeLangBinary },
          "wri": { type: "application/vnd.ms-write", binary: true, canonical: "wri", vsCodeLang: vsCodeLangBinary },
          "xla": { type: "application/vnd.ms-excel", binary: true, canonical: "xla", vsCodeLang: vsCodeLangBinary },
          "xls": { type: "application/vnd.ms-excel", binary: true, canonical: "xls", vsCodeLang: vsCodeLangBinary },
          "xlt": { type: "application/vnd.ms-excel", binary: true, canonical: "xlt", vsCodeLang: vsCodeLangBinary },
          "xlw": { type: "application/vnd.ms-excel", binary: true, canonical: "xlw", vsCodeLang: vsCodeLangBinary },
          "xlam": { type: "application/vnd.ms-excel.addin.macroEnabled.12", binary: true, canonical: "xlam", vsCodeLang: vsCodeLangBinary },
          "xlsb": { type: "application/vnd.ms-excel.sheet.binary.macroEnabled.12", binary: true, canonical: "xlsb", vsCodeLang: vsCodeLangBinary },
          "xlsm": { type: "application/vnd.ms-excel.sheet.macroEnabled.12", binary: true, canonical: "xlsm", vsCodeLang: vsCodeLangBinary },
          "xlsx": { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", binary: true, canonical: "xlsx", vsCodeLang: vsCodeLangBinary },
          "xltm": { type: "application/vnd.ms-excel.template.macroEnabled.12", binary: true, canonical: "xltm", vsCodeLang: vsCodeLangBinary },
          "xltx": { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.template", binary: true, canonical: "xltx", vsCodeLang: vsCodeLangBinary },
          "xps": { type: "application/vnd.ms-xpsdocument", binary: true, canonical: "xps", vsCodeLang: vsCodeLangBinary }
        },
        "OpenOffice": {
          "odb": { type: "application/vnd.oasis.opendocument.database", binary: true, canonical: "odb", vsCodeLang: vsCodeLangBinary },
          "odc": { type: "application/vnd.oasis.opendocument.chart", binary: true, canonical: "odc", vsCodeLang: vsCodeLangBinary },
          "odf": { type: "application/vnd.oasis.opendocument.formula", binary: true, canonical: "odf", vsCodeLang: vsCodeLangBinary },
          "odg": { type: "application/vnd.oasis.opendocument.graphics", binary: true, canonical: "odg", vsCodeLang: vsCodeLangBinary },
          "odp": { type: "application/vnd.oasis.opendocument.presentation", binary: true, canonical: "odp", vsCodeLang: vsCodeLangBinary },
          "ods": { type: "application/vnd.oasis.opendocument.spreadsheet", binary: true, canonical: "ods", vsCodeLang: vsCodeLangBinary },
          "odt": { type: "application/vnd.oasis.opendocument.text", binary: true, canonical: "odt", vsCodeLang: vsCodeLangBinary }
        },
        "WordPerfect": {
          "wpd|wp": { type: "application/wordperfect", binary: true, canonical: "wpd", vsCodeLang: vsCodeLangBinary }
        }
      });
    });
    exts = $fn\uA4FAmemo(() => {
      let flat = [];
      for (const [, group] of Object.entries(types())) {
        for (const [subgroupExts] of Object.entries(group)) {
          flat = flat.concat(subgroupExts.split("|"));
        }
      }
      return freeze([...new Set(flat.sort())]);
    });
    extsPipedForRegExp = $fn\uA4FAmemo(() => exts().join("|"));
    extsRegExp = $fn\uA4FAmemo(() => new RegExp("(?:^|[^.])\\.(" + extsPipedForRegExp() + ")$", "iu"));
  }
});

// node_modules/@clevercanyon/utilities/dist/mm.js
var mm_exports = {};
__export(mm_exports, {
  all: () => all,
  any: () => any,
  braces: () => braces,
  capture: () => capture2,
  contains: () => contains,
  every: () => every,
  isMatch: () => any,
  makeRe: () => makeRe,
  match: () => match,
  matchKeys: () => matchKeys,
  matcher: () => matcher,
  not: () => not,
  parse: () => parse6,
  scan: () => scan,
  some: () => some,
  test: () => test3
});
import mm from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/micromatch/index.js";
var any, test3, contains, all, some, every, match, matchKeys, not, capture2, parse6, makeRe, matcher, braces, scan, mmOptions;
var init_mm = __esm({
  "node_modules/@clevercanyon/utilities/dist/mm.js"() {
    init_obj();
    any = (string3, globs, options4) => {
      return mm.any(string3, globs, mmOptions(options4));
    };
    test3 = (string3, globs, options4) => {
      return any(string3, globs, { dot: true, ...options4 });
    };
    contains = (string3, globs, options4) => {
      return mm.contains(string3, globs, mmOptions(options4));
    };
    all = (string3, globs, options4) => {
      return mm.all(string3, globs, mmOptions(options4));
    };
    some = (strings, globs, options4) => {
      return mm.some(strings, globs, mmOptions(options4));
    };
    every = (strings, globs, options4) => {
      return mm.every(strings, globs, mmOptions(options4));
    };
    match = (strings, globs, options4) => {
      return mm.match(strings, globs, mmOptions(options4));
    };
    matchKeys = (object2, globs, options4) => {
      return mm.matchKeys(object2, globs, mmOptions(options4));
    };
    not = (strings, globs, options4) => {
      return mm.not(strings, globs, mmOptions(options4));
    };
    capture2 = (glob, string3, options4) => {
      return mm.capture(glob, string3, mmOptions(options4));
    };
    parse6 = (globs, options4) => {
      return mm.parse(globs, mmOptions(options4));
    };
    makeRe = (glob, options4) => {
      return mm.makeRe(glob, mmOptions(options4));
    };
    matcher = (glob, options4) => {
      return mm.matcher(glob, mmOptions(options4));
    };
    braces = (...args) => mm.braces(...args);
    scan = (...args) => mm.scan(...args);
    mmOptions = (options4) => {
      let mmOptions2 = { ...omit2(options4 || {}, ["ignoreCase"]) };
      if (options4 && Object.hasOwn(options4, "ignoreCase")) {
        mmOptions2.nocase = options4.ignoreCase;
      }
      return mmOptions2;
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/path.js
var path_exports = {};
__export(path_exports, {
  basename: () => basename,
  canonicalExtVariants: () => canonicalExtVariants,
  clean: () => clean,
  defaultGitIgnores: () => defaultGitIgnores,
  defaultGitIgnoresByGroup: () => defaultGitIgnoresByGroup,
  defaultGitNPMIgnoresByCategory: () => defaultGitNPMIgnoresByCategory,
  defaultNPMIgnores: () => defaultNPMIgnores,
  defaultNPMIgnoresByGroup: () => defaultNPMIgnoresByGroup,
  dotGlobstarHead: () => dotGlobstarHead,
  dotGlobstarSingle: () => dotGlobstarSingle,
  dotGlobstarTail: () => dotGlobstarTail,
  ext: () => ext,
  extRegExp: () => extRegExp,
  extsByCanonical: () => extsByCanonical,
  extsByVSCodeLang: () => extsByVSCodeLang,
  gitIgnoreToGlob: () => gitIgnoreToGlob,
  globToRegExp: () => globToRegExp,
  globToRegExpString: () => globToRegExpString,
  hasExt: () => hasExt,
  hasStaticExt: () => hasStaticExt,
  jsTSExtsByDevGroup: () => jsTSExtsByDevGroup,
  newGitIgnore: () => newGitIgnore,
  rawBasename: () => rawBasename,
  removeExt: () => removeExt,
  staticExtRegExp: () => staticExtRegExp,
  staticExts: () => staticExts,
  staticExtsPipedForRegExp: () => staticExtsPipedForRegExp,
  vsCodeLangExts: () => vsCodeLangExts
});
import untypedGitIgnoreFactory from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/ignore/index.js";
var gitIgnoreFactory, extRegExp, staticExts, staticExtsPipedForRegExp, staticExtRegExp, dotGlobstarHead, dotGlobstarSingle, dotGlobstarTail, clean, basename, rawBasename, ext, hasExt, hasStaticExt, removeExt, newGitIgnore, gitIgnoreToGlob, globToRegExp, globToRegExpString, canonicalExtVariants, vsCodeLangExts, extsByCanonical, extsByVSCodeLang, jsTSExtsByDevGroup, defaultGitIgnores, defaultNPMIgnores, defaultGitIgnoresByGroup, defaultNPMIgnoresByGroup, defaultGitNPMIgnoresByCategory;
var init_path = __esm({
  "node_modules/@clevercanyon/utilities/dist/path.js"() {
    init_standalone();
    init_obj();
    init_mime();
    init_str();
    init_mm();
    init_to();
    init_is();
    gitIgnoreFactory = untypedGitIgnoreFactory;
    extRegExp = $fn\uA4FAmemo(() => /(?:^|[^.])\.([^\\/.]+)$/iu);
    staticExts = $fn\uA4FAmemo(() => {
      return freeze(
        exts().filter((ext2) => {
          return !["php", "phtml", "phtm", "phar"].includes(ext2) && !/^(?:php|phtml|phtm)(?:[.~_-]*[0-9]+)$/u.test(ext2);
        })
      );
    });
    staticExtsPipedForRegExp = $fn\uA4FAmemo(() => staticExts().join("|"));
    staticExtRegExp = $fn\uA4FAmemo(() => new RegExp("(?:^|[^.])\\.(" + staticExtsPipedForRegExp() + ")$", "iu"));
    dotGlobstarHead = () => "{,**/,*(.|[^.]|\\x2F)/}";
    dotGlobstarSingle = () => "{*,*(*|.)}";
    dotGlobstarTail = () => "{,/**/*,/?(.)*(.|[^.]|\\x2F)}";
    clean = (path15) => {
      return path15.split(/[?#]/u)[0];
    };
    basename = (path15) => {
      return clean(path15).replace(/^.*?([^\\/]+)$/iu, "$1");
    };
    rawBasename = (path15) => {
      return removeExt(basename(path15));
    };
    ext = (path15) => {
      path15 = clean(path15);
      return "" !== path15 ? extRegExp().exec(path15)?.[1].toLowerCase() || "" : "";
    };
    hasExt = (path15) => {
      path15 = clean(path15);
      return "" !== path15 && extRegExp().test(path15);
    };
    hasStaticExt = (path15) => {
      path15 = clean(path15);
      return "" !== path15 && staticExtRegExp().test(path15);
    };
    removeExt = (path15) => {
      let pathExt;
      path15 = clean(path15);
      if (pathExt = ext(path15)) {
        path15 = path15.slice(0, -(pathExt.length + 1));
      }
      return path15;
    };
    newGitIgnore = (options4) => {
      const defaultOpts = {
        ignoreCase: true,
        useDefaultGitIgnores: true,
        useDefaultNPMIgnores: false
      };
      const opts = defaults({}, options4 || {}, defaultOpts);
      if (opts.useDefaultNPMIgnores)
        opts.useDefaultGitIgnores = false;
      const gitIgnore = gitIgnoreFactory({ ignorecase: opts.ignoreCase });
      if (opts.useDefaultGitIgnores) {
        gitIgnore.add(defaultGitIgnores());
      }
      if (opts.useDefaultNPMIgnores) {
        gitIgnore.add(defaultNPMIgnores());
      }
      return gitIgnore;
    };
    gitIgnoreToGlob = (ignoreGlob, options4) => {
      const opts = defaults({}, options4 || {}, { useDotGlobstars: false });
      ignoreGlob = rTrim(ignoreGlob, "/");
      const isNegated = /^!/u.test(ignoreGlob);
      const isRootPath = /^!?\//u.test(ignoreGlob);
      const isRelativePath = /\//u.test(ignoreGlob.replace(/^(?:\*\*\/)+|(?:\/\*\*)+$/gu, ""));
      if (isNegated) {
        ignoreGlob = ignoreGlob.replace(/^!/u, "");
      }
      if (opts.useDotGlobstars) {
        ignoreGlob = ignoreGlob.replace(/(?:\*\*\/){2,}/gu, "**/").replace(/(?:\/\*\*){2,}/gu, "/**").replace(/\*\*\//gu, "[:dotGlobstarHead:]").replace(/\/\*\*/gu, "[:dotGlobstarTail:]").replace(/\*+/gu, "[:dotGlobstarSingle:]");
        ignoreGlob = ignoreGlob.replace(
          /\[:dotGlobstar(?:Head|Tail|Single):\]/gu,
          (m0) => "[:dotGlobstarHead:]" === m0 ? dotGlobstarHead() : "[:dotGlobstarTail:]" === m0 ? dotGlobstarTail() : dotGlobstarSingle()
        );
      }
      if (isRootPath || isRelativePath)
        return (isNegated ? "!" : "") + //
        ignoreGlob.replace(/(?:\/\*\*)+$/u, "") + (opts.useDotGlobstars ? dotGlobstarTail() : "/**");
      return (isNegated ? "!" : "") + (opts.useDotGlobstars ? dotGlobstarHead() : "**/") + ignoreGlob.replace(/^(?:\*\*\/)+|(?:\/\*\*)+$/gu, "") + (opts.useDotGlobstars ? dotGlobstarTail() : "/**");
    };
    globToRegExp = (glob, options4) => {
      return makeRe(glob, options4);
    };
    globToRegExpString = (glob, options4) => {
      return makeRe(glob, options4).toString().replace(/^\/|\/[^/]*$/gu, "");
    };
    canonicalExtVariants = $fn\uA4FAmemo({ deep: true, maxSize: 12 }, (canonicals) => {
      canonicals = array2(canonicals);
      let exts2 = [];
      for (const [, group] of Object.entries(types())) {
        for (const [subgroupExts, subgroup] of Object.entries(group)) {
          if (canonicals.includes(subgroup.canonical)) {
            exts2 = exts2.concat(subgroupExts.split("|"));
          }
        }
      }
      return freeze([...new Set(exts2)]);
    });
    vsCodeLangExts = $fn\uA4FAmemo({ deep: true, maxSize: 12 }, (vsCodeLangs) => {
      vsCodeLangs = array2(vsCodeLangs);
      let exts2 = [];
      for (const [, group] of Object.entries(types())) {
        for (const [subgroupExts, subgroup] of Object.entries(group)) {
          if (vsCodeLangs.includes(subgroup.vsCodeLang)) {
            exts2 = exts2.concat(subgroupExts.split("|"));
          }
        }
      }
      return freeze([...new Set(exts2)]);
    });
    extsByCanonical = $fn\uA4FAmemo(() => {
      let exts2 = {};
      for (const [, group] of Object.entries(types())) {
        for (const [subgroupExts, subgroup] of Object.entries(group)) {
          exts2[subgroup.canonical] = exts2[subgroup.canonical] || [];
          exts2[subgroup.canonical] = exts2[subgroup.canonical].concat(subgroupExts.split("|"));
        }
      }
      for (const [canonical] of Object.entries(exts2)) {
        exts2[canonical] = [...new Set(exts2[canonical])];
      }
      return deepFreeze(exts2);
    });
    extsByVSCodeLang = $fn\uA4FAmemo({ deep: true, maxSize: 12 }, (options4) => {
      let exts2 = {};
      const opts = defaults({}, options4 || {}, { camelCase: false, enableCodeTextual: false });
      for (const [, group] of Object.entries(types())) {
        for (const [subgroupExts, subgroup] of Object.entries(group)) {
          let vsCodeLang = subgroup.vsCodeLang;
          if (opts.camelCase) {
            switch (vsCodeLang) {
              case "plaintext": {
                vsCodeLang = "plainText";
                break;
              }
              case "javascriptreact": {
                vsCodeLang = "javascriptReact";
                break;
              }
              case "typescriptreact": {
                vsCodeLang = "typescriptReact";
                break;
              }
              case "csharp": {
                vsCodeLang = "cSharp";
                break;
              }
              case "apacheconf": {
                vsCodeLang = "apacheConf";
                break;
              }
              case "hexEditor.hexedit": {
                vsCodeLang = "hexEditorHexEdit";
                break;
              }
            }
            vsCodeLang = camelCase(vsCodeLang);
          }
          exts2[vsCodeLang] = exts2[vsCodeLang] || [];
          exts2[vsCodeLang] = exts2[vsCodeLang].concat(subgroupExts.split("|"));
          if (opts.enableCodeTextual && !subgroup.binary) {
            const vsCodeLang2 = opts.camelCase ? "codeTextual" : "code-textual";
            exts2[vsCodeLang2] = exts2[vsCodeLang2] || [];
            exts2[vsCodeLang2] = exts2[vsCodeLang2].concat(subgroupExts.split("|"));
          }
        }
      }
      for (const [vsCodeLang] of Object.entries(exts2)) {
        exts2[vsCodeLang] = [...new Set(exts2[vsCodeLang])];
      }
      return deepFreeze(exts2);
    });
    jsTSExtsByDevGroup = $fn\uA4FAmemo(() => {
      return deepFreeze({
        // Standard JS/TS.
        sJavaScript: ["js"],
        sJavaScriptReact: ["jsx"],
        sTypeScript: ["ts"],
        sTypeScriptReact: ["tsx"],
        // Common JS/TS.
        cJavaScript: ["cjs"],
        cJavaScriptReact: ["cjsx"],
        cTypeScript: ["cts"],
        cTypeScriptReact: ["ctsx"],
        // Module JS/TS.
        mJavaScript: ["mjs"],
        mJavaScriptReact: ["mjsx"],
        mTypeScript: ["mts"],
        mTypeScriptReact: ["mtsx"],
        // All flavors of JSX/TSX.
        allJavaScriptReact: ["jsx", "mjsx", "cjsx"],
        allTypeScriptReact: ["tsx", "mtsx", "ctsx"],
        // All flavors of JS/TS.
        allJavaScript: ["js", "jsx", "mjs", "mjsx", "cjs", "cjsx"],
        allTypeScript: ["ts", "tsx", "mts", "mtsx", "cts", "ctsx"]
      });
    });
    defaultGitIgnores = $fn\uA4FAmemo(() => {
      let flat = [];
      for (const [, group] of Object.entries(defaultGitIgnoresByGroup())) {
        if (array(group)) {
          flat = flat.concat(group);
        } else {
          for (const [, subgroup] of Object.entries(group)) {
            flat = flat.concat(subgroup);
          }
        }
      }
      return freeze([...new Set(flat)]);
    });
    defaultNPMIgnores = $fn\uA4FAmemo(() => {
      let flat = [];
      for (const [, group] of Object.entries(defaultNPMIgnoresByGroup())) {
        if (array(group)) {
          flat = flat.concat(group);
        } else {
          for (const [, subgroup] of Object.entries(group)) {
            flat = flat.concat(subgroup);
          }
        }
      }
      return freeze([...new Set(flat)]);
    });
    defaultGitIgnoresByGroup = $fn\uA4FAmemo(() => {
      return deepFreeze({
        "Locals": [
          "._*",
          //
          ".~*",
          ".#*"
        ],
        "Envs": [
          ".envs",
          "*.env",
          // These needed by Dotenv Vault, and to prevent dotfile contamination.
          // i.e., Dotenv Vault appends these to ignore files if they don’t exist already.
          // Note: *we* don’t *actually* need these — the two rules above will suffice.
          // See: <https://o5p.me/mUn1tt> as a code reference.
          ".env*",
          ".flaskenv*",
          "!.env.project",
          "!.env.vault"
        ],
        "Logs": [
          "*.log",
          //
          "*.logs"
        ],
        "Backups": [
          "*~",
          //
          "*.bak"
        ],
        "Patches": [
          "*.rej",
          //
          "*.orig",
          "*.patch",
          "*.diff"
        ],
        "Editors": {
          "VS Code": [
            "*.code-*"
            //
            // '*.code-search',
            // '*.code-workspace',
          ],
          "IntelliJ": [
            ".idea"
            //
          ],
          "Vim": [
            ".*.swp"
            //
          ],
          "CTAGs": [
            "*.ctags"
            //
          ]
        },
        "Tooling": {
          "Dotenv": [
            ".env.me"
            //
          ],
          "TypeScript": [
            ".tscache",
            //
            "*.tsbuildinfo"
          ],
          "Vite": [
            ".vite",
            //
            ".vitest"
          ],
          "Wrangler": [
            ".wrangler",
            //
            ".dev.vars",
            ".dev.vars.*"
          ],
          "Rollup": [
            ".rollup"
            //
          ],
          "Webpack": [
            ".webpack"
            //
          ],
          "Linaria": [
            ".linaria-cache"
            //
          ],
          "SASS": [
            ".sass-cache"
            //
          ],
          "Docker": [
            ".docker"
            //
          ],
          "Vagrant": [
            ".vagrant"
            //
          ],
          "Elastic Beanstalk": [
            ".elasticbeanstalk"
            //
          ]
        },
        "Packages": {
          "Yarn": [
            ".yarn"
            //
          ],
          "Vendor": [
            "vendor"
            //
          ],
          "NodeJS": [
            "node_modules"
            //
          ],
          "JSPM": [
            "jspm_packages"
            //
          ],
          "Bower": [
            "bower_components"
            //
          ]
        },
        "Version Control": {
          "Git": [
            ".git"
            //
          ],
          "Subversion": [
            ".svn",
            //
            "_svn",
            ".svnignore"
          ],
          "Bazaar": [
            ".bzr",
            //
            ".bzrignore"
          ],
          "Mercurial": [
            ".hg",
            //
            ".hgignore"
          ]
        },
        "Operating Systems": {
          "Windows Files": [
            "Thumbs.db",
            //
            "ehthumbs.db",
            "Desktop.ini"
          ],
          "Windows Dirs": [
            "$RECYCLE.BIN"
            //
          ],
          "MacOS Files": [
            // '._*', Already listed above.
            "Icon\r",
            "*.icloud",
            ".DS_Store",
            ".disk_label",
            ".LSOverride",
            ".VolumeIcon.icns",
            ".com.apple.timemachine.*"
          ],
          "MacOS Dirs": [
            ".apdisk",
            //
            "*.icloud",
            ".fseventsd",
            ".AppleDB",
            ".AppleDesktop",
            ".AppleDouble",
            ".Trashes",
            ".TemporaryItems",
            ".Spotlight-V100",
            ".DocumentRevisions-V100",
            "Network Trash Folder",
            "Temporary Items"
          ]
        },
        "Dist": [
          "dist"
          //
        ]
      });
    });
    defaultNPMIgnoresByGroup = $fn\uA4FAmemo(() => {
      return deepFreeze({
        ...defaultGitIgnoresByGroup(),
        "npm:Dist": [
          "!dist"
          //
        ],
        "npm:Dots": [
          ".*",
          //
          "!.well-known"
        ],
        "npm:Configs": [
          "*.config.*",
          //
          "wrangler.*",
          "tsconfig.*",
          "dev-types.d.ts",
          "package.json",
          "config.gypi"
        ],
        "npm:Locks": [
          "yarn.lock",
          //
          "composer.lock",
          "package-lock.json"
        ],
        "npm:Src": [
          "src"
          //
        ],
        "npm:Dev": [
          "dev"
          //
        ],
        "npm:Sandbox": [
          "sandbox"
          //
        ],
        "npm:Examples": [
          "example",
          //
          "examples"
        ],
        "npm:Docs": [
          "doc",
          //
          "docs",
          "*.doc.*",
          "*.docs.*",
          "readme.*",
          "*.readme.*"
        ],
        "npm:Tests": [
          "test",
          //
          "tests",
          "*.test.*",
          "*.tests.*",
          "test-d",
          "tests-d",
          "*.test-d.*",
          "*.tests-d.*"
        ],
        "npm:Specs": [
          "spec",
          //
          "specs",
          "*.spec.*",
          "*.specs.*",
          "spec-d",
          "specs-d",
          "*.spec-d.*",
          "*.specs-d.*"
        ],
        "npm:Benchmarks": [
          "bench",
          //
          "benchmark",
          "benchmarks",
          "*.bench.*",
          "*.benchmark.*",
          "*.benchmarks.*"
        ]
        // There are also a few items always included and/or excluded by NPM.
        // See: <https://docs.npmjs.com/cli/v9/configuring-npm/package-json#files>
        // See: <https://docs.npmjs.com/cli/v8/using-npm/developers?v=true#keeping-files-out-of-your-package>
        // Other than `package.json`, `README`, `LICENSE|LICENCE` (forced inclusions), our rules already cover everything that NPM does.
      });
    });
    defaultGitNPMIgnoresByCategory = $fn\uA4FAmemo(() => {
      return deepFreeze({
        // Locals
        localIgnores: [
          "._*",
          //
          ".~*",
          ".#*"
        ],
        // Envs
        envIgnores: [
          ".envs",
          "*.env",
          // These needed by Dotenv Vault, and to prevent dotfile contamination.
          // i.e., Dotenv Vault appends these to ignore files if they don’t exist already.
          // Note: *we* don’t *actually* need these — the two rules above will suffice.
          // See: <https://o5p.me/mUn1tt> as a code reference.
          ".env*",
          ".flaskenv*",
          "!.env.project",
          "!.env.vault"
        ],
        // Logs
        logIgnores: [
          "*.log",
          //
          "*.logs"
        ],
        // Backups
        backupIgnores: [
          "*~",
          //
          "*.bak"
        ],
        // Patches
        patchIgnores: [
          "*.rej",
          //
          "*.orig",
          "*.patch",
          "*.diff"
        ],
        // Editors
        editorIgnores: [
          // VS Code
          "*.code-*",
          // '*.code-search',
          // '*.code-workspace',
          // IntelliJ
          ".idea",
          // Vim
          ".*.swp",
          // CTAGs
          "*.ctags"
        ],
        // Tooling
        toolingIgnores: [
          // Dotenv
          ".env.me",
          // TypeScript
          ".tscache",
          "*.tsbuildinfo",
          // Vite
          ".vite",
          ".vitest",
          // Wrangler
          ".wrangler",
          ".dev.vars",
          ".dev.vars.*",
          // Rollup
          ".rollup",
          // Webpack
          ".webpack",
          // Linaria
          ".linaria-cache",
          // SASS
          ".sass-cache",
          // Docker
          ".docker",
          // Vagrant
          ".vagrant",
          // Elastic Beanstalk
          ".elasticbeanstalk"
        ],
        // Packages
        pkgIgnores: [
          // Yarn
          ".yarn",
          // Vendor
          "vendor",
          // NodeJS
          "node_modules",
          // JSPM
          "jspm_packages",
          // Bower
          "bower_components"
        ],
        // Version Control
        vcsIgnores: [
          // Git
          ".git",
          // Subversion
          ".svn",
          "_svn",
          ".svnignore",
          // Bazaar
          ".bzr",
          ".bzrignore",
          // Mercurial
          ".hg",
          ".hgignore"
        ],
        // Operating Systems
        osIgnores: [
          // Windows Files
          "Thumbs.db",
          "ehthumbs.db",
          "Desktop.ini",
          // Windows Dirs
          "$RECYCLE.BIN",
          // MacOS Files
          "._*",
          "Icon\r",
          "*.icloud",
          ".DS_Store",
          ".disk_label",
          ".LSOverride",
          ".VolumeIcon.icns",
          ".com.apple.timemachine.*",
          // MacOS Dirs
          ".apdisk",
          "*.icloud",
          ".fseventsd",
          ".AppleDB",
          ".AppleDesktop",
          ".AppleDouble",
          ".Trashes",
          ".TemporaryItems",
          ".Spotlight-V100",
          ".DocumentRevisions-V100",
          "Network Trash Folder",
          "Temporary Items"
        ],
        // Dots
        dotIgnores: [
          ".*",
          //
          "!.well-known",
          // We don’t ignore `.well-known`.
          // This category covers everything else we have in `./.npmignore`
          // that isn’t already grouped in some other way by our exclusions.
          // Note that `[name].tsbuildinfo` can also appear as `.tsbuildinfo`.
          // So it’s technically a `.` file, or should be. We treat it as such.
          "*.tsbuildinfo"
          // Tracks progressive project builds (local only).
        ],
        // Types
        dtsIgnores: [
          "*.d.ts",
          //
          "*.d.tsx",
          "*.d.cts",
          "*.d.ctsx",
          "*.d.mts",
          "*.d.mtsx"
        ],
        // Configs
        configIgnores: [
          "*.config.*",
          //
          "wrangler.*",
          "tsconfig.*",
          "dev-types.d.ts",
          "package.json",
          "config.gypi"
        ],
        // Locks
        lockIgnores: [
          "yarn.lock",
          //
          "composer.lock",
          "package-lock.json"
        ],
        // Dev
        devIgnores: [
          "dev"
          //
        ],
        // Dev Files
        devDotFileIgnores: [
          // This one is already covered by our `dev` rule.
          // Listing it here for convenience, and to keep things DRY.
          "/dev/.files"
        ],
        // Dist
        distIgnores: [
          "dist"
          //
        ],
        // Sandbox
        sandboxIgnores: [
          "sandbox"
          //
        ],
        // Examples
        exampleIgnores: [
          "example",
          //
          "examples"
        ],
        // Docs
        docIgnores: [
          "doc",
          //
          "docs",
          "*.doc.*",
          "*.docs.*",
          "readme.*",
          "*.readme.*"
        ],
        // Tests
        testIgnores: [
          "test",
          //
          "tests",
          "*.test.*",
          "*.tests.*",
          "test-d",
          "tests-d",
          "*.test-d.*",
          "*.tests-d.*"
        ],
        // Specs
        specIgnores: [
          "spec",
          //
          "specs",
          "*.spec.*",
          "*.specs.*",
          "spec-d",
          "specs-d",
          "*.spec-d.*",
          "*.specs-d.*"
        ],
        // Benchmarks
        benchIgnores: [
          "bench",
          //
          "benchmark",
          "benchmarks",
          "*.bench.*",
          "*.benchmark.*",
          "*.benchmarks.*"
        ]
      });
    });
  }
});

// node_modules/@clevercanyon/utilities/dist/http.js
var requestHash, requestProperties, requestIsIncoming, requestHasSupportedMethod, requestTypeIsCacheable, requestIsFromUser, requestIsVia, requestPathIsInvalid, requestPathHasInvalidAppBaseURLOrigin, requestPathHasInvalidTrailingSlash, requestPathIsForbidden, requestPathIsDynamic, requestPathHasDynamicBase, requestPathIsPotentiallyDynamic, requestPathIsSEORelatedFile, requestPathIsInAccount, requestPathIsInAdmin, requestPathIsStatic, requestPathHasStaticExtension, requestPropertyDefaults, supportedRequestMethods, responseNeedsContentHeaders, responseNeedsContentBody, parseHeaders, cleanContentType, contentIsType, contentIsHTML, contentIsBinary, contentIsEncoded;
var init_http = __esm({
  "node_modules/@clevercanyon/utilities/dist/http.js"() {
    init_standalone();
    init_obj();
    init_env();
    init_app();
    init_crypto();
    init_url();
    init_str();
    init_is();
    init_json();
    init_fn();
    init_path();
    init_mime();
    init_to();
    requestHash = $fn\uA4FAmemo(2, async (request2) => {
      const url$1 = new URL(request2.url), defaults$1 = requestPropertyDefaults(), properties = requestProperties(request2), unsortedProps = defaults(properties, defaults$1);
      const sortByKey = (obj) => {
        return Object.fromEntries([...Object.entries(obj)].sort((a, b) => a[0].localeCompare(b[0])));
      }, sortEntriesByKey = (objEntries) => {
        return [...objEntries].sort((a, b) => a[0].localeCompare(b[0]));
      }, sortedProps = sortByKey(unsortedProps);
      sortedProps.url = {
        canonical: toCanonical(url$1),
        // Without ?query and/or #hash.
        queryVars: sortEntriesByKey([...url$1.searchParams.entries()])
      };
      sortedProps.headers = sortEntriesByKey([...request2.headers.entries()]);
      if (sortedProps.body) {
        sortedProps.body = await request2.clone().text();
      }
      if (object(sortedProps.cf)) {
        sortedProps.cf = sortByKey(sortedProps.cf);
      }
      if (object(sortedProps.c10n)) {
        if (object(sortedProps.c10n.serviceBinding)) {
          sortedProps.c10n.serviceBinding = sortByKey(sortedProps.c10n.serviceBinding);
        }
        if (object(sortedProps.c10n.kvOptions)) {
          sortedProps.c10n.kvOptions = sortByKey(sortedProps.c10n.kvOptions);
        }
        if (object(sortedProps.c10n.proxyOptions)) {
          if (object(sortedProps.c10n.proxyOptions.proxy)) {
            sortedProps.c10n.proxyOptions.proxy = sortByKey(sortedProps.c10n.proxyOptions.proxy);
          }
          sortedProps.c10n.proxyOptions = sortByKey(sortedProps.c10n.proxyOptions);
        }
        sortedProps.c10n = sortByKey(sortedProps.c10n);
      }
      return await sha1(stringify(sortedProps));
    });
    requestProperties = $fn\uA4FAmemo(2, (request2) => {
      const allProps = Object.fromEntries(allEntries(request2));
      return pick2(allProps, Object.keys(requestPropertyDefaults()));
    });
    requestIsIncoming = $fn\uA4FAmemo(2, (request2) => {
      let isIncoming = true;
      const nodeRequest = request2, cfwRequest = request2;
      if (isNode() && (!Object.hasOwn(nodeRequest, "socket") || !nodeRequest.socket)) {
        isIncoming = false;
      } else if (isCFW() && (!Object.hasOwn(cfwRequest.cf || {}, "httpProtocol") || !cfwRequest.cf?.httpProtocol)) {
        isIncoming = false;
      }
      return isIncoming;
    });
    requestHasSupportedMethod = $fn\uA4FAmemo(2, (request2) => {
      return supportedRequestMethods().includes(request2.method);
    });
    requestTypeIsCacheable = $fn\uA4FAmemo(2, (request2) => {
      if (!requestHasSupportedMethod(request2) || //
      !["HEAD", "GET"].includes(request2.method))
        return false;
      if (requestIsIncoming(request2))
        return true;
      let cacheMode;
      try {
        cacheMode = request2.cache;
      } catch {
      }
      const cacheControl = (request2.headers.get("cache-control") || "").toLowerCase();
      if (cacheMode && ["no-store", "no-cache", "reload"].includes(cacheMode)) {
        return false;
      }
      if (cacheControl && cacheControl.split(/\s*,\s*/u).some((v) => ["no-store", "no-cache", "private", "must-revalidate", "max-age=0", "s-maxage=0"].includes(v))) {
        return false;
      }
      if (isCFW()) {
        const cf = request2.cf, cacheTtl = cf?.cacheTtl, cacheTtlByStatus = cf?.cacheTtlByStatus;
        if (cacheTtl && cacheTtl <= -1) {
          return false;
        }
        if (cacheTtlByStatus && Object.values(cacheTtlByStatus).some((v) => v <= -1)) {
          return false;
        }
        const c10n = request2.c10n, kvCacheMaxAge = c10n?.kvOptions?.cacheMaxAge;
        if (kvCacheMaxAge && kvCacheMaxAge <= -1) {
          return false;
        }
      }
      return true;
    });
    requestIsFromUser = $fn\uA4FAmemo(2, (request2) => {
      if (request2.headers.has("authorization")) {
        return true;
      }
      if (!request2.headers.has("cookie")) {
        return false;
      }
      const cookie = request2.headers.get("cookie") || "";
      return /(?:^\s*|;\s*)(?:ut[mx]_)?(?:author|user|customer)(?:[_-][^=;]+)?=\s*"?[^";]/iu.test(cookie);
    });
    requestIsVia = $fn\uA4FAmemo(2, (request2, via) => {
      if (!request2.headers.has("x-via")) {
        return false;
      }
      const header = request2.headers.get("x-via") || "";
      return notEmpty(header) && new RegExp("(?:^|[,;])\\s*(?:" + escRegExp(via) + ")\\s*(?:$|[,;])", "ui").test(header);
    });
    requestPathIsInvalid = $fn\uA4FAmemo(2, (request2, _url) => {
      const url$1 = _url || parse2(request2.url);
      if ("/" === url$1.pathname)
        return false;
      return /\\|\/{2,}|\.{2,}/iu.test(url$1.pathname);
    });
    requestPathHasInvalidAppBaseURLOrigin = $fn\uA4FAmemo(2, (request2, _url) => {
      const url$1 = _url || parse2(request2.url);
      const appBaseURL = baseURL({ parsed: true });
      if (url$1.host !== appBaseURL.host) {
        return true;
      }
      return url$1.protocol !== appBaseURL.protocol;
    });
    requestPathHasInvalidTrailingSlash = $fn\uA4FAmemo(2, (request2, _url) => {
      const url$1 = _url || parse2(request2.url);
      if ("/" === url$1.pathname)
        return false;
      return url$1.pathname.endsWith("/");
    });
    requestPathIsForbidden = $fn\uA4FAmemo(2, (request2, _url) => {
      const url$1 = _url || parse2(request2.url);
      if ("/" === url$1.pathname)
        return false;
      if (/\/\./iu.test(url$1.pathname) && !/^\/\.well-known(?:$|\/)/iu.test(url$1.pathname)) {
        return true;
      }
      if (/(?:~|[^/.]\.(?:bak|backup|copy|log|old|te?mp))(?:$|\/)/iu.test(url$1.pathname)) {
        return true;
      }
      if (/\/(?:[^/]*[._-])?(?:private|cache|logs?|te?mp)(?:$|\/)/iu.test(url$1.pathname)) {
        return true;
      }
      if (/\/(?:yarn|vendor|node[_-]modules|jspm[_-]packages|bower[_-]components)(?:$|\/)/iu.test(url$1.pathname)) {
        return true;
      }
      return false;
    });
    requestPathIsDynamic = $fn\uA4FAmemo(2, (request2, url3) => {
      return requestPathHasDynamicBase(request2, url3) || requestPathIsPotentiallyDynamic(request2, url3) || !requestPathHasStaticExtension(request2, url3);
    });
    requestPathHasDynamicBase = $fn\uA4FAmemo(2, (request2, _url) => {
      let url$1 = _url || parse2(request2.url);
      url$1 = tryFn(() => removeAppBasePath(url$1), url$1)();
      if ("/" === url$1.pathname)
        return false;
      return /^\/(?:api)(?:$|\/)/iu.test(url$1.pathname);
    });
    requestPathIsPotentiallyDynamic = $fn\uA4FAmemo(2, (request2, _url) => {
      const url$1 = _url || parse2(request2.url);
      if ("/" === url$1.pathname)
        return false;
      return requestPathIsSEORelatedFile(request2, url$1) && !/\/favicon\.ico$/iu.test(url$1.pathname);
    });
    requestPathIsSEORelatedFile = $fn\uA4FAmemo(2, (request2, _url) => {
      const url$1 = _url || parse2(request2.url);
      if ("/" === url$1.pathname)
        return false;
      return /\/(?:\.well[-_]known\/|sitemaps\/.*\.xml|(?:[^/]+[-_])?sitemap(?:[-_][^/]+)?\.xml|manifest\.json|(?:ads|humans|robots)\.txt|favicon\.ico)$/iu.test(url$1.pathname);
    });
    requestPathIsInAccount = $fn\uA4FAmemo(2, (request2, _url) => {
      const url$1 = _url || parse2(request2.url);
      if ("/" === url$1.pathname)
        return false;
      return /\/(?:[^/]+[-_])?account(?:[-_][^/]+)?(?:$|\/)/iu.test(url$1.pathname);
    });
    requestPathIsInAdmin = $fn\uA4FAmemo(2, (request2, _url) => {
      const url$1 = _url || parse2(request2.url);
      if ("/" === url$1.pathname)
        return false;
      return /\/(?:[^/]+[-_])?admin(?:[-_][^/]+)?(?:$|\/)/iu.test(url$1.pathname);
    });
    requestPathIsStatic = $fn\uA4FAmemo(2, (request2, url3) => {
      return !requestPathIsDynamic(request2, url3);
    });
    requestPathHasStaticExtension = $fn\uA4FAmemo(2, (request2, _url) => {
      const url$1 = _url || parse2(request2.url);
      if ("/" === url$1.pathname)
        return false;
      return hasStaticExt(url$1.pathname);
    });
    requestPropertyDefaults = $fn\uA4FAmemo(() => {
      return freeze({
        url: "",
        cache: "default",
        credentials: "same-origin",
        destination: "",
        integrity: "",
        keepalive: false,
        method: "GET",
        mode: "cors",
        redirect: "follow",
        referrer: "about:client",
        referrerPolicy: "",
        isReloadNavigation: false,
        isHistoryNavigation: false,
        cf: void 0,
        // Cloudflare data.
        c10n: void 0,
        // Our own data.
        headers: new Headers(),
        body: null,
        bodyUsed: false
      });
    });
    supportedRequestMethods = () => ["OPTIONS", "HEAD", "GET", "POST", "PUT", "PATCH", "DELETE"];
    responseNeedsContentHeaders = $fn\uA4FAmemo(2, (request2, responseStatus, responseBody) => {
      return requestHasSupportedMethod(request2) && !["OPTIONS"].includes(request2.method) && ![101, 103, 204, 205, 304].includes(responseStatus) && !nul(responseBody);
    });
    responseNeedsContentBody = $fn\uA4FAmemo(2, (request2, responseStatus, responseBody) => {
      return requestHasSupportedMethod(request2) && !["OPTIONS", "HEAD"].includes(request2.method) && ![100, 101, 102, 103, 204, 205, 304].includes(responseStatus) && !nul(responseBody);
    });
    parseHeaders = (parseable) => {
      if (parseable instanceof Headers || array(parseable)) {
        return new Headers(parseable);
      }
      const headers = new Headers();
      if (object(parseable)) {
        for (let [name, value] of Object.entries(parseable)) {
          headers.set(name, value);
        }
      } else if (string2(parseable)) {
        const lines = parseable.split(/[\r\n]+/u);
        for (let i = 0, name = ""; i < lines.length; i++) {
          const line = lines[i];
          if (name && [" ", "	"].includes(line[0])) {
            headers.set(name, ((headers.get(name) || "") + " " + line.trim()).trim());
            continue;
          }
          if (!line.includes(":"))
            continue;
          name = line.slice(0, line.indexOf(":")).toLowerCase().trim();
          const value = line.slice(line.indexOf(":") + 1).trim();
          if (!name)
            continue;
          if (headers.has(name)) {
            headers.append(name, value);
          } else
            headers.set(name, value);
        }
      }
      return headers;
    };
    cleanContentType = $fn\uA4FAmemo(2, (headers) => {
      return typeClean(parseHeaders(headers).get("content-type") || "");
    });
    contentIsType = $fn\uA4FAmemo(2, (headers, extTypes) => {
      const cleanType$1 = cleanContentType(headers);
      return array2(extTypes).map(
        (extType) => extType.toLowerCase().split(/\s*;\s*/u)[0].trim()
      ).some((extType) => {
        return cleanType$1 === extType || // e.g., `text/html`, `text/plain`.
        cleanType$1 === cleanType("." + lTrim(extType, "."));
      });
    });
    contentIsHTML = $fn\uA4FAmemo(2, (headers) => {
      return contentIsType(headers, "html");
    });
    contentIsBinary = $fn\uA4FAmemo(2, (headers) => {
      return typeIsBinary(cleanContentType(headers));
    });
    contentIsEncoded = $fn\uA4FAmemo(2, (headers) => {
      return !["", "none"].includes((parseHeaders(headers).get("content-encoding") || "").toLowerCase());
    });
  }
});

// node_modules/@clevercanyon/utilities/dist/resources/classes/fetcher.js
var Fetcher, t\uA4FAapplication\u2CC7, t\uA4FAimage\u2CC7, t\uA4FAjson, t\uA4FAplain, t\uA4FAsvg, t\uA4FAtext\u2CC7, t\uA4FAxml, cacheableResponseTypes, getClass5;
var init_fetcher = __esm({
  "node_modules/@clevercanyon/utilities/dist/resources/classes/fetcher.js"() {
    init_utility();
    init_str();
    init_env();
    init_obp();
    init_json();
    init_http();
    init_is();
    init_mime();
    init_app();
    t\uA4FAapplication\u2CC7 = "application/";
    t\uA4FAimage\u2CC7 = "image/";
    t\uA4FAjson = "json";
    t\uA4FAplain = "plain";
    t\uA4FAsvg = "svg";
    t\uA4FAtext\u2CC7 = "text/";
    t\uA4FAxml = "xml";
    cacheableResponseTypes = [
      t\uA4FAtext\u2CC7 + t\uA4FAplain,
      t\uA4FAapplication\u2CC7 + t\uA4FAjson,
      t\uA4FAapplication\u2CC7 + "ld+" + t\uA4FAjson,
      t\uA4FAimage\u2CC7 + t\uA4FAsvg + "+" + t\uA4FAxml,
      t\uA4FAapplication\u2CC7 + t\uA4FAxml,
      t\uA4FAtext\u2CC7 + t\uA4FAxml
    ];
    getClass5 = () => {
      if (Fetcher)
        return Fetcher;
      Fetcher = class extends getClass2() {
        /**
         * Global object path.
         */
        globalObp;
        /**
         * Cloudflare worker request context data.
         */
        cfw;
        /**
         * Global via `globalObp`.
         */
        global;
        /**
         * Public fetch interface.
         */
        fetch;
        /**
         * Object constructor.
         *
         * @param props Props or instance.
         */
        constructor(props) {
          super();
          props = props || {};
          this.globalObp = props.globalObp || obpPartSafe($pkgName) + ".fetcher";
          this.cfw = props.cfw;
          if (isSSR()) {
            this.global = { cache: {} };
          } else {
            this.global = get(globalThis, this.globalObp, {});
            this.global.cache = this.global.cache || {};
          }
          this.fetch = (...args) => this.fetcher(...args);
        }
        /**
         * Converts global into embeddable script code.
         *
         * @returns Global as embeddable script code; i.e., for SSR.
         */
        globalToScriptCode() {
          const globalObpScriptCode = toScriptCode(this.globalObp);
          let scriptCode = globalObpScriptCode.init;
          scriptCode += " " + globalObpScriptCode.set + " = " + stringify({ cache: this.global.cache }) + ";";
          return scriptCode;
        }
        /**
         * Wraps global native {@see fetch()}.
         *
         * @param   args Same as global native {@see fetch()}.
         *
         * @returns      Same as global native {@see fetch()}. However, this will only return a `content-type` header
         *   when a request is either read from, or written to, a cache entry. In such a case, we discard all other
         *   headers. Otherwise, for requests not read from or written to a cache entry, this returns all headers.
         */
        async fetcher(...args) {
          const request2 = new Request(...args), fetch2 = this.cfw ? this.cfw.fetch : globalThis.fetch;
          if (!requestTypeIsCacheable(request2))
            return fetch2(request2);
          const cacheKey = await requestHash(request2);
          if (Object.hasOwn(this.global.cache, cacheKey)) {
            const globalCacheEntry2 = this.global.cache[cacheKey];
            return new Response(globalCacheEntry2.body, globalCacheEntry2.init);
          }
          if (isWeb())
            return fetch2(request2);
          let response2, responseBody = null, error$1;
          try {
            response2 = await fetch2(request2);
          } catch (thrown) {
            response2 = new Response(null, {
              status: 500,
              // Internal server error.
              // To optimize bundle size, intentionally not using `$http.responseStatusText()`.
              statusText: "Internal Server Error" + (error(thrown) ? "; " + thrown.message : "")
            });
            error$1 ??= Error("Fetch error" + (error(thrown) ? "; " + thrown.message : "") + ".", { cause: "try:catch" });
          }
          if (!nul(response2.body)) {
            const responseContentType = response2.headers.get("content-type") || "", responseCleanContentType = typeClean(responseContentType);
            if (!cacheableResponseTypes.includes(responseCleanContentType)) {
              error$1 ??= Error("Uncacheable HTTP response type: " + responseCleanContentType + ".", { cause: "response:type" });
            } else {
              responseBody = await response2.text();
            }
          }
          if (error$1 && this.cfw) {
            void this.cfw.auditLogger.warn("Fetcher error.", { request: request2, response: response2, error: error$1 });
          }
          const globalCacheEntry = {
            body: responseBody,
            init: {
              status: response2.status,
              statusText: response2.statusText,
              headers: [...response2.headers.entries()]
            },
            ...error$1 ? { error: { message: error$1.message, cause: String(error$1.cause) } } : {}
          };
          this.global.cache[cacheKey] = globalCacheEntry;
          return new Response(globalCacheEntry.body, globalCacheEntry.init);
        }
      };
      return Object.defineProperty(Fetcher, "name", {
        ...Object.getOwnPropertyDescriptor(Fetcher, "name"),
        value: "Fetcher"
      });
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/data.js
import { jsx } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext, Component } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject, useData, useFetcher, defaultFetcher, defaultLazyCPs, fetcherGlobalToScriptCodeReplacementCode;
var init_data = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/data.js"() {
    init_fetcher();
    ContextObject = createContext({});
    useData = () => useContext(ContextObject);
    useFetcher = () => useContext(ContextObject).state.fetcher;
    defaultFetcher = (c9rProps) => {
      return new (getClass5())(c9rProps);
    };
    defaultLazyCPs = () => {
      return { counter: -1, promises: [] };
    };
    fetcherGlobalToScriptCodeReplacementCode = () => {
      return "'{%-_{%-fetcher.globalToScriptCode-%}_-%}';";
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/location.js
import { jsx as jsx2 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext2 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext as useContext2, useReducer, useMemo, useEffect } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject2, useLocation;
var init_location = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/location.js"() {
    ContextObject2 = createContext2({});
    useLocation = () => useContext2(ContextObject2);
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/router.js
import { jsx as jsx3, Fragment } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext3, options, toChildArray, cloneElement, createElement } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext as useContext3, useRef, useMemo as useMemo2, useReducer as useReducer2, useCallback, useLayoutEffect } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
function Router(props = {}) {
  const { children, ...restProps } = props;
  return /* @__PURE__ */ jsx3(RouterCore, { ...pick2(restProps, namedPropKeys()), children });
}
function Route(props) {
  const { component: Route2 } = props;
  return /* @__PURE__ */ jsx3(Route2, { ...props });
}
function RouterCore(_props) {
  const thisObj = this;
  const willUnmount = useRef(false);
  const parentContext = useRef({});
  parentContext.current = useRoute();
  const props = useRef({});
  props.current = _props;
  const childArray = useRef([]);
  const { children: _children } = props.current;
  childArray.current = useMemo2(() => toChildArray(_children), [_children]);
  const { state: _locationState } = useLocation(), [ticks, updateTicks] = useReducer2((c) => c + 1 >= 1e4 ? 1 : c + 1, 0);
  const locationState = useRef({});
  locationState.current = _locationState;
  const previousRoute = useRef(), previousRouteSnapshot = useRef();
  previousRouteSnapshot.current = previousRoute.current;
  previousRoute.current = null;
  const currentRouteCounter = useRef(0), currentRouteIsLoading = useRef(false), currentRouteIsLoadingEffects = useRef(false), currentRouteContext = useRef(), currentRoute = useRef(), currentRouteHasEverBeenHydrated = useRef(false), currentRoutePendingHydrationDOM = useRef();
  currentRouteIsLoading.current = false;
  thisObj.__c = useCallback((thrownPromise) => {
    currentRouteIsLoading.current = currentRouteIsLoadingEffects.current = true;
    loadingStackSize++;
    previousRoute.current = previousRouteSnapshot.current;
    const currentRouteCounterSnapshot = currentRouteCounter.current;
    void thrownPromise.then(() => {
      loadingStackSize = Math.max(0, loadingStackSize - 1);
      if (currentRouteCounterSnapshot === currentRouteCounter.current) {
        previousRoute.current = null;
        if (willUnmount.current) {
          currentRouteIsLoading.current = currentRouteIsLoadingEffects.current = false;
          if (!locationState.current.isInitialHydration && 0 === loadingStackSize && isWeb()) {
            cancelLoadingHandler(), cancelLoadedHandler();
            loadedHandler = afterNextFrame(() => xPreactAppLoading().remove());
          }
        } else
          void resolvedPromise.then(updateTicks);
      }
    });
  }, []);
  currentRoute.current = useMemo2(() => {
    let defaultChildVNode;
    let matchingChildVNode;
    if (thisObj.__v && thisObj.__v?.__k) {
      thisObj.__v.__k.reverse();
    }
    const c = currentRouteCounter.current;
    currentRouteCounter.current = c + 1 >= 1e4 ? 1 : c + 1;
    previousRouteSnapshot.current = currentRoute.current;
    currentRouteContext.current = {
      // These are `./` relative to base.
      // These are also relative `./` to parent route.
      path: parentContext.current.restPath || locationState.current.path,
      pathQuery: parentContext.current.restPathQuery || locationState.current.pathQuery,
      // These are `./` relative to base.
      // These are also relative `./` to parent route.
      restPath: "",
      // Potentially populated by `pathMatchesRoutePattern()`.
      restPathQuery: "",
      // Potentially populated by `pathMatchesRoutePattern()`.
      // Query variables.
      query: locationState.current.query,
      // Always the same query vars across all nested routes.
      queryVars: locationState.current.queryVars,
      // Always the same query vars across all nested routes.
      // Path parameter keys/values.
      params: {}
      // Potentially populated by `pathMatchesRoutePattern()`.
    };
    childArray.current.some((childVNode) => {
      let routeContext = currentRouteContext.current;
      let matchingRouteContext;
      if (matchingRouteContext = pathMatchesRoutePattern(routeContext.path, childVNode.props.path || "", routeContext)) {
        return Boolean(matchingChildVNode = cloneElement(childVNode, currentRouteContext.current = matchingRouteContext));
      }
      if (!defaultChildVNode && childVNode.props.default) {
        defaultChildVNode = cloneElement(childVNode, currentRouteContext.current);
      }
      return false;
    });
    return /* @__PURE__ */ jsx3(RouteContextObject.Provider, { value: currentRouteContext.current, children: matchingChildVNode || defaultChildVNode });
  }, [parentContext.current, childArray.current.length, locationState.current]);
  if (isWeb()) {
    const hydrationEffects = useCallback(() => {
      if (currentRouteHasEverBeenHydrated.current)
        return;
      const dom = thisObj.__v?.__e || null;
      if (currentRouteIsLoading.current) {
        currentRoutePendingHydrationDOM.current ??= dom;
      } else {
        const hydrationDOM = currentRoutePendingHydrationDOM.current;
        if (hydrationDOM && hydrationDOM !== dom)
          hydrationDOM.remove();
        currentRoutePendingHydrationDOM.current = null;
        currentRouteHasEverBeenHydrated.current = true;
      }
    }, []);
    const effectsWhenLoading = useCallback(() => {
      if (!currentRouteIsLoading.current)
        return;
      const { isInitialHydration } = locationState.current;
      cancelAllLoadEndHandlers();
      if (!isInitialHydration && 1 === loadingStackSize) {
        cancelLoadingHandler(), resetXPreactAppTransition();
        loadingHandler = afterNextFrame(() => void body().appendChild(xPreactAppLoading()));
      }
    }, []);
    const effectsWhenLoaded = useCallback(() => {
      if (currentRouteIsLoading.current)
        return;
      if (!currentRouteIsLoadingEffects.current)
        return;
      currentRouteIsLoadingEffects.current = false;
      const { isInitialHydration } = locationState.current;
      cancelAllLoadEndHandlers();
      if (!isInitialHydration && 0 === loadingStackSize) {
        cancelLoadingHandler(), resetXPreactAppTransition();
        loadedHandler = afterNextFrame(() => xPreactAppLoading().remove());
      }
    }, []);
    const effectsWhenNotLoading = useCallback(() => {
      if (currentRouteIsLoading.current)
        return;
      const { isInitialHydration, wasPushed } = locationState.current;
      if (!isInitialHydration && wasPushed && 0 === loadingStackSize) {
        cancelScrollHandlers(), // Cancels any in-progress.
        scrollWheelHandler = onWheelEnd(() => {
          scrollHandler = afterNextFrame(() => {
            document.activeElement?.blur();
            const currentHash$1 = currentHash();
            const currentHashElement = currentHash$1 ? query('[id="' + escSelector(currentHash$1) + '"]') : null;
            if (currentHashElement) {
              currentHashElement.scrollIntoView({ behavior: "auto" });
            } else
              scrollTo({ top: 0, left: 0, behavior: "instant" });
          });
        });
      }
      if (!isInitialHydration && wasPushed && 0 === loadingStackSize) {
        cancelTransitionHandlers(), // Cancels any in-progress transition handlers.
        xPreactAppTransition(), // Triggers a transition animation.
        //
        transitionTimeout = setTimeout(() => {
          cancelTransitionHandlers(), // Cancels any in-progress.
          transitionTimeoutHandler = afterNextFrame(() => resetXPreactAppTransition());
        }, 150);
      }
    }, []);
    useLayoutEffect(() => {
      hydrationEffects(), effectsWhenLoading(), effectsWhenLoaded(), effectsWhenNotLoading();
    }, [locationState.current, ticks]);
    this.componentWillUnmount = useCallback(() => void (willUnmount.current = true), []);
  }
  return /* @__PURE__ */ jsx3(Fragment, { children: [createElement(RenderRefRoute, { r: currentRoute }), createElement(RenderRefRoute, { r: previousRoute })] });
}
function RenderRefRoute({
  r
  // Route reference.
}) {
  return r.current;
}
var RouteContextObject, useRoute, namedPropKeys, pathMatchesRoutePattern, resolvedPromise, loadingStackSize, loadingHandler, loadedHandler, scrollWheelHandler, scrollHandler, transitionTimeout, transitionTimeoutHandler, cancelLoadingHandler, cancelLoadedHandler, cancelScrollHandlers, cancelTransitionHandlers, cancelAllLoadEndHandlers, resetXPreactAppTransition, xPreactAppTransition, xPreactAppLoading, prevErrorHandler;
var init_router = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/router.js"() {
    init_standalone();
    init_location();
    init_is();
    init_obj();
    init_env();
    init_dom();
    init_str();
    init_url();
    RouteContextObject = createContext3({});
    useRoute = () => useContext3(RouteContextObject);
    namedPropKeys = () => [];
    pathMatchesRoutePattern = (path15, routePattern, routeContext) => {
      if (!path15 || !routePattern || !routeContext) {
        return;
      }
      const pathParts = lTrim(path15, "./").split("/").filter(Boolean);
      const routePatternParts = lTrim(routePattern, "./").split("/").filter(Boolean);
      const newRouteContext = cloneDeep(routeContext);
      for (let i = 0; i < Math.max(pathParts.length, routePatternParts.length); i++) {
        const pathPart = pathParts[i] || "";
        const routePatternPart = routePatternParts[i] || "";
        const [
          unused\uA4FA$0,
          // Using `$1...$3` only.
          routePatternPartValueIsParam,
          // `$1`.
          routePatternPartValue,
          // `$2`.
          routePatternPartFlag
          // `$3`.
        ] = routePatternPart.match(/^(:?)(.*?)([+*?]?)$/u) || [];
        if (routePatternPartValueIsParam) {
          if (!routePatternPartValue) {
            return;
          }
          if (!pathPart && !["?", "*"].includes(routePatternPartFlag)) {
            return;
          }
          if (["+", "*"].includes(routePatternPartFlag)) {
            newRouteContext.params[routePatternPartValue] = pathParts.slice(i).map(decodeURIComponent).join("/");
            break;
          } else if (pathPart) {
            newRouteContext.params[routePatternPartValue] = decodeURIComponent(pathPart);
          }
        } else {
          if (!routePatternPartValue && "*" === routePatternPartFlag) {
            newRouteContext.restPath = "./" + pathParts.slice(i).join("/");
            newRouteContext.restPathQuery = newRouteContext.restPath + newRouteContext.query;
            break;
          }
          if (pathPart === routePatternPartValue)
            continue;
          return;
        }
      }
      return newRouteContext;
    };
    resolvedPromise = Promise.resolve();
    loadingStackSize = 0;
    cancelLoadingHandler = () => loadingHandler?.cancel();
    cancelLoadedHandler = () => loadedHandler?.cancel();
    cancelScrollHandlers = () => (scrollWheelHandler?.cancel(), scrollHandler?.cancel());
    cancelTransitionHandlers = () => (clearTimeout(transitionTimeout), transitionTimeoutHandler?.cancel());
    cancelAllLoadEndHandlers = () => (cancelLoadedHandler(), cancelScrollHandlers(), cancelTransitionHandlers());
    resetXPreactAppTransition = () => xPreactAppTransition(false);
    xPreactAppTransition = (enable = true) => {
      xPreactApp().classList[enable ? "add" : "remove"]("animate-subtle-fade-in");
    };
    xPreactAppLoading = $fn\uA4FAmemo(() => {
      const t\uA4FAla = "la", t\uA4FAsvg3 = "svg", t\uA4FAspan = "span", t\uA4FArect = "rect", t\uA4FArole = "role", t\uA4FAclass = "class", t\uA4FAstyle = "style", t\uA4FAla1 = t\uA4FAla + "1", t\uA4FAla2 = t\uA4FAla + "2", t\uA4FAla3 = t\uA4FAla + "3", t\uA4FAla4 = t\uA4FAla + "4", t\uA4FAx1px = "x:1px;", t\uA4FAy1px = "y:1px", t\uA4FAx13px = "x:13px;", t\uA4FAy13px = "y:13px", t\uA4FAinnerHTML = "innerHTML", t\uA4FAanimation = "animation", t\uA4FAx13pxy1px = t\uA4FAx13px + t\uA4FAy1px, t\uA4FAx13pxy13px = t\uA4FAx13px + t\uA4FAy13px, t\uA4FAx1pxy13px = t\uA4FAx1px + t\uA4FAy13px, t\uA4FAx1pxy1px = t\uA4FAx1px + t\uA4FAy1px, t\uA4FAanimation\u1C7Cdelay = t\uA4FAanimation + "-delay", t\uA4FArectAtts = 'x="1" y="1" rx="1" width="10" height="10"';
      return create("x-preact-app-loading", {
        [t\uA4FArole]: "status",
        [t\uA4FAstyle]: "z-index: 2147483647",
        // Maximum allowed value on 32-bit systems.
        [t\uA4FAclass]: "flex place-content-center fixed inset-0 w-screen h-screen bg-color-basic/75 pointer-events-none animate-fade-in",
        [t\uA4FAinnerHTML]: `<${t\uA4FAspan} ${t\uA4FAclass}="sr-only">Loading</${t\uA4FAspan}><${t\uA4FAsvg3} aria-hidden="true" ${t\uA4FAclass}="h-auto w-10 stroke-color-primary-fg fill-color-primary" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/${t\uA4FAsvg3}"><${t\uA4FAstyle}>.${t\uA4FAla4}{${t\uA4FAanimation}:${t\uA4FAla1} 2.4s -2.4s linear infinite}.${t\uA4FAla2}{${t\uA4FAanimation\u1C7Cdelay}:-1.6s}.${t\uA4FAla3}{${t\uA4FAanimation\u1C7Cdelay}:-.8s}@keyframes ${t\uA4FAla1}{8.33%{${t\uA4FAx13pxy1px}}25%{${t\uA4FAx13pxy1px}}33.3%{${t\uA4FAx13pxy13px}}50%{${t\uA4FAx13pxy13px}}58.33%{${t\uA4FAx1pxy13px}}75%{${t\uA4FAx1pxy13px}}83.33%{${t\uA4FAx1pxy1px}}}</${t\uA4FAstyle}><${t\uA4FArect} ${t\uA4FAclass}="${t\uA4FAla4}" ${t\uA4FArectAtts}></${t\uA4FArect}><${t\uA4FArect} ${t\uA4FAclass}="${t\uA4FAla4} ${t\uA4FAla2}" ${t\uA4FArectAtts}></${t\uA4FArect}><${t\uA4FArect} ${t\uA4FAclass}="${t\uA4FAla4} ${t\uA4FAla3}" ${t\uA4FArectAtts}></${t\uA4FArect}></${t\uA4FAsvg3}>`
      });
    });
    prevErrorHandler = options.__e;
    options.__e = (...args) => {
      let error2 = args[0], newVNode = args[1], oldVNode = args[2];
      if (promise2(error2) && object(newVNode)) {
        let v = newVNode;
        while (v = v.__) {
          if (v.__c && v.__c.__c) {
            if (null == newVNode.__e) {
              newVNode.__e = oldVNode?.__e;
              newVNode.__k = oldVNode?.__k;
            }
            if (!newVNode.__k)
              newVNode.__k = [];
            v.__c.__c(error2, newVNode);
            return;
          }
        }
      }
      if (_function(prevErrorHandler)) {
        prevErrorHandler(...args);
      }
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/resources/preact/apis/ssr.js
var ssr_exports = {};
__export(ssr_exports, {
  renderToString: () => renderToString
});
import { renderToStringAsync } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact-render-to-string/dist/index.mjs";
import { options as options2, createElement as createElement2, cloneElement as cloneElement2 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
async function renderToString(componentOrVNode, options$1) {
  if (!isSSR())
    throw Error("auyKXPAm");
  options2.errorBoundaries = true;
  let vNode2;
  const opts = defaults({}, options$1 || {}, { props: {} });
  if (_function(componentOrVNode)) {
    vNode2 = createElement2(componentOrVNode, opts.props);
  } else {
    vNode2 = cloneElement2(componentOrVNode, opts.props);
  }
  return await renderToStringAsync(vNode2);
}
var init_ssr = __esm({
  "node_modules/@clevercanyon/utilities/dist/resources/preact/apis/ssr.js"() {
    init_env();
    init_obj();
    init_is();
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/404.js
var __exports = {};
__export(__exports, {
  StandAlone: () => StandAlone
});
import { jsxs, jsx as jsx4 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
var StandAlone;
var init__ = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/404.js"() {
    init_env();
    init_preact();
    StandAlone = (props = {}) => {
      if (!isSSR())
        throw Error("a7uu3pZV");
      return /* @__PURE__ */ jsxs("html", { class: classes(props), lang: "en-US", dir: "ltr", children: [
        /* @__PURE__ */ jsxs("head", { children: [
          /* @__PURE__ */ jsx4("meta", { charSet: "utf-8" }),
          /* @__PURE__ */ jsx4("meta", { name: "robots", content: "noindex, nofollow" }),
          /* @__PURE__ */ jsx4("meta", { name: "viewport", content: "width=device-width, initial-scale=1, minimum-scale=1" }),
          /* @__PURE__ */ jsx4("title", { children: "404 Error: Not Found" }),
          /* @__PURE__ */ jsx4("meta", { name: "description", content: "The resource you are looking for could not be found." }),
          /* @__PURE__ */ jsx4("link", { rel: "stylesheet", href: "https://r2.hop.gdn/assets/404/index.css", media: "all" })
        ] }),
        /* @__PURE__ */ jsxs("body", { children: [
          /* @__PURE__ */ jsx4("div", { class: "noise" }),
          /* @__PURE__ */ jsx4("div", { class: "overlay" }),
          /* @__PURE__ */ jsxs("div", { class: "terminal", children: [
            /* @__PURE__ */ jsxs("h1", { children: [
              "404 Error: ",
              /* @__PURE__ */ jsx4("span", { class: "error-message", children: "Not Found" })
            ] }),
            /* @__PURE__ */ jsx4("p", { class: "output", children: "The resource you are looking for could not be found." }),
            /* @__PURE__ */ jsxs("p", { class: "output", children: [
              "Please go back or ",
              /* @__PURE__ */ jsx4("a", { href: "/", children: "return to the front page" }),
              "."
            ] }),
            /* @__PURE__ */ jsx4("p", { class: "output", children: "Good luck." })
          ] })
        ] })
      ] });
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/resources/preact/apis/iso.js
var iso_exports = {};
__export(iso_exports, {
  hydrateSPA: () => hydrateSPA,
  lazyComponent: () => lazyComponent,
  lazyLoader: () => lazyLoader,
  lazyRoute: () => lazyRoute,
  renderSPA: () => renderSPA
});
import { jsx as jsx5 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { hydrate, render, createContext as createContext4, createElement as createElement3 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useReducer as useReducer3, useRef as useRef2, useContext as useContext4 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var renderSPA, hydrateSPA, lazyLoader, lazyComponent, lazyRoute;
var init_iso = __esm({
  "node_modules/@clevercanyon/utilities/dist/resources/preact/apis/iso.js"() {
    init_data();
    init_router();
    init_env();
    init_obj();
    init_path();
    init_is();
    init_str();
    init_ssr();
    init_dom();
    renderSPA = async (options4) => {
      if (!isSSR())
        throw Error("kTqymmPe");
      const opts = defaults({}, options4 || {}, { props: {} }), { request: request2, appManifest, App, cfw, props } = opts, httpState = props.httpState || {}, url3 = props.url || request2.url, cspNonce2 = props.cspNonce || request2.headers.get("x-csp-nonce") || "", fetcher = props.fetcher || defaultFetcher({ cfw }), lazyCPs = props.lazyCPs || defaultLazyCPs();
      let styleBundle, scriptBundle;
      for (const htmlExt of canonicalExtVariants("html")) {
        const htmlEntry = appManifest["index." + htmlExt];
        if (array(htmlEntry?.css) && string2(htmlEntry?.css?.[0]) && string2(htmlEntry?.file)) {
          styleBundle = "./" + lTrim(htmlEntry.css[0], "./");
          scriptBundle = "./" + lTrim(htmlEntry.file, "./");
          break;
        }
      }
      if (!styleBundle || "./" === styleBundle)
        throw Error("wSTJgH4k");
      if (!scriptBundle || "./" === scriptBundle)
        throw Error("M6spfQqT");
      const appProps = {
        ...props,
        // `<HTTP>` props.
        httpState,
        // By reference.
        // `<Location>` props.
        url: url3,
        // Absolute request URL.
        // `<Data>` props.
        cspNonce: cspNonce2,
        // Nonce for CSP.
        fetcher,
        // Request-specific fetcher.
        lazyCPs,
        // Request-specific lazy component promises.
        head: patchDeep({ styleBundle, scriptBundle }, props.head)
      };
      let html2 = await renderToString(App, { props: appProps });
      if (html2)
        html2 = html2.replace(fetcherGlobalToScriptCodeReplacementCode(), fetcher.globalToScriptCode());
      if (!html2 && !Object.hasOwn(httpState, "body")) {
        const StandAlone404 = (await Promise.resolve().then(() => (init__(), __exports))).StandAlone;
        html2 = await renderToString(/* @__PURE__ */ jsx5(StandAlone404, { class: "preact-iso-404" }));
        patchDeep(httpState, { status: 404 });
      }
      return { httpState, docType: "<!doctype html>", html: html2 };
    };
    hydrateSPA = async (options4) => {
      if (!isWeb())
        throw Error("N4WUN2gk");
      const appSelectors = "body > x-preact-app", { App, props = {} } = options4;
      let appToHydrate, appToRender;
      if (appToHydrate = query(appSelectors + "[data-hydrate]")) {
        hydrate(/* @__PURE__ */ jsx5(App, { ...{ ...props, isHydration: true } }), appToHydrate);
      } else if (appToRender = query(appSelectors)) {
        render(/* @__PURE__ */ jsx5(App, { ...{ ...props, isHydration: false } }), appToRender);
      } else {
        throw Error("NxgH8pMc");
      }
    };
    lazyLoader = (loader, routerProps) => {
      return lazyComponent(async (props) => {
        return createElement3((await loader()).default, props || {});
      }, routerProps);
    };
    lazyComponent = (fn, routerProps) => {
      const ContextObject13 = createContext4({}), useContext$1 = () => useContext4(ContextObject13);
      const Lazy = (unused\uA4FA) => {
        const { isSSR: isSSR2, lazyCPi, lazyCPs, props } = useContext$1(), didPromiseThen = useRef2(), [, updateTicks] = useReducer3((c) => c + 1 >= 1e4 ? 1 : c + 1, 0), promiseRef = useRef2(), resolvedRef = useRef2(), resolvedVNodeRef = useRef2(), promise3 = isSSR2 ? lazyCPs.promises[lazyCPi].promise : promiseRef, resolved = isSSR2 ? lazyCPs.promises[lazyCPi].resolved : resolvedRef, resolvedVNode = isSSR2 ? lazyCPs.promises[lazyCPi].resolvedVNode : resolvedVNodeRef;
        promise3.current ??= fn(props || {}).then((value) => (resolved.current = true, resolvedVNode.current = value));
        if (resolved.current) {
          const vNode2 = resolvedVNode.current;
          if (!isSSR2)
            didPromiseThen.current = promise3.current = resolved.current = resolvedVNode.current = null;
          return vNode2;
        }
        if (!didPromiseThen.current) {
          didPromiseThen.current = true;
          void promise3.current.then(updateTicks);
        }
        throw promise3.current;
      };
      return (props) => {
        const isSSR$1 = isSSR(), { state: { lazyCPs } } = useData();
        let lazyCPi = 0;
        if (isSSR$1) {
          lazyCPi = ++lazyCPs.counter;
          lazyCPs.promises[lazyCPi] ??= {
            promise: { current: void 0 },
            resolved: { current: void 0 },
            resolvedVNode: { current: void 0 }
          };
        }
        return /* @__PURE__ */ jsx5(ContextObject13.Provider, { value: { isSSR: isSSR$1, lazyCPi, lazyCPs, props }, children: /* @__PURE__ */ jsx5(Router, { ...routerProps, children: /* @__PURE__ */ jsx5(Route, { default: true, component: Lazy }) }) });
      };
    };
    lazyRoute = (loader) => {
      let promise3, component;
      return (props) => {
        const [, updateTicks] = useReducer3((c) => c + 1 >= 1e4 ? 1 : c + 1, 0), didPromiseThen = useRef2(false);
        promise3 ??= loader().then((module) => component = module.default);
        if (component)
          return createElement3(component, props);
        if (!didPromiseThen.current) {
          didPromiseThen.current = true;
          void promise3.then(updateTicks);
        }
        throw promise3;
      };
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/audit-logger.js
import { jsx as jsx6 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext5 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext as useContext5 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject3, useAuditLogger;
var init_audit_logger = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/audit-logger.js"() {
    ContextObject3 = createContext5({});
    useAuditLogger = () => useContext5(ContextObject3);
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/consent-logger.js
import { jsx as jsx7 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext6 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext as useContext6 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject4, useConsentLogger;
var init_consent_logger = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/consent-logger.js"() {
    ContextObject4 = createContext6({});
    useConsentLogger = () => useContext6(ContextObject4);
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/consent.js
import { jsx as jsx8 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext7 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext as useContext7, useRef as useRef3 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject5, useConsent;
var init_consent = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/consent.js"() {
    ContextObject5 = createContext7({});
    useConsent = () => useContext7(ContextObject5);
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/analytics.js
import { jsx as jsx9 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext8 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext as useContext8, useRef as useRef4 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject6, useAnalytics;
var init_analytics = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/analytics.js"() {
    ContextObject6 = createContext8({});
    useAnalytics = () => useContext8(ContextObject6);
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/turnstile.js
import { jsx as jsx10 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext9 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext as useContext9, useRef as useRef5 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject7, useTurnstile;
var init_turnstile = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/turnstile.js"() {
    ContextObject7 = createContext9({});
    useTurnstile = () => useContext9(ContextObject7);
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/clipboard.js
import { jsx as jsx11 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext10 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext as useContext10, useRef as useRef6 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject8, useClipboard;
var init_clipboard = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/clipboard.js"() {
    ContextObject8 = createContext10({});
    useClipboard = () => useContext10(ContextObject8);
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/http.js
import { jsx as jsx12 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext11 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useReducer as useReducer4, useContext as useContext11 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject9, useHTTP;
var init_http2 = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/http.js"() {
    init_env();
    ContextObject9 = createContext11({});
    useHTTP = () => {
      if (!isSSR())
        throw Error("7nvGAmE5");
      return useContext11(ContextObject9);
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/layout-context.js
import { jsx as jsx13 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext12 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext as useContext12 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject10, useLayout;
var init_layout_context = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/layout-context.js"() {
    ContextObject10 = createContext12({});
    useLayout = () => useContext12(ContextObject10);
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/html.js
import { jsx as jsx14 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext13 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext as useContext13, useMemo as useMemo3, useLayoutEffect as useLayoutEffect2, useEffect as useEffect2 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject11, useHTML;
var init_html = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/html.js"() {
    ContextObject11 = createContext13({});
    useHTML = () => useContext13(ContextObject11);
  }
});

// node_modules/@clevercanyon/utilities/dist/resources/classes/profile.js
var Profile, getClass6;
var init_profile = __esm({
  "node_modules/@clevercanyon/utilities/dist/resources/classes/profile.js"() {
    init_utility();
    init_is();
    init_obj();
    init_str();
    init_symbol();
    init_url();
    getClass6 = () => {
      if (Profile)
        return Profile;
      Profile = class extends getClass2() {
        /**
         * Full name; e.g., `Jason Caldwell`.
         */
        name;
        /**
         * First name; e.g., `Jason`.
         */
        firstName;
        /**
         * Last name; e.g., `Caldwell`.
         */
        lastName;
        /**
         * Username; e.g., `jaswrks`.
         */
        username;
        /**
         * Headline; e.g., `Engineering Manager, Consultant, Staff Engineer`.
         */
        headline;
        /**
         * Description; e.g., `Entrepreneur and full-stack engineer with 20+ years experience.`.
         */
        description;
        /**
         * URL; e.g., `https://jaswrks.com/`.
         */
        url;
        /**
         * Location; e.g., `Northern Maine, USA`.
         */
        location;
        /**
         * Gravatar, with dimensions.
         */
        gravatar;
        /**
         * Social profile URLs.
         */
        socialProfiles;
        /**
         * Object constructor.
         *
         * @param props Props or instance.
         */
        constructor(props) {
          super();
          const isClone = profile(props);
          this.name = this.firstName = this.lastName = "";
          for (const [key, value] of keyAndSymbolEntries(props)) {
            this[key] = value;
          }
          if (!this.name) {
            this.name = trim(this.firstName + " " + this.lastName);
          }
          const nameParts = this.name.split(/\s+/u).filter((part) => {
            return !/^(?:Mr|Ms|Miss|Mrs|Dr|Jr|Sr|Co|Corp|Inc|LL[PC]|LTD|[a-z])\.?$/iu.test(part);
          });
          if (!this.firstName && nameParts.length)
            this.firstName = nameParts[0];
          if (!this.lastName && nameParts.length > 1)
            this.lastName = nameParts.slice(-1)[0];
          if (isClone)
            ;
          else {
            deepFreeze(this);
          }
        }
        /**
         * {@see $obj.clone()}, {@see $obj.cloneDeep()} helper.
         *
         * @returns True if object clones should be frozen deeply.
         */
        get [objDeepFreezeClones]() {
          return true;
        }
        /**
         * Gravatar at a specific size.
         *
         * @param   size Size; e.g., `128`.
         *
         * @returns      Gravatar URL.
         */
        gravatarSize(size) {
          return addQueryVar("size", String(size), this.gravatar.url);
        }
        /**
         * Produces raw props.
         *
         * @returns Object {@see RawProps}.
         */
        rawProps() {
          return deepFreeze({ ...this });
        }
      };
      return Object.defineProperty(Profile, "name", {
        ...Object.getOwnPropertyDescriptor(Profile, "name"),
        value: "Profile"
      });
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/profile.js
var rawPropsInitialized, instances, rawProps, t\uA4FAbrucewrks, t\uA4FACaldwell, t\uA4FA\u0D02com, t\uA4FAdescription, t\uA4FAfacebook, t\uA4FAfirstName, t\uA4FAgithub, t\uA4FAgravatar, t\uA4FAheadline, t\uA4FA\u0D02hop\u0D02gdn, t\uA4FAhttps\uA4FD\u2CC7\u2CC7, t\uA4FA\u0D02io, t\uA4FAjaswrks, t\uA4FAkeybase, t\uA4FAlastName, t\uA4FAlinkedin, t\uA4FAlocation, t\uA4FANorthern\u{110B1}Maine\u{110B1}USA, t\uA4FAnpm, t\uA4FAnpmjs, t\uA4FAsocialProfiles, t\uA4FAtwitter, t\uA4FAurl, t\uA4FAusername, t\uA4FAworkers, t\uA4FAwww\u0D02, t\uA4FAx, t\uA4FAhttps\uA4FD\u2CC7\u2CC7x\u0D02com\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7twitter\u0D02com\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02linkedin\u0D02com\u2CC7in\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02facebook\u0D02com\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7github\u0D02com\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02npmjs\u0D02com\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7keybase\u0D02io\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7workers\u0D02hop\u0D02gdn\u2CC7api\u2CC7gravatar\u2CC7v1\u2CC7, t\uA4FAobj\uA4FAwidthHeight512x512, get4, initializeRawProps;
var init_profile2 = __esm({
  "node_modules/@clevercanyon/utilities/dist/profile.js"() {
    init_obj();
    init_str();
    init_profile();
    rawPropsInitialized = false;
    instances = {};
    rawProps = {};
    t\uA4FAbrucewrks = "brucewrks";
    t\uA4FACaldwell = "Caldwell";
    t\uA4FA\u0D02com = ".com";
    t\uA4FAdescription = "description";
    t\uA4FAfacebook = "facebook";
    t\uA4FAfirstName = "firstName";
    t\uA4FAgithub = "github";
    t\uA4FAgravatar = "gravatar";
    t\uA4FAheadline = "headline";
    t\uA4FA\u0D02hop\u0D02gdn = ".hop.gdn";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7 = "https://";
    t\uA4FA\u0D02io = ".io";
    t\uA4FAjaswrks = "jaswrks";
    t\uA4FAkeybase = "keybase";
    t\uA4FAlastName = "lastName";
    t\uA4FAlinkedin = "linkedin";
    t\uA4FAlocation = "location";
    t\uA4FANorthern\u{110B1}Maine\u{110B1}USA = "Northern Maine, USA";
    t\uA4FAnpm = "npm";
    t\uA4FAnpmjs = t\uA4FAnpm + "js";
    t\uA4FAsocialProfiles = "socialProfiles";
    t\uA4FAtwitter = "twitter";
    t\uA4FAurl = "url";
    t\uA4FAusername = "username";
    t\uA4FAworkers = "workers";
    t\uA4FAwww\u0D02 = "www.";
    t\uA4FAx = "x";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7x\u0D02com\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7 + t\uA4FAx + t\uA4FA\u0D02com + "/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7twitter\u0D02com\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7 + t\uA4FAtwitter + t\uA4FA\u0D02com + "/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02linkedin\u0D02com\u2CC7in\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7 + t\uA4FAwww\u0D02 + t\uA4FAlinkedin + t\uA4FA\u0D02com + "/in/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02facebook\u0D02com\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7 + t\uA4FAwww\u0D02 + t\uA4FAfacebook + t\uA4FA\u0D02com + "/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7github\u0D02com\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7 + t\uA4FAgithub + t\uA4FA\u0D02com + "/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02npmjs\u0D02com\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7 + t\uA4FAwww\u0D02 + t\uA4FAnpmjs + t\uA4FA\u0D02com + "/~";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7keybase\u0D02io\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7 + t\uA4FAkeybase + t\uA4FA\u0D02io + "/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7workers\u0D02hop\u0D02gdn\u2CC7api\u2CC7gravatar\u2CC7v1\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7 + t\uA4FAworkers + t\uA4FA\u0D02hop\u0D02gdn + "/api/" + t\uA4FAgravatar + "/v1/";
    t\uA4FAobj\uA4FAwidthHeight512x512 = { width: 512, height: 512 };
    get4 = (username) => {
      if (!rawPropsInitialized)
        initializeRawProps();
      username = lTrim(username, "@");
      username = "&" === username ? t\uA4FAjaswrks : username;
      if (!username || !rawProps[username]) {
        throw Error("72PZaBbj");
      }
      if (instances[username]) {
        return instances[username];
      }
      const Profile2 = getClass6();
      instances[username] = new Profile2({ ...rawProps[username] });
      return instances[username];
    };
    initializeRawProps = () => {
      if (rawPropsInitialized)
        return;
      rawPropsInitialized = true;
      rawProps[t\uA4FAjaswrks] = deepFreeze({
        [t\uA4FAfirstName]: "Jason",
        [t\uA4FAlastName]: t\uA4FACaldwell,
        [t\uA4FAusername]: t\uA4FAjaswrks,
        [t\uA4FAheadline]: "Engineering Manager, Consultant, Staff Engineer",
        [t\uA4FAdescription]: "Entrepreneur and full-stack engineer with 20+ years experience.",
        [t\uA4FAlocation]: t\uA4FANorthern\u{110B1}Maine\u{110B1}USA,
        [t\uA4FAurl]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7 + t\uA4FAjaswrks + t\uA4FA\u0D02com + "/",
        [t\uA4FAgravatar]: {
          [t\uA4FAurl]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7workers\u0D02hop\u0D02gdn\u2CC7api\u2CC7gravatar\u2CC7v1\u2CC7 + "17c7f6ff2e18895eb11da018bf928c8a3e3603607546426805f29f2a700e693c.png?size=512",
          ...t\uA4FAobj\uA4FAwidthHeight512x512
        },
        [t\uA4FAsocialProfiles]: {
          [t\uA4FAx]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7x\u0D02com\u2CC7 + t\uA4FAjaswrks,
          [t\uA4FAtwitter]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7twitter\u0D02com\u2CC7 + t\uA4FAjaswrks,
          [t\uA4FAlinkedin]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02linkedin\u0D02com\u2CC7in\u2CC7 + t\uA4FAjaswrks,
          [t\uA4FAfacebook]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02facebook\u0D02com\u2CC7 + t\uA4FAjaswrks,
          [t\uA4FAkeybase]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7keybase\u0D02io\u2CC7 + t\uA4FAjaswrks,
          [t\uA4FAgithub]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7github\u0D02com\u2CC7 + t\uA4FAjaswrks,
          [t\uA4FAnpm]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02npmjs\u0D02com\u2CC7 + t\uA4FAjaswrks
        }
      });
      rawProps[t\uA4FAbrucewrks] = deepFreeze({
        [t\uA4FAfirstName]: "Bruce",
        [t\uA4FAlastName]: t\uA4FACaldwell,
        [t\uA4FAusername]: t\uA4FAbrucewrks,
        [t\uA4FAheadline]: "Senior Fullstack Engineer, NodeJS, React, PHP, DevOps",
        [t\uA4FAdescription]: "Entrepreneur and full-stack engineer with 10+ years experience.",
        [t\uA4FAlocation]: t\uA4FANorthern\u{110B1}Maine\u{110B1}USA,
        [t\uA4FAurl]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7github\u0D02com\u2CC7 + t\uA4FAbrucewrks,
        [t\uA4FAgravatar]: {
          [t\uA4FAurl]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7workers\u0D02hop\u0D02gdn\u2CC7api\u2CC7gravatar\u2CC7v1\u2CC7 + "bcdabcc96b6c049e1de6e6e32b0d4b772a4e9cb92e14e50591ee021ec4dd8317.png?size=512",
          ...t\uA4FAobj\uA4FAwidthHeight512x512
        },
        [t\uA4FAsocialProfiles]: {
          [t\uA4FAx]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7x\u0D02com\u2CC7 + t\uA4FAbrucewrks,
          [t\uA4FAtwitter]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7twitter\u0D02com\u2CC7 + t\uA4FAbrucewrks,
          [t\uA4FAlinkedin]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02linkedin\u0D02com\u2CC7in\u2CC7 + t\uA4FAbrucewrks,
          [t\uA4FAfacebook]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02facebook\u0D02com\u2CC7 + t\uA4FAbrucewrks,
          [t\uA4FAkeybase]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7keybase\u0D02io\u2CC7 + t\uA4FAbrucewrks,
          [t\uA4FAgithub]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7github\u0D02com\u2CC7 + t\uA4FAbrucewrks,
          [t\uA4FAnpm]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7www\u0D02npmjs\u0D02com\u2CC7 + t\uA4FAbrucewrks
        }
      });
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/head.js
import { jsx as jsx15 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { Component as Component2, toChildArray as toChildArray2, h } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useMemo as useMemo4, useEffect as useEffect3 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var t\uA4FAicon, t\uA4FAprefetch, t\uA4FAPrefetch, t\uA4FAtime, t\uA4FAaddr, t\uA4FAaddress, t\uA4FAaddressCountry, t\uA4FAaddressLocality, t\uA4FAaddressRegion, t\uA4FAappend, t\uA4FAapple\u1C7Ctouch\u1C7Cicon, t\uA4FAarticle, t\uA4FAauthor, t\uA4FAcanonical, t\uA4FAcategory, t\uA4FAcharset, t\uA4FAcolor, t\uA4FAdate, t\uA4FAdateModified, t\uA4FAdatePublished, t\uA4FAdescription2, t\uA4FAdns, t\uA4FAdnsPrefetch, t\uA4FAdnsPrefetchR2, t\uA4FAdnsPrefetchWorkers, t\uA4FAdns\u1C7Cprefetch, t\uA4FAfetch, t\uA4FAfetchPriority, t\uA4FAfounder, t\uA4FAfounderImg, t\uA4FAhealthy, t\uA4FAhumans, t\uA4FAid, t\uA4FAimage, t\uA4FAimage\u2CC7png, t\uA4FAimage\u2CC7svg, t\uA4FAlastModifiedTime, t\uA4FAmanifest, t\uA4FAmodified_time, t\uA4FAogArticle, t\uA4FAogArticleAuthor, t\uA4FAogArticleModifiedTime, t\uA4FAogArticlePublishedTime, t\uA4FAogArticleSection, t\uA4FAogArticleTag, t\uA4FAogCategory, t\uA4FAogDescription, t\uA4FAogImage, t\uA4FAogImageHeight, t\uA4FAogImageWidth, t\uA4FAok, t\uA4FAok\u1C7Chealthy, t\uA4FAogSiteName, t\uA4FAogSuffixedTitle, t\uA4FAogTags, t\uA4FAogTitle, t\uA4FAogType, t\uA4FAogURL, t\uA4FAog\uA4FD, t\uA4FAog\uA4FDarticle\uA4FD, t\uA4FAOrganization, t\uA4FApage, t\uA4FApageAuthor, t\uA4FApageAuthorImg, t\uA4FApagePrimaryImg, t\uA4FAparentOrganization, t\uA4FApngIcon, t\uA4FApreload, t\uA4FApreloadStyleBundle, t\uA4FApublished_time, t\uA4FApublishTime, t\uA4FArobots, t\uA4FAscriptBundle, t\uA4FAsiteName, t\uA4FAstyleBundle, t\uA4FAsubOrganization, t\uA4FAsuffixedTitle, t\uA4FAsvgIcon, t\uA4FAtags, t\uA4FAtext, t\uA4FAtext\u2CC72, t\uA4FAtext\u2CC7plain, t\uA4FAtheme, t\uA4FAthemeColor, t\uA4FAtheme\u1C7Ccolor, t\uA4FAtitle, t\uA4FAtitleSuffix, t\uA4FAtype, t\uA4FAviewport, t\uA4FAv\uA4FAundefined2, t\uA4FAWeb, t\uA4FAWebPage, t\uA4FAWebSite, t\uA4FA\u0DB8id, t\uA4FA\u0DB8type, useHead, computeHead, getComputedState;
var init_head = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/head.js"() {
    init_data();
    init_obj();
    init_env();
    init_app();
    init_location();
    init_is();
    init_layout_context();
    init_time();
    init_fn();
    init_profile2();
    init_to();
    init_url();
    t\uA4FAicon = "icon";
    t\uA4FAprefetch = "prefetch";
    t\uA4FAPrefetch = "Prefetch";
    t\uA4FAtime = "time";
    t\uA4FAaddr = "addr";
    t\uA4FAaddress = t\uA4FAaddr + "ess";
    t\uA4FAaddressCountry = t\uA4FAaddress + "Country";
    t\uA4FAaddressLocality = t\uA4FAaddress + "Locality";
    t\uA4FAaddressRegion = t\uA4FAaddress + "Region";
    t\uA4FAappend = "append";
    t\uA4FAapple\u1C7Ctouch\u1C7Cicon = "apple-touch-" + t\uA4FAicon;
    t\uA4FAarticle = "article";
    t\uA4FAauthor = "author";
    t\uA4FAcanonical = "canonical";
    t\uA4FAcategory = "category";
    t\uA4FAcharset = "charset";
    t\uA4FAcolor = "color";
    t\uA4FAdate = "date";
    t\uA4FAdateModified = t\uA4FAdate + "Modified";
    t\uA4FAdatePublished = t\uA4FAdate + "Published";
    t\uA4FAdescription2 = "description";
    t\uA4FAdns = "dns";
    t\uA4FAdnsPrefetch = t\uA4FAdns + t\uA4FAPrefetch;
    t\uA4FAdnsPrefetchR2 = t\uA4FAdnsPrefetch + "R2";
    t\uA4FAdnsPrefetchWorkers = t\uA4FAdnsPrefetch + "Workers";
    t\uA4FAdns\u1C7Cprefetch = t\uA4FAdns + "-" + t\uA4FAprefetch;
    t\uA4FAfetch = "fetch";
    t\uA4FAfetchPriority = t\uA4FAfetch + "Priority";
    t\uA4FAfounder = "founder";
    t\uA4FAfounderImg = t\uA4FAfounder + "Img";
    t\uA4FAhealthy = "healthy";
    t\uA4FAhumans = "humans";
    t\uA4FAid = "id";
    t\uA4FAimage = "image";
    t\uA4FAimage\u2CC7png = t\uA4FAimage + "/png";
    t\uA4FAimage\u2CC7svg = t\uA4FAimage + "/svg+xml";
    t\uA4FAlastModifiedTime = "lastModifiedTime";
    t\uA4FAmanifest = "manifest";
    t\uA4FAmodified_time = "modified_" + t\uA4FAtime;
    t\uA4FAogArticle = "ogArticle";
    t\uA4FAogArticleAuthor = t\uA4FAogArticle + "Author";
    t\uA4FAogArticleModifiedTime = t\uA4FAogArticle + "ModifiedTime";
    t\uA4FAogArticlePublishedTime = t\uA4FAogArticle + "PublishedTime";
    t\uA4FAogArticleSection = t\uA4FAogArticle + "Section";
    t\uA4FAogArticleTag = t\uA4FAogArticle + "Tag";
    t\uA4FAogCategory = "ogCategory";
    t\uA4FAogDescription = "ogDescription";
    t\uA4FAogImage = "ogImage";
    t\uA4FAogImageHeight = t\uA4FAogImage + "Height";
    t\uA4FAogImageWidth = t\uA4FAogImage + "Width";
    t\uA4FAok = "ok";
    t\uA4FAok\u1C7Chealthy = t\uA4FAok + "-" + t\uA4FAhealthy;
    t\uA4FAogSiteName = "ogSiteName";
    t\uA4FAogSuffixedTitle = "ogSuffixedTitle";
    t\uA4FAogTags = "ogTags";
    t\uA4FAogTitle = "ogTitle";
    t\uA4FAogType = "ogType";
    t\uA4FAogURL = "ogURL";
    t\uA4FAog\uA4FD = "og:";
    t\uA4FAog\uA4FDarticle\uA4FD = t\uA4FAog\uA4FD + t\uA4FAarticle + ":";
    t\uA4FAOrganization = "Organization";
    t\uA4FApage = "page";
    t\uA4FApageAuthor = t\uA4FApage + "Author";
    t\uA4FApageAuthorImg = t\uA4FApageAuthor + "Img";
    t\uA4FApagePrimaryImg = t\uA4FApage + "PrimaryImg";
    t\uA4FAparentOrganization = "parent" + t\uA4FAOrganization;
    t\uA4FApngIcon = "pngIcon";
    t\uA4FApreload = "preload";
    t\uA4FApreloadStyleBundle = t\uA4FApreload + "StyleBundle";
    t\uA4FApublished_time = "published_" + t\uA4FAtime;
    t\uA4FApublishTime = "publishTime";
    t\uA4FArobots = "robots";
    t\uA4FAscriptBundle = "scriptBundle";
    t\uA4FAsiteName = "siteName";
    t\uA4FAstyleBundle = "styleBundle";
    t\uA4FAsubOrganization = "sub" + t\uA4FAOrganization;
    t\uA4FAsuffixedTitle = "suffixedTitle";
    t\uA4FAsvgIcon = "svgIcon";
    t\uA4FAtags = "tags";
    t\uA4FAtext = "text";
    t\uA4FAtext\u2CC72 = t\uA4FAtext + "/";
    t\uA4FAtext\u2CC7plain = t\uA4FAtext\u2CC72 + "plain";
    t\uA4FAtheme = "theme";
    t\uA4FAthemeColor = "themeColor";
    t\uA4FAtheme\u1C7Ccolor = t\uA4FAtheme + "-" + t\uA4FAcolor;
    t\uA4FAtitle = "title";
    t\uA4FAtitleSuffix = "titleSuffix";
    t\uA4FAtype = "type";
    t\uA4FAviewport = "viewport";
    t\uA4FAv\uA4FAundefined2 = void 0;
    t\uA4FAWeb = "Web";
    t\uA4FAWebPage = t\uA4FAWeb + "Page";
    t\uA4FAWebSite = t\uA4FAWeb + "Site";
    t\uA4FA\u0DB8id = "@" + t\uA4FAid;
    t\uA4FA\u0DB8type = "@" + t\uA4FAtype;
    useHead = () => {
      const { state: dataState } = useData();
      const instance = dataState.head.instance;
      if (!instance?.computedState) {
        throw Error("sX8HsSFC");
      }
      return {
        state: instance.computedState,
        append: (...args) => instance.append(...args),
        updateState: (...args) => instance.updateState(...args),
        forceFullUpdate: (...args) => instance.forceFullUpdate(...args)
      };
    };
    computeHead = (head2) => {
      return getComputedState(head2, { useLayoutState: false });
    };
    getComputedState = (head2, options4) => {
      const defaultOpts = { useLayoutState: true }, opts = defaults({}, options4 || {}, defaultOpts), { useLayoutState } = opts;
      const isLocalVite$1 = isLocalVite();
      const brand$1 = brand2(), brand\uA4FAtheme = brand$1.theme, brand\uA4FAicon = brand$1.icon, brand\uA4FAogImage = brand$1.ogImage;
      const { state: locationState } = useLocation(), { state: dataState } = useData(), { state: layoutState } = useLayout();
      return useMemo4(() => {
        let {
          charset,
          themeColor,
          viewport,
          //
          robots,
          canonical,
          //
          siteName,
          title,
          titleSuffix,
          description,
          category,
          tags: tags2,
          image,
          //
          author,
          publishTime,
          lastModifiedTime,
          //
          humans,
          manifest,
          //
          pngIcon,
          svgIcon,
          //
          ogSiteName,
          ogType,
          ogTitle,
          ogDescription,
          ogCategory,
          ogTags,
          ogURL,
          ogImage,
          //
          styleBundle,
          scriptBundle
        } = {
          ...useLayoutState ? { ...layoutState?.head } : {},
          ...head2
          // Actual `<Head>` state.
        };
        const { url: url$1, canonicalURL, fromBase } = locationState;
        title = title || ogTitle || url$1.hostname;
        ogTitle = ogTitle || title;
        let suffixedTitle = title, ogSuffixedTitle = ogTitle;
        if (titleSuffix) {
          if (!string2(titleSuffix))
            titleSuffix = " \u2022 " + (siteName || ogSiteName || brand$1.name);
          suffixedTitle += titleSuffix, ogSuffixedTitle += titleSuffix;
        }
        let defaultDescription = "Why is the rum gone?";
        let defaultStyleBundle, defaultScriptBundle;
        if (!styleBundle && "" !== styleBundle && isLocalVite$1) {
          defaultStyleBundle = "./index.css";
        }
        if (!scriptBundle && "" !== scriptBundle && isLocalVite$1) {
          defaultScriptBundle = "./index.tsx";
        }
        const asAbsoluteURLString = (parseable) => {
          return isAbsolute(parseable = parseable.toString()) ? parseable : fromBase(parseable);
        };
        return {
          ...useLayoutState ? { ...layoutState?.head } : {},
          ...head2,
          // Actual `<Head>` state.
          [t\uA4FAcharset]: charset || "utf-8",
          [t\uA4FAthemeColor]: themeColor || brand\uA4FAtheme.color,
          [t\uA4FAviewport]: viewport || "width=device-width, initial-scale=1, minimum-scale=1",
          [t\uA4FArobots]: robots || "",
          // Default is empty string.
          [t\uA4FAcanonical]: asAbsoluteURLString(canonical || canonicalURL),
          [t\uA4FAsiteName]: siteName || brand$1.name || url$1.hostname,
          [t\uA4FAtitle]: title,
          // Computed above.
          [t\uA4FAtitleSuffix]: titleSuffix || "",
          [t\uA4FAsuffixedTitle]: suffixedTitle,
          [t\uA4FAdescription2]: description || defaultDescription,
          [t\uA4FAcategory]: category || ogCategory || "",
          [t\uA4FAtags]: tags2 || ogTags || [],
          [t\uA4FAimage]: asAbsoluteURLString(image || ogImage || brand\uA4FAogImage.png),
          [t\uA4FAauthor]: profile(author) ? author : tryFn(() => get4(string(author)), t\uA4FAv\uA4FAundefined2)(),
          [t\uA4FApublishTime]: publishTime ? parse5(publishTime) : t\uA4FAv\uA4FAundefined2,
          [t\uA4FAlastModifiedTime]: lastModifiedTime ? parse5(lastModifiedTime) : t\uA4FAv\uA4FAundefined2,
          [t\uA4FAhumans]: humans || "./" + t\uA4FAhumans + ".txt",
          [t\uA4FAmanifest]: manifest || "./" + t\uA4FAmanifest + ".json",
          [t\uA4FAsvgIcon]: asAbsoluteURLString(svgIcon || brand\uA4FAicon.svg),
          [t\uA4FApngIcon]: asAbsoluteURLString(pngIcon || brand\uA4FAicon.png),
          [t\uA4FAogSiteName]: ogSiteName || siteName || brand$1.name || url$1.hostname,
          [t\uA4FAogType]: ogType || t\uA4FAarticle,
          [t\uA4FAogTitle]: ogTitle,
          // Computed above.
          [t\uA4FAogSuffixedTitle]: ogSuffixedTitle,
          [t\uA4FAogDescription]: ogDescription || description || defaultDescription,
          [t\uA4FAogCategory]: ogCategory || category || "",
          [t\uA4FAogTags]: ogTags || tags2 || [],
          [t\uA4FAogURL]: asAbsoluteURLString(ogURL || canonical || canonicalURL),
          [t\uA4FAogImage]: asAbsoluteURLString(ogImage || image || brand\uA4FAogImage.png),
          // These URLs are potentially relative, and that’s as it should be. They don’t have to be absolute.
          [t\uA4FAstyleBundle]: ("" === styleBundle ? "" : styleBundle || dataState.head.styleBundle || defaultStyleBundle || "").toString(),
          [t\uA4FAscriptBundle]: ("" === scriptBundle ? "" : scriptBundle || dataState.head.scriptBundle || defaultScriptBundle || "").toString(),
          // Concatenated, not merged, as they are potentially arrays.
          [t\uA4FAappend]: (useLayoutState && layoutState?.head.append || []).concat(head2.append || [])
        };
      }, [useLayoutState, isLocalVite$1, brand$1, locationState, dataState, layoutState, head2]);
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/preact/components/body.js
import { jsx as jsx16, jsxs as jsxs2, Fragment as Fragment2 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs";
import { createContext as createContext14 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { useContext as useContext14, useMemo as useMemo5, useLayoutEffect as useLayoutEffect3 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
var ContextObject12, useBody;
var init_body = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact/components/body.js"() {
    ContextObject12 = createContext14({});
    useBody = () => useContext14(ContextObject12);
  }
});

// node_modules/@clevercanyon/utilities/dist/preact.js
var preact_exports = {};
__export(preact_exports, {
  Component: () => Component3,
  Fragment: () => Fragment3,
  Signal: () => Signal,
  batch: () => batch,
  classMap: () => classMap,
  classPropVariants: () => classPropVariants,
  classPropVariantsRegExp: () => classPropVariantsRegExp,
  classPropVariantsRegExpStr: () => classPropVariantsRegExpStr,
  classes: () => classes,
  clone: () => cloneElement3,
  computeHead: () => computeHead,
  computed: () => computed,
  create: () => createElement4,
  createContext: () => createContext15,
  createRef: () => createRef,
  effect: () => effect,
  h: () => h2,
  hydrate: () => hydrate2,
  initialState: () => initialState,
  isVNode: () => isValidElement2,
  iso: () => iso_exports,
  lazyComponent: () => lazyComponent,
  lazyLoader: () => lazyLoader,
  lazyRoute: () => lazyRoute,
  omitProps: () => omitProps,
  options: () => options3,
  reduceState: () => reduceState,
  render: () => render2,
  signal: () => signal,
  ssr: () => ssr_exports,
  toChildArray: () => toChildArray3,
  untracked: () => untracked,
  useAnalytics: () => useAnalytics,
  useAuditLogger: () => useAuditLogger,
  useBody: () => useBody,
  useCallback: () => useCallback2,
  useClipboard: () => useClipboard,
  useComputed: () => useComputed,
  useConsent: () => useConsent,
  useConsentLogger: () => useConsentLogger,
  useContext: () => useContext15,
  useData: () => useData,
  useDebugValue: () => useDebugValue,
  useEffect: () => useEffect4,
  useErrorBoundary: () => useErrorBoundary,
  useFetcher: () => useFetcher,
  useHTML: () => useHTML,
  useHTTP: () => useHTTP,
  useHead: () => useHead,
  useId: () => useId,
  useImperativeHandle: () => useImperativeHandle,
  useLayout: () => useLayout,
  useLayoutEffect: () => useLayoutEffect4,
  useLocation: () => useLocation,
  useMemo: () => useMemo6,
  useReducedState: () => useReducedState,
  useReducer: () => useReducer22,
  useRef: () => useRef7,
  useRoute: () => useRoute,
  useSignal: () => useSignal,
  useSignalEffect: () => useSignalEffect,
  useState: () => useState,
  useTurnstile: () => useTurnstile
});
import { useReducer as useReducer5 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
import { useCallback as useCallback2, useContext as useContext15, useDebugValue, useEffect as useEffect4, useErrorBoundary, useId, useImperativeHandle, useLayoutEffect as useLayoutEffect4, useMemo as useMemo6, useReducer as useReducer22, useRef as useRef7, useState } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/hooks/dist/hooks.mjs";
import { Component as Component3, Fragment as Fragment3, cloneElement as cloneElement3, createElement as createElement4, createContext as createContext15, createRef, h as h2, hydrate as hydrate2, isValidElement as isValidElement2, options as options3, render as render2, toChildArray as toChildArray3 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/preact/dist/preact.mjs";
import { Signal, batch, computed, effect, signal, untracked, useComputed, useSignal, useSignalEffect } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@preact/signals/dist/signals.mjs";
var omitProps, initialState, reduceState, useReducedState, internalClassPropVariants, classPropVariantsRegExpStr, classPropVariantsRegExp, classPropVariants, classes, classMap, classes\uA4FAhelper;
var init_preact = __esm({
  "node_modules/@clevercanyon/utilities/dist/preact.js"() {
    init_standalone();
    init_class_map();
    init_iso();
    init_iso();
    init_ssr();
    init_audit_logger();
    init_consent_logger();
    init_consent();
    init_analytics();
    init_turnstile();
    init_clipboard();
    init_location();
    init_data();
    init_http2();
    init_router();
    init_layout_context();
    init_html();
    init_head();
    init_body();
    init_str();
    init_obj();
    init_to();
    init_is();
    omitProps = (props, keys, options22) => {
      if (keys.includes("for")) {
        keys.push("htmlFor");
      }
      for (const key of [...keys]) {
        keys = [...new Set(keys.concat([camelCase(key), kebabCase(key), key.toLowerCase()]))];
      }
      if (keys.some((v) => internalClassPropVariants.includes(v))) {
        keys = [...new Set(keys.concat(internalClassPropVariants))];
      }
      return omit2(props, keys, options22);
    };
    initialState = (...args) => {
      return mergeDeep(...args);
    };
    reduceState = (state, updates) => {
      if (Object.hasOwn(state, "isInitial"))
        updates.isInitial = false;
      return updateDeep(state, updates);
    };
    useReducedState = (initialStateFn) => {
      return useReducer5(reduceState, void 0, initialStateFn);
    };
    internalClassPropVariants = ["class", "classes", "className", "classNames"];
    classPropVariantsRegExpStr = $fn\uA4FAmemo(() => "^class(?:es|Names?)?$");
    classPropVariantsRegExp = $fn\uA4FAmemo(() => new RegExp(classPropVariantsRegExpStr(), "u"));
    classPropVariants = $fn\uA4FAmemo(() => freeze([...internalClassPropVariants]));
    classes = (...args) => {
      const classes2 = [...classes\uA4FAhelper(args).keys()];
      return classes2.length ? classes2.join(" ") : void 0;
    };
    classMap = (...args) => {
      return classes\uA4FAhelper(args);
    };
    classes\uA4FAhelper = (allArgs, classMap2) => {
      const map$1 = classMap2 || new (getClass4())();
      for (const args of allArgs) {
        for (const arg of array2(args)) {
          if (array(arg)) {
            classes\uA4FAhelper(arg, map$1);
          } else if (set(arg)) {
            classes\uA4FAhelper([...arg], map$1);
          } else if (string2(arg)) {
            arg.split(/\s+/u).map((c) => c && map$1.set(c, true));
          } else if (map(arg)) {
            for (const [classNames, enable] of arg)
              (string2(classNames) ? classNames : "").split(/\s+/u).map((c) => {
                c && true === enable ? map$1.set(c, true) : map$1.delete(c);
              });
          } else if (plainObject(arg)) {
            for (const prop of internalClassPropVariants) {
              if (Object.hasOwn(arg, prop))
                classes\uA4FAhelper([arg[prop]], map$1);
            }
          } else if (object(arg) && Object.hasOwn(arg, "value")) {
            classes\uA4FAhelper([arg.value], map$1);
          }
        }
      }
      return map$1;
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/dom.js
import { finder } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@medv/finder/finder.js";
function on(...args) {
  const targetSelectors = args[0];
  const target = string2(targetSelectors) ? require2(targetSelectors) : targetSelectors;
  const cancelers = [];
  const eventNames = array2(args[1]).join(" ").split(/\s+/u);
  let selectors = "";
  let actualCallback;
  let callback;
  let options4;
  if (_function(args[3])) {
    [, , selectors, callback, options4] = args;
  } else
    [, , callback, options4] = args;
  if (selectors && callback) {
    actualCallback = (event2) => {
      let { currentTarget, target: target2 } = event2;
      if (!element(target2))
        return;
      do {
        if (target2.matches(selectors))
          void callback.call(target2, new CustomEvent(event2.type, { detail: { target: target2, event: event2 } }));
      } while (element(target2 = target2.parentNode) && target2 !== currentTarget);
    };
  } else
    actualCallback = (event2) => void callback.call(event2.target, event2);
  for (const eventName of eventNames) {
    if (!eventName)
      throw Error("KvYQ3ufQ");
    target.addEventListener(eventName, actualCallback, options4);
    cancelers.push(() => target.removeEventListener(eventName, actualCallback, options4));
  }
  return { cancel: () => cancelers.forEach((cancel) => cancel()) };
}
function create(...args) {
  const tag2 = args[0].toLowerCase();
  let value, atts;
  if ("textNode" === tag2) {
    value = args[1];
    return document.createTextNode(string(value));
  } else {
    let element2;
    atts = args[1];
    if ("svg" === tag2) {
      element2 = document.createElementNS("http://www.w3.org/2000/svg", tag2);
    } else {
      element2 = document.createElement(tag2);
    }
    if (atts)
      setAtts(element2, atts);
    return element2;
  }
}
function query(selectors) {
  if (array(selectors)) {
    return document.querySelectorAll(selectors.join(", "));
  }
  return document.querySelector(selectors);
}
function require2(selectors) {
  let rtnValue;
  if (array(selectors)) {
    rtnValue = document.querySelectorAll(selectors.join(", "));
    rtnValue = rtnValue.length ? rtnValue : null;
  } else
    rtnValue = document.querySelector(selectors);
  if (!rtnValue) {
    throw Error("2BQgcWpj");
  }
  return rtnValue;
}
var userIsWheeling, initializedWheelStatus, initializeWheelStatus, onWheelEnd, afterNextFrame, trigger, setAtts, html, head, body, xPreactApp;
var init_dom = __esm({
  "node_modules/@clevercanyon/utilities/dist/dom.js"() {
    init_standalone();
    init_is();
    init_to();
    init_obj();
    init_preact();
    init_fn();
    userIsWheeling = false;
    initializedWheelStatus = false;
    initializeWheelStatus = () => {
      if (initializedWheelStatus)
        return;
      initializedWheelStatus = true;
      let wheelTimeout;
      const onWheel = throttle(
        () => {
          clearTimeout(wheelTimeout);
          userIsWheeling = true;
          wheelTimeout = setTimeout(onWheelEnd2, 300);
        },
        { edge: "leading", waitTime: 250 }
        // Must be less than `300`.
      );
      const onWheelEnd2 = () => {
        onWheel.cancel();
        userIsWheeling = false;
        trigger(window, "x:wheelEnd");
      };
      on(window, "wheel", onWheel, { passive: true });
    };
    onWheelEnd = (callback) => {
      initializeWheelStatus();
      const eventName = "x:wheelEnd";
      const actualCallback = () => void callback();
      if (!userIsWheeling) {
        actualCallback();
      } else {
        addEventListener(eventName, actualCallback, { passive: true, once: true });
      }
      return { cancel: () => removeEventListener(eventName, actualCallback) };
    };
    afterNextFrame = (callback) => {
      const done = () => {
        clearTimeout(timeout);
        cancelAnimationFrame(raf);
        setTimeout(() => void callback());
      };
      const timeout = setTimeout(done, 100);
      const raf = requestAnimationFrame(done);
      return {
        cancel: () => {
          cancelAnimationFrame(raf);
          clearTimeout(timeout);
        }
      };
    };
    trigger = (targetSelectors, event2, data, options4) => {
      const target = string2(targetSelectors) ? require2(targetSelectors) : targetSelectors;
      if (string2(event2))
        event2 = new CustomEvent(event2, { detail: data || {}, ...options4 });
      target.dispatchEvent(event2);
    };
    setAtts = (element2, atts) => {
      const elementObj = element2;
      atts = omit2(atts, ["ref", "key"]);
      if (classPropVariants().some((variant) => Object.hasOwn(atts, variant))) {
        atts = { ...omitProps(atts, ["class"]), class: classes(atts) };
      }
      for (let [name, newValue] of Object.entries(atts)) {
        if (["innerText", "children"].includes(name)) {
          if (!primitive(newValue))
            throw Error("UTVWT5J9");
          const newStrValue = string(newValue);
          if (elementObj.innerText !== newStrValue) {
            elementObj.innerText = newStrValue;
          }
        } else if (["innerHTML", "dangerouslySetInnerHTML"].includes(name)) {
          if (object(newValue))
            newValue = newValue.__html;
          const newStrValue = string(newValue);
          if (elementObj.innerHTML !== newStrValue) {
            elementObj.innerHTML = newStrValue;
          }
        } else if (_function(newValue)) {
          if (!name.startsWith("on"))
            throw Error("Nsq5Mqr4");
          if (elementObj[name] !== newValue)
            elementObj[name] = newValue;
        } else {
          const currentValue = element2.getAttribute(name);
          if (nul(newValue) || false === newValue && "-" !== name[4]) {
            if (null !== currentValue)
              element2.removeAttribute(name);
          } else {
            const newStrValue = string(newValue);
            if (currentValue !== newStrValue)
              element2.setAttribute(name, newStrValue);
          }
        }
      }
    };
    html = $fn\uA4FAmemo(() => require2("html"));
    head = $fn\uA4FAmemo(() => require2("head"));
    body = $fn\uA4FAmemo(() => require2("body"));
    xPreactApp = $fn\uA4FAmemo(() => query("body > x-preact-app"));
  }
});

// node_modules/@clevercanyon/utilities/dist/email.js
var parseAddr;
var init_email = __esm({
  "node_modules/@clevercanyon/utilities/dist/email.js"() {
    init_str();
    parseAddr = (str$1) => {
      if (!str$1)
        return;
      if (isEmail(str$1)) {
        return { email: str$1 };
      }
      const parts = str$1.split(/(?<=")\s(?=<)/u);
      if (2 === parts.length && //
      parts[0].length >= 3 && // e.g., `"x"`.
      '"' === parts[0][0] && // Opening quote.
      '"' === parts[0][parts[0].length - 1] && // Closing quote.
      parts[0].length <= 70 + 2 && // 2 = quotes; i.e., `"..."`.
      //
      parts[1].length >= 3 && // e.g., `<x>`.
      "<" === parts[1][0] && // Opening bracket.
      ">" === parts[1][parts[1].length - 1] && // Closing bracket.
      isEmail(parts[1].slice(1, -1))) {
        const name = parts[0].slice(1, -1), email = parts[1].slice(1, -1).toLowerCase();
        return { ...name.length ? { name } : {}, email };
      }
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/str.js
var str_exports = {};
__export(str_exports, {
  asciiOnly: () => asciiOnly,
  byteLength: () => byteLength,
  camelCase: () => camelCase,
  capitalize: () => capitalize,
  charLength: () => charLength,
  clip: () => clip,
  deburr: () => deburr,
  dedent: () => dedent,
  escFTSQuery: () => escFTSQuery,
  escHTML: () => escHTML,
  escRegExp: () => escRegExp,
  escSelector: () => escSelector,
  fromBytes: () => fromBytes,
  fromChars: () => fromChars,
  hasAsianChars: () => hasAsianChars,
  isAddr: () => isAddr,
  isEmail: () => isEmail,
  isIP: () => isIP,
  isIPHost: () => isIPHost,
  isIPv4: () => isIPv4,
  isIPv4Host: () => isIPv4Host,
  isIPv6: () => isIPv6,
  isIPv6Host: () => isIPv6Host,
  kebabCase: () => kebabCase,
  lTrim: () => lTrim,
  lowerCase: () => lowerCase,
  lowerFirst: () => lowerFirst,
  midClip: () => midClip,
  numeronym: () => numeronym,
  obpPartSafe: () => obpPartSafe,
  parseValue: () => parseValue,
  quote: () => quote2,
  rTrim: () => rTrim,
  snakeCase: () => snakeCase,
  split: () => split2,
  splitWords: () => splitWords,
  studlyCase: () => studlyCase,
  test: () => test,
  textDecode: () => textDecode,
  textEncode: () => textEncode,
  titleCase: () => titleCase,
  toBytes: () => toBytes,
  toChars: () => toChars,
  trim: () => trim,
  unescHTML: () => unescHTML,
  unquote: () => unquote,
  upperCase: () => upperCase,
  upperFirst: () => upperFirst
});
import ipRegex from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/ip-regex/index.js";
var ipV4MaxLength, ipV6MaxLength, escHTMLMap, unescHTMLMap, whitespaceOnlyWordSplittingRegExp, boundariesOnlyWordSplittingRegExp, boundariesAndCaseOnlyWordSplittingRegExp, defaultWordSplittingRegExp, emailRegExp, ftsQueryColumnsPrefixRegExp, hasAsianCharsRegExp, byteLength, charLength, toBytes, fromBytes, textEncode, textDecode, toChars, fromChars, parseValue, trim, lTrim, rTrim, numeronym, deburr, asciiOnly, obpPartSafe, split2, splitWords, clip, midClip, lowerFirst, upperFirst, capitalize, titleCase, lowerCase, upperCase, studlyCase, camelCase, kebabCase, snakeCase, dedent, quote2, unquote, escHTML, unescHTML, escRegExp, escSelector, escFTSQuery, isAddr, isEmail, isIP, isIPHost, isIPv4, isIPv4Host, isIPv6, isIPv6Host, test, hasAsianChars;
var init_str = __esm({
  "node_modules/@clevercanyon/utilities/dist/str.js"() {
    init_obj();
    init_is();
    init_env();
    init_dom();
    init_email();
    init_to();
    ipV4MaxLength = 15;
    ipV6MaxLength = 45;
    escHTMLMap = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&apos;"
    };
    unescHTMLMap = {
      "&amp;": "&",
      "&#38;": "&",
      "&#038;": "&",
      "&#x26;": "&",
      "&#x0026;": "&",
      "&lt;": "<",
      "&#60;": "<",
      "&#060;": "<",
      "&#x3c;": "<",
      "&#x003c;": "<",
      "&gt;": ">",
      "&#62;": ">",
      "&#062;": ">",
      "&#x3e;": ">",
      "&#x003e;": ">",
      "&quot;": '"',
      "&#34;": '"',
      "&#034;": '"',
      "&#x22;": '"',
      "&#x0022;": '"',
      "&apos;": "'",
      "&#39;": "'",
      "&#039;": "'",
      "&#x27;": "'",
      "&#x0027;": "'",
      "&nbsp;": "\xA0"
    };
    whitespaceOnlyWordSplittingRegExp = /(\s+)/u;
    boundariesOnlyWordSplittingRegExp = /([^\p{L}\p{N}]+)/u;
    boundariesAndCaseOnlyWordSplittingRegExp = new RegExp("([^\\p{L}\\p{N}]+|(?<=\\p{Ll})(?=\\p{Lu})|(?<=\\p{L})(?=\\p{Lu}\\p{Ll}))", "u");
    defaultWordSplittingRegExp = new RegExp("([^\\p{L}\\p{N}]+|(?<=\\p{L})(?=\\p{N})|(?<=\\p{N})(?=\\p{L})|(?<=[\\p{Ll}\\p{N}])(?=\\p{Lu})|(?<=[\\p{L}\\p{N}])(?=\\p{Lu}\\p{Ll}))", "u");
    emailRegExp = /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9-]+)*$/iu;
    ftsQueryColumnsPrefixRegExp = /^(?:-\s+)?(?:[a-z_0-9]+:|\{[a-z_\s0-9]+\}:)/iu;
    hasAsianCharsRegExp = /[\u0900-\u097f\u3040-\u30ff\u3400-\u4dbf\u4e00-\u9fff\uf900-\ufaff\uff66-\uff9f\u3131-\ud79d\u0e00-\u0e7f\u0a00-\u0a7f\u0b80-\u0bff\u0f00-\u0fdf\u0fc0-\u0fff]/iu;
    byteLength = (str) => {
      return toBytes(str).length;
    };
    charLength = (str) => {
      return toChars(str).length;
    };
    toBytes = (str) => {
      return textEncode(str);
    };
    fromBytes = (bytes) => {
      return textDecode(bytes);
    };
    textEncode = (str) => {
      return new TextEncoder().encode(str);
    };
    textDecode = (buffer2) => {
      return new TextDecoder().decode(buffer2);
    };
    toChars = (str) => {
      return [...str];
    };
    fromChars = (chars) => {
      return chars.join("");
    };
    parseValue = (str) => {
      const ewa = str.endsWith("*");
      let v = ewa ? str.slice(0, -1) : str;
      if ("null" === v) {
        v = ewa ? v : null;
      } else if ("undefined" === v) {
        v = ewa ? v : void 0;
      } else if ("true" === v) {
        v = ewa ? v : true;
      } else if ("false" === v) {
        v = ewa ? v : false;
      } else if ("NaN" === v) {
        v = ewa ? v : NaN;
      } else if ("-Infinity" === v) {
        v = ewa ? v : -Infinity;
      } else if ("Infinity" === v) {
        v = ewa ? v : Infinity;
      } else if (numeric(v, "integer")) {
        v = ewa ? v : parseInt(v, 10);
      } else if (numeric(v, "float")) {
        v = ewa ? v : parseFloat(v);
      } else {
        v = str;
      }
      return v;
    };
    trim = (str, additionalChars, options4) => {
      const opts = defaults({}, options4 || {}, { left: true, right: true });
      let regExp2;
      if (additionalChars) {
        const escAdditionalChars = escRegExp(additionalChars);
        if (opts.left && !opts.right) {
          regExp2 = new RegExp("^[\\s" + escAdditionalChars + "]+", "gu");
        } else if (opts.right && !opts.left) {
          regExp2 = new RegExp("[\\s" + escAdditionalChars + "]+$", "gu");
        } else {
          regExp2 = new RegExp("^[\\s" + escAdditionalChars + "]+|[\\s" + escAdditionalChars + "]+$", "gu");
        }
      } else {
        if (opts.left && !opts.right) {
          regExp2 = /^\s+/gu;
        } else if (opts.right && !opts.left) {
          regExp2 = /\s+$/gu;
        } else {
          regExp2 = /^\s+|\s+$/gu;
        }
      }
      return str.replace(regExp2, "");
    };
    lTrim = (str, additionalChars, options4) => {
      return trim(str, additionalChars, { ...options4 || {}, left: true, right: false });
    };
    rTrim = (str, additionalChars, options4) => {
      return trim(str, additionalChars, { ...options4 || {}, left: false, right: true });
    };
    numeronym = (str) => {
      str = trim(
        asciiOnly(str).toLowerCase().replace(/[^a-z0-9.]+/gu, "").replace(/\.+/u, "."),
        "."
      );
      if (str.length < 3)
        str += "x".repeat(3 - str.length);
      return str[0] + String(str.length - 2) + str[str.length - 1];
    };
    deburr = (str) => {
      return str.normalize("NFKD").replace(/[\p{Diacritic}]/gu, "");
    };
    asciiOnly = (str) => {
      return deburr(str).replaceAll("\uA4FA", "..").replace(/[^\p{ASCII}]/gu, "");
    };
    obpPartSafe = (str) => {
      return str.replace(/\[/gu, "\u298D").replace(/\]/gu, "\u298E").replace(/\./gu, "\u1C79").replace(/ꓺ/gu, "\u1C79\u1C79");
    };
    split2 = (str, delimiter, limit) => {
      if (0 === limit) {
        return [];
      }
      if ("" === delimiter) {
        throw Error("dN4Gt9m7");
      }
      if (!finite(limit) || limit < 0) {
        return str.split(delimiter);
      }
      const parts = [], d = delimiter, regExp$1 = !regExp(d) ? new RegExp(escRegExp(d), "g") : new RegExp(d.source, d.flags.includes("g") ? d.flags : d.flags + "g");
      let lastIndex = 0, match2 = null;
      while (parts.length < limit - 1 && (match2 = regExp$1.exec(str)) !== null) {
        parts.push(str.slice(lastIndex, match2.index));
        lastIndex = regExp$1.lastIndex;
        if (0 === lastIndex && parts.length > 1) {
          throw Error("EtjAg4dj");
        }
      }
      if (parts.length <= limit - 1) {
        parts.push(str.slice(lastIndex));
      }
      return parts;
    };
    splitWords = (str, options4) => {
      const opts = defaults({}, options4 || {}, { strategy: "default" });
      let wordSplittingRegExp = defaultWordSplittingRegExp;
      if ("whitespaceOnly" === opts.strategy) {
        wordSplittingRegExp = whitespaceOnlyWordSplittingRegExp;
      } else if ("boundariesOnly" === opts.strategy) {
        wordSplittingRegExp = boundariesOnlyWordSplittingRegExp;
      } else if ("boundariesAndCaseOnly" === opts.strategy) {
        wordSplittingRegExp = boundariesAndCaseOnlyWordSplittingRegExp;
      }
      return str.split(wordSplittingRegExp).map((v) => v.trim()).filter((v) => {
        return "" === v || /^[^\p{L}\p{N}]+$/u.test(v) ? false : true;
      });
    };
    clip = (str, options4) => {
      const opts = defaults({}, options4 || {}, { maxBytes: Infinity, maxChars: Infinity, indicator: "[\u2026]" });
      if (safeArrayKey(opts.maxBytes) && opts.maxBytes > 0 && byteLength(str) > opts.maxBytes) {
        str = fromBytes(toBytes(str).slice(0, Math.max(0, opts.maxBytes - byteLength(opts.indicator)))) + opts.indicator;
      } else if (safeArrayKey(opts.maxChars) && opts.maxChars > 0 && charLength(str) > opts.maxChars) {
        str = fromChars(toChars(str).slice(0, Math.max(0, opts.maxChars - charLength(opts.indicator)))) + opts.indicator;
      }
      return str;
    };
    midClip = (str, options4) => {
      const opts = defaults({}, options4 || {}, { maxBytes: Infinity, maxChars: Infinity, indicator: "[\u2026]" });
      if (safeArrayKey(opts.maxBytes) && opts.maxBytes > 0 && byteLength(str) > opts.maxBytes) {
        const bytes = toBytes(str), indicatorBytes = toBytes(opts.indicator), maxLeftBytes = Math.max(0, Math.ceil((opts.maxBytes - indicatorBytes.length) / 2)), leftBytes = bytes.slice(0, Math.max(0, maxLeftBytes)), rightBytes = bytes.slice(-Math.max(0, opts.maxBytes - leftBytes.length - indicatorBytes.length));
        str = fromBytes(leftBytes) + opts.indicator + fromBytes(rightBytes);
      } else if (safeArrayKey(opts.maxChars) && opts.maxChars > 0 && charLength(str) > opts.maxChars) {
        const chars = toChars(str), indicatorChars = toChars(opts.indicator), maxLeftChars = Math.max(0, Math.ceil((opts.maxChars - indicatorChars.length) / 2)), leftChars = chars.slice(0, Math.max(0, maxLeftChars)), rightChars = chars.slice(-Math.max(0, opts.maxChars - leftChars.length - indicatorChars.length));
        str = fromChars(leftChars) + opts.indicator + fromChars(rightChars);
      }
      return str;
    };
    lowerFirst = (str) => {
      const arr = [...str];
      if (arr[0]) {
        arr[0] = arr[0].toLowerCase();
      }
      return arr.join("");
    };
    upperFirst = (str) => {
      const arr = [...str];
      if (arr[0]) {
        arr[0] = arr[0].toUpperCase();
      }
      return arr.join("");
    };
    capitalize = (str) => {
      const arr = [...str.toLowerCase()];
      if (arr[0]) {
        arr[0] = arr[0].toUpperCase();
      }
      return arr.join("");
    };
    titleCase = (str, options4) => {
      const opts = defaults({}, options4 || {}, { asciiOnly: false, splitStrategy: "default" });
      let words = splitWords(str, { strategy: opts.splitStrategy });
      if (opts.asciiOnly) {
        words = splitWords(asciiOnly(words.join(" ")), { strategy: opts.splitStrategy });
      }
      for (let key = 0; key < words.length; key++) {
        words[key] = words[key].split(/([\p{Pd}]+)/u).map((word) => capitalize(word)).join("");
      }
      return words.join(" ");
    };
    lowerCase = (str, options4) => {
      const opts = defaults({}, options4 || {}, { asciiOnly: false, splitStrategy: "default" });
      let words = splitWords(str, { strategy: opts.splitStrategy });
      if (opts.asciiOnly) {
        words = splitWords(asciiOnly(words.join(" ")), { strategy: opts.splitStrategy });
      }
      return words.join(" ").toLowerCase();
    };
    upperCase = (str, options4) => {
      return lowerCase(str, { ...options4 || {} }).toUpperCase();
    };
    studlyCase = (str, options4) => {
      const opts = defaults({}, options4 || {}, { asciiOnly: false, splitStrategy: "default", letterFirst: "" });
      let words = splitWords(str, { strategy: opts.splitStrategy });
      if (opts.asciiOnly) {
        words = splitWords(asciiOnly(words.join(" ")), { strategy: opts.splitStrategy });
      }
      for (let key = 0; key < words.length; key++) {
        words[key] = capitalize(words[key]);
        if (0 === key) {
          if (opts.letterFirst && !new RegExp("^\\p{L}", "u").test(words[key])) {
            words[key] = opts.letterFirst + words[key];
          }
        }
      }
      return words.join("");
    };
    camelCase = (str, options4) => {
      const opts = defaults({}, options4 || {}, { asciiOnly: false, splitStrategy: "default", letterFirst: "" });
      let words = splitWords(str, { strategy: opts.splitStrategy });
      if (opts.asciiOnly) {
        words = splitWords(asciiOnly(words.join(" ")), { strategy: opts.splitStrategy });
      }
      for (let key = 0; key < words.length; key++) {
        if (0 === key) {
          words[key] = words[key].toLowerCase();
          if (opts.letterFirst && !new RegExp("^\\p{L}", "u").test(words[key])) {
            words[key] = opts.letterFirst + words[key];
          }
        } else {
          if (new RegExp("\\p{Lm}$", "u").test(words[key - 1])) {
            words[key] = words[key].toLowerCase();
          } else {
            words[key] = capitalize(words[key]);
          }
        }
      }
      return words.join("");
    };
    kebabCase = (str, options4) => {
      const opts = defaults({}, options4 || {}, { asciiOnly: false, splitStrategy: "default", letterFirst: "" });
      let words = splitWords(str, { strategy: opts.splitStrategy });
      if (opts.asciiOnly) {
        words = splitWords(asciiOnly(words.join(" ")), { strategy: opts.splitStrategy });
      }
      for (let key = 0; key < words.length; key++) {
        words[key] = words[key].toLowerCase();
        if (0 === key) {
          if (opts.letterFirst && !new RegExp("^\\p{L}", "u").test(words[key])) {
            words[key] = opts.letterFirst + words[key];
          }
        } else {
          if (new RegExp("\\p{Lm}$", "u").test(words[key - 1])) {
            words[key] = words[key - 1] + words[key];
            words[key - 1] = "";
          }
        }
      }
      return words.filter((w) => "" !== w).join("-");
    };
    snakeCase = (str, options4) => {
      return kebabCase(str, { ...options4 || {} }).replaceAll("-", "_");
    };
    dedent = (str) => {
      str = str.replace(/^[ \t]*\r?\n/u, "");
      const indent = /^[ \t]+/mu.exec(str);
      if (indent)
        str = str.replace(new RegExp("^" + indent[0], "gmu"), "");
      return str.replace(/\r?\n[ \t]*$/u, "");
    };
    quote2 = (str, options4 = {}) => {
      const opts = defaults({}, options4, { type: "single" });
      switch (opts.type) {
        case "double": {
          return '"' + str.replace(/"/gu, "\\$&") + '"';
        }
        case "single":
        default: {
          return "'" + str.replace(/'/gu, "\\$&") + "'";
        }
      }
    };
    unquote = (str, options4 = {}) => {
      const opts = defaults({}, options4, { type: "auto" });
      switch (opts.type) {
        case "double": {
          if (str.startsWith('"') && str.endsWith('"')) {
            str = str.slice(1, -1).replace(/\\"/gu, '"');
          }
          return str;
        }
        case "single": {
          if (str.startsWith("'") && str.endsWith("'")) {
            str = str.slice(1, -1).replace(/\\'/gu, "'");
          }
          return str;
        }
        case "auto":
        default: {
          if (str.startsWith('"') && str.endsWith('"')) {
            str = str.slice(1, -1).replace(/\\"/gu, '"');
          } else if (str.startsWith("'") && str.endsWith("'")) {
            str = str.slice(1, -1).replace(/\\'/gu, "'");
          }
          return str;
        }
      }
    };
    escHTML = (str, options4) => {
      const defaultOpts = { doubleEncode: false }, opts = defaults({}, options4 || {}, defaultOpts);
      if (!opts.doubleEncode)
        str = unescHTML(str);
      const regExp2 = new RegExp(Object.keys(escHTMLMap).join("|"), "giu");
      return str.replace(regExp2, (char) => escHTMLMap[char]);
    };
    unescHTML = (str) => {
      if (isWeb()) {
        const div = create("div");
        div.innerHTML = str;
        return div.innerText;
      }
      const regExp2 = new RegExp(Object.keys(unescHTMLMap).join("|"), "giu");
      return str.replace(regExp2, (entity) => unescHTMLMap[entity]);
    };
    escRegExp = (str) => {
      return str.replace(/[.*+?^${}()|[\]\\]/gu, "\\$&");
    };
    escSelector = (str) => {
      return str.replace(/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~]/gu, "\\$&");
    };
    escFTSQuery = (str, options4) => {
      if (!(str = str.trim()))
        return str;
      const opts = defaults({}, options4 || {}, { defaultColumns: [] });
      let query2 = ftsQueryColumnsPrefixRegExp.test(str) ? str : (opts.defaultColumns.length ? "{" + opts.defaultColumns.join(" ") + "}: " : "") + str;
      let queryParts = [];
      if (ftsQueryColumnsPrefixRegExp.test(query2)) {
        const sliceAtIndexPosition = query2.indexOf(":") + 1;
        queryParts[0] = query2.slice(0, sliceAtIndexPosition).trim();
        queryParts[1] = query2.slice(sliceAtIndexPosition).trim();
      } else {
        queryParts = ["", query2.trim()];
      }
      queryParts[1] = (queryParts[1].match(/(?:"[^"]*"|[^\s"]+)/gu) || []).map((piece) => {
        piece = piece.trim();
        if (["{", "}", "(", ")"].includes(piece))
          return piece;
        if ('"' === piece[0] && piece[piece.length - 1] === '"')
          return piece;
        return piece.replaceAll('"', "").replace(/([^\p{L}\p{N}\p{Co}\s{}:()^*+-]+)/gu, '"$1"').replace(/(?<!^|\()([-^]+)/gu, '"$1"').replace(/(?<![a-z0-9}])(:+)/gu, '"$1"');
      }).join(" ").replace(/([{(]+)\s+/gu, "$1").replace(/\s+([)}]+)/gu, "$1");
      return queryParts.join(" ").trim();
    };
    isAddr = (str) => {
      return parseAddr(str) ? true : false;
    };
    isEmail = (str) => {
      if (!str)
        return false;
      const parts = str.split("@");
      if (2 !== parts.length || parts[0].length > 64 || // Username.
      parts[1].length > 255 || // Hostname.
      parts[1].split(".").some((part) => part.length > 63))
        return false;
      return emailRegExp.test(str);
    };
    isIP = (str) => {
      if (str.length > ipV6MaxLength) {
        return false;
      }
      return ipRegex({ exact: true }).test(str);
    };
    isIPHost = (str) => {
      return isIPv4Host(str) || isIPv6Host(str);
    };
    isIPv4 = (str) => {
      if (str.length > ipV4MaxLength) {
        return false;
      }
      return ipRegex.v4({ exact: true }).test(str);
    };
    isIPv4Host = (str) => {
      if (str.length > ipV4MaxLength + 6) {
        return false;
      }
      return isIPv4(str.replace(/:[0-9]+$/u, ""));
    };
    isIPv6 = (str) => {
      if (str.length > ipV6MaxLength) {
        return false;
      }
      return ipRegex.v6({ exact: true }).test(str);
    };
    isIPv6Host = (str) => {
      if (str.length > ipV6MaxLength + 1 + 1 + 6) {
        return false;
      }
      if (!str.startsWith("[") || !/\](?::[0-9]+)?$/u.test(str)) {
        return false;
      }
      return isIPv6(str.replace(/^\[|\](?::[0-9]+)?$/gu, ""));
    };
    test = (str, regExp2) => {
      return array2(regExp2).some((regExp22) => regExp22.test(str));
    };
    hasAsianChars = (str) => {
      return hasAsianCharsRegExp.test(str);
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/resources/classes/brand.js
var Brand, getClass7;
var init_brand = __esm({
  "node_modules/@clevercanyon/utilities/dist/resources/classes/brand.js"() {
    init_utility();
    init_obj();
    init_symbol();
    getClass7 = () => {
      if (Brand)
        return Brand;
      Brand = class extends getClass2() {
        /**
         * Org brand object.
         */
        org;
        /**
         * Type; {@see Type}.
         */
        type;
        /**
         * Legal name; e.g., `My Brand, Inc.`.
         */
        legalName;
        /**
         * Address broken out into parts.
         */
        address;
        /**
         * Brand founder; i.e., a Profile.
         */
        founder;
        /**
         * Founding date; e.g., `2023-10-03`.
         */
        foundingDate;
        /**
         * Number of employees; e.g., `10`.
         */
        numberOfEmployees;
        /**
         * Numeronym; e.g., `My Brand` = `m5d`.
         */
        n7m;
        /**
         * Name; e.g., `My Brand`.
         */
        name;
        /**
         * Pkg name; e.g., `@org/my-brand`.
         */
        pkgName;
        /**
         * Namespace; e.g., `MyBrand`.
         */
        namespace;
        /**
         * Hostname; e.g., `my-brand.com`.
         */
        hostname;
        /**
         * MX hostname; e.g., `mail.my-brand.com`.
         */
        mxHostname;
        /**
         * URL; e.g., `https://my-brand.com/`.
         */
        url;
        /**
         * URL; e.g., `https://status.my-brand.com/`.
         */
        statusURL;
        /**
         * Search action (optional, but recommended).
         */
        searchAction;
        /**
         * Slug; e.g., `my-brand`.
         */
        slug;
        /**
         * Var; e.g., `my_brand`.
         */
        var;
        /**
         * Slug prefix; e.g., `my-brand-`.
         */
        slugPrefix;
        /**
         * Var prefix; e.g., `my_brand_`.
         */
        varPrefix;
        /**
         * Slogan; e.g., `We rock.`.
         */
        slogan;
        /**
         * Description; e.g., `We’re the people that rock.`.
         */
        description;
        /**
         * Theme, with colors, etc.
         */
        theme;
        /**
         * Icon, with dimensions.
         */
        icon;
        /**
         * Logo, with dimensions.
         */
        logo;
        /**
         * OG image, with dimensions.
         */
        ogImage;
        /**
         * Screenshots, with dimensions.
         */
        screenshots;
        /**
         * Policies; terms/privacy.
         */
        policies;
        /**
         * Contacts; admin, security, etc.
         */
        contacts;
        /**
         * Social profile URLs.
         */
        socialProfiles;
        /**
         * Object constructor.
         *
         * @param props Props or instance.
         */
        constructor(props) {
          super();
          const isClone = props instanceof Brand;
          for (const [key, value] of keyAndSymbolEntries(props)) {
            this[key] = value;
          }
          if (!(this.org instanceof Brand)) {
            this.org = this;
          }
          if (isClone)
            ;
          else {
            deepFreeze(this);
          }
        }
        /**
         * {@see $obj.clone()}, {@see $obj.cloneDeep()} helper.
         *
         * @returns True if object clones should be frozen deeply.
         */
        get [objDeepFreezeClones]() {
          return true;
        }
        /**
         * {@see $json.stringify()} helper.
         *
         * @returns What value to derive a JSON value from.
         */
        [objToJSON]() {
          return this.rawProps();
        }
        /**
         * Produces raw props.
         *
         * @returns Object {@see RawProps}.
         */
        rawProps() {
          return deepFreeze({ ...this, org: this.org.slug });
        }
      };
      return Object.defineProperty(Brand, "name", {
        ...Object.getOwnPropertyDescriptor(Brand, "name"),
        value: "Brand"
      });
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/brand.js
var brand_exports = {};
__export(brand_exports, {
  add: () => add,
  addApp: () => addApp,
  get: () => get5,
  remove: () => remove
});
var rawPropsInitialized2, instances2, rawProps2, t\uA4FAaddress2, t\uA4FAasciiOnly, t\uA4FAadmin, t\uA4FAassets, t\uA4FAbrand, t\uA4FAbrands, t\uA4FAcity, t\uA4FAclevercanyon, t\uA4FACleverCanyon, t\uA4FAClever\u{110B1}Canyon, t\uA4FAcolor2, t\uA4FA\u0D02com2, t\uA4FAcompany, t\uA4FAcookies, t\uA4FAcontact, t\uA4FAcontacts, t\uA4FAcorp, t\uA4FAcountry, t\uA4FAdescription3, t\uA4FAdesktop, t\uA4FAdiscord, t\uA4FAemail, t\uA4FAdsar, t\uA4FAfacebook2, t\uA4FAfgColor, t\uA4FAfounder2, t\uA4FAfoundingDate, t\uA4FA\u0D02gdn, t\uA4FAgithub2, t\uA4FAheadingColor, t\uA4FAheight, t\uA4FAhop, t\uA4FAHop, t\uA4FAHop\u0D02gdn, t\uA4FAhostname, t\uA4FAmxHostname, t\uA4FAhttps\uA4FD\u2CC7\u2CC72, t\uA4FAicon2, t\uA4FAicon\u1C7C2x, t\uA4FA\u0D02io2, t\uA4FAinfo, t\uA4FAisDark, t\uA4FAjaswrks2, t\uA4FAkeybase2, t\uA4FAlegalName, t\uA4FAletterFirst, t\uA4FAlineColor, t\uA4FAlinkColor, t\uA4FAlinkedin2, t\uA4FAlogo, t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg, t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg\u1C7C2x, t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg, t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg\u1C7C2x, t\uA4FA\u0D02me, t\uA4FAmobile, t\uA4FAn7m, t\uA4FAname, t\uA4FAnamespace, t\uA4FAnpm2, t\uA4FAnpmjs2, t\uA4FAnumberOfEmployees, t\uA4FAo5p, t\uA4FAO5p, t\uA4FAogImage2, t\uA4FAog\u1C7Cimage, t\uA4FAog\u1C7Cimage\u1C7C2x, t\uA4FAonDarkBg, t\uA4FAonLightBg, t\uA4FAorg, t\uA4FA\u0D02org, t\uA4FAphone, t\uA4FApkgName, t\uA4FApng, t\uA4FA\u0D02png, t\uA4FApolicies, t\uA4FAprivacy, t\uA4FAscreenshots, t\uA4FAsecurity, t\uA4FAslogan, t\uA4FAslug, t\uA4FAslugPrefix, t\uA4FAsocialProfiles2, t\uA4FAss\u1C7Cdesktop\u1C7CN, t\uA4FAss\u1C7Cdesktop\u1C7CN\u1C7C2x, t\uA4FAss\u1C7Cmobile\u1C7CN, t\uA4FAss\u1C7Cmobile\u1C7CN\u1C7C2x, t\uA4FAstate, t\uA4FAstatus, t\uA4FAstatusURL, t\uA4FAstreet, t\uA4FAsupport, t\uA4FAsvg2, t\uA4FA\u0D02svg, t\uA4FAteam, t\uA4FAterms, t\uA4FAtheme2, t\uA4FAtwitter2, t\uA4FAtype2, t\uA4FAurl2, t\uA4FAvar, t\uA4FAvarPrefix, t\uA4FAwidth, t\uA4FAwww\u0D022, t\uA4FAx2, t\uA4FAzip, t\uA4FAv\uA4FA1\u1C7C888\u1C7C, t\uA4FAv\uA4FAo5pPhone, t\uA4FAv\uA4FAc10nPhone, t\uA4FAo5p\u0D02org, t\uA4FA\u0DB8o5p\u0D02org, t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org, t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7legal\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7status\u0D02o5p\u0D02org\u2CC7, t\uA4FAo5p\u0D02me, t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02me, t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02me\u2CC7, t\uA4FAclevercanyon\u0D02com, t\uA4FA\u0DB8clevercanyon\u0D02com, t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com, t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7legal\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7status\u0D02clevercanyon\u0D02com\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7discord\u0D02clevercanyon\u0D02com\u2CC7, t\uA4FAhop\u0D02gdn, t\uA4FA\u0DB8hop\u0D02gdn, t\uA4FAhttps\uA4FD\u2CC7\u2CC7hop\u0D02gdn, t\uA4FAhttps\uA4FD\u2CC7\u2CC7hop\u0D02gdn\u2CC7, t\uA4FA\u0DB8jaswrks, t\uA4FA\u0DB8jaswrks\u2CC7o5p\u0D02org, t\uA4FA\u0DB8jaswrks\u2CC7o5p\u0D02me, t\uA4FA\u0DB8clevercanyon, t\uA4FA\u0DB8clevercanyon\u2CC7clevercanyon\u0D02com, t\uA4FA\u0DB8clevercanyon\u2CC7hop\u0D02gdn, t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7, t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p, t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon, t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop, t\uA4FA\u0D02\u2CC7assets\u2CC7brand, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7icon, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7icon\u1C7C2x, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Cdark\u1C7Cbg, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Cdark\u1C7Cbg\u1C7C2x, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Clight\u1C7Cbg, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Clight\u1C7Cbg\u1C7C2x, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7og\u1C7Cimage, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7og\u1C7Cimage\u1C7C2x, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cdesktop\u1C7CN, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cdesktop\u1C7CN\u1C7C2x, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cmobile\u1C7CN, t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cmobile\u1C7CN\u1C7C2x, t\uA4FAobj\uA4FAwidthHeight\u1C7C304x60\u02E32\uA60C608x120, t\uA4FAobj\uA4FAwidthHeight\u1C7C433x60\u02E32\uA60C866x120, t\uA4FAobj\uA4FAwidthHeight\u1C7C512x512\u02E32\uA60C1024x1024, t\uA4FAobj\uA4FAwidthHeight\u1C7C1200x630\u02E32\uA60C2400x1260, t\uA4FAobj\uA4FAwidthHeight\u1C7C630x1200\u02E32\uA60C1260x2400, add, remove, get5, initializeRawProps2, addApp;
var init_brand2 = __esm({
  "node_modules/@clevercanyon/utilities/dist/brand.js"() {
    init_obj();
    init_brand();
    init_app();
    init_url();
    init_str();
    init_profile2();
    rawPropsInitialized2 = false;
    instances2 = {};
    rawProps2 = {};
    t\uA4FAaddress2 = "address";
    t\uA4FAasciiOnly = "asciiOnly";
    t\uA4FAadmin = "admin";
    t\uA4FAassets = "assets";
    t\uA4FAbrand = "brand";
    t\uA4FAbrands = t\uA4FAbrand + "s";
    t\uA4FAcity = "city";
    t\uA4FAclevercanyon = "clevercanyon";
    t\uA4FACleverCanyon = "CleverCanyon";
    t\uA4FAClever\u{110B1}Canyon = "Clever Canyon";
    t\uA4FAcolor2 = "color";
    t\uA4FA\u0D02com2 = ".com";
    t\uA4FAcompany = "company";
    t\uA4FAcookies = "cookies";
    t\uA4FAcontact = "contact";
    t\uA4FAcontacts = "contacts";
    t\uA4FAcorp = "corp";
    t\uA4FAcountry = "country";
    t\uA4FAdescription3 = "description";
    t\uA4FAdesktop = "desktop";
    t\uA4FAdiscord = "discord";
    t\uA4FAemail = "email";
    t\uA4FAdsar = "dsar";
    t\uA4FAfacebook2 = "facebook";
    t\uA4FAfgColor = "fgColor";
    t\uA4FAfounder2 = "founder";
    t\uA4FAfoundingDate = "foundingDate";
    t\uA4FA\u0D02gdn = ".gdn";
    t\uA4FAgithub2 = "github";
    t\uA4FAheadingColor = "headingColor";
    t\uA4FAheight = "height";
    t\uA4FAhop = "hop";
    t\uA4FAHop = "Hop";
    t\uA4FAHop\u0D02gdn = t\uA4FAHop + t\uA4FA\u0D02gdn;
    t\uA4FAhostname = "hostname";
    t\uA4FAmxHostname = "mxHostname";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC72 = "https://";
    t\uA4FAicon2 = "icon";
    t\uA4FAicon\u1C7C2x = t\uA4FAicon2 + "-2x";
    t\uA4FA\u0D02io2 = ".io";
    t\uA4FAinfo = "info";
    t\uA4FAisDark = "isDark";
    t\uA4FAjaswrks2 = "jaswrks";
    t\uA4FAkeybase2 = "keybase";
    t\uA4FAlegalName = "legalName";
    t\uA4FAletterFirst = "letterFirst";
    t\uA4FAlineColor = "lineColor";
    t\uA4FAlinkColor = "linkColor";
    t\uA4FAlinkedin2 = "linkedin";
    t\uA4FAlogo = "logo";
    t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg = t\uA4FAlogo + "-on-dark-bg";
    t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg\u1C7C2x = t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg + "-2x";
    t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg = t\uA4FAlogo + "-on-light-bg-2x";
    t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg\u1C7C2x = t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg + "-2x";
    t\uA4FA\u0D02me = ".me";
    t\uA4FAmobile = "mobile";
    t\uA4FAn7m = "n7m";
    t\uA4FAname = "name";
    t\uA4FAnamespace = "namespace";
    t\uA4FAnpm2 = "npm";
    t\uA4FAnpmjs2 = t\uA4FAnpm2 + "js";
    t\uA4FAnumberOfEmployees = "numberOfEmployees";
    t\uA4FAo5p = "o5p";
    t\uA4FAO5p = "O5p";
    t\uA4FAogImage2 = "ogImage";
    t\uA4FAog\u1C7Cimage = "og-image";
    t\uA4FAog\u1C7Cimage\u1C7C2x = t\uA4FAog\u1C7Cimage + "-2x";
    t\uA4FAonDarkBg = "onDarkBg";
    t\uA4FAonLightBg = "onLightBg";
    t\uA4FAorg = "org";
    t\uA4FA\u0D02org = "." + t\uA4FAorg;
    t\uA4FAphone = "phone";
    t\uA4FApkgName = "pkgName";
    t\uA4FApng = "png";
    t\uA4FA\u0D02png = "." + t\uA4FApng;
    t\uA4FApolicies = "policies";
    t\uA4FAprivacy = "privacy";
    t\uA4FAscreenshots = "screenshots";
    t\uA4FAsecurity = "security";
    t\uA4FAslogan = "slogan";
    t\uA4FAslug = "slug";
    t\uA4FAslugPrefix = "slugPrefix";
    t\uA4FAsocialProfiles2 = "socialProfiles";
    t\uA4FAss\u1C7Cdesktop\u1C7CN = "ss-" + t\uA4FAdesktop + "-{N}";
    t\uA4FAss\u1C7Cdesktop\u1C7CN\u1C7C2x = t\uA4FAss\u1C7Cdesktop\u1C7CN + "-2x";
    t\uA4FAss\u1C7Cmobile\u1C7CN = "ss-" + t\uA4FAmobile + "-{N}";
    t\uA4FAss\u1C7Cmobile\u1C7CN\u1C7C2x = t\uA4FAss\u1C7Cmobile\u1C7CN + "-2x";
    t\uA4FAstate = "state";
    t\uA4FAstatus = "status";
    t\uA4FAstatusURL = "statusURL";
    t\uA4FAstreet = "street";
    t\uA4FAsupport = "support";
    t\uA4FAsvg2 = "svg";
    t\uA4FA\u0D02svg = "." + t\uA4FAsvg2;
    t\uA4FAteam = "team";
    t\uA4FAterms = "terms";
    t\uA4FAtheme2 = "theme";
    t\uA4FAtwitter2 = "twitter";
    t\uA4FAtype2 = "type";
    t\uA4FAurl2 = "url";
    t\uA4FAvar = "var";
    t\uA4FAvarPrefix = "varPrefix";
    t\uA4FAwidth = "width";
    t\uA4FAwww\u0D022 = "www.";
    t\uA4FAx2 = "x";
    t\uA4FAzip = "zip";
    t\uA4FAv\uA4FA1\u1C7C888\u1C7C = "1-888-";
    t\uA4FAv\uA4FAo5pPhone = t\uA4FAv\uA4FA1\u1C7C888\u1C7C + "355-0032";
    t\uA4FAv\uA4FAc10nPhone = t\uA4FAv\uA4FA1\u1C7C888\u1C7C + "346-0222";
    t\uA4FAo5p\u0D02org = t\uA4FAo5p + t\uA4FA\u0D02org;
    t\uA4FA\u0DB8o5p\u0D02org = "@" + t\uA4FAo5p\u0D02org;
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org = t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAo5p\u0D02org;
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org + "/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7legal\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org + "/legal/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7status\u0D02o5p\u0D02org\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAstatus + "." + t\uA4FAo5p\u0D02org + "/";
    t\uA4FAo5p\u0D02me = t\uA4FAo5p + t\uA4FA\u0D02me;
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02me = t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAo5p\u0D02me;
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02me\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02me + "/";
    t\uA4FAclevercanyon\u0D02com = t\uA4FAclevercanyon + t\uA4FA\u0D02com2;
    t\uA4FA\u0DB8clevercanyon\u0D02com = "@" + t\uA4FAclevercanyon\u0D02com;
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com = t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAclevercanyon\u0D02com;
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com + "/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7legal\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com + "/legal/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7status\u0D02clevercanyon\u0D02com\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAstatus + "." + t\uA4FAclevercanyon\u0D02com + "/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7discord\u0D02clevercanyon\u0D02com\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAdiscord + "." + t\uA4FAclevercanyon\u0D02com + "/";
    t\uA4FAhop\u0D02gdn = t\uA4FAhop + t\uA4FA\u0D02gdn;
    t\uA4FA\u0DB8hop\u0D02gdn = "@" + t\uA4FAhop\u0D02gdn;
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7hop\u0D02gdn = t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAhop\u0D02gdn;
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7hop\u0D02gdn\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC7hop\u0D02gdn + "/";
    t\uA4FA\u0DB8jaswrks = "@" + t\uA4FAjaswrks2;
    t\uA4FA\u0DB8jaswrks\u2CC7o5p\u0D02org = t\uA4FA\u0DB8jaswrks + "/" + t\uA4FAo5p\u0D02org;
    t\uA4FA\u0DB8jaswrks\u2CC7o5p\u0D02me = t\uA4FA\u0DB8jaswrks + "/" + t\uA4FAo5p\u0D02me;
    t\uA4FA\u0DB8clevercanyon = "@" + t\uA4FAclevercanyon;
    t\uA4FA\u0DB8clevercanyon\u2CC7clevercanyon\u0D02com = t\uA4FA\u0DB8clevercanyon + "/" + t\uA4FAclevercanyon\u0D02com;
    t\uA4FA\u0DB8clevercanyon\u2CC7hop\u0D02gdn = t\uA4FA\u0DB8clevercanyon + "/" + t\uA4FAhop\u0D02gdn;
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7 = t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + "r2." + t\uA4FAhop\u0D02gdn + "/" + t\uA4FAassets + "/" + t\uA4FAbrands + "/";
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p = t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7 + t\uA4FAo5p;
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon = t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7 + t\uA4FAclevercanyon;
    t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop = t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7 + t\uA4FAhop;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand = "./" + t\uA4FAassets + "/" + t\uA4FAbrand;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7icon = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAicon2;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7icon\u1C7C2x = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAicon\u1C7C2x;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Cdark\u1C7Cbg = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Cdark\u1C7Cbg\u1C7C2x = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg\u1C7C2x;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Clight\u1C7Cbg = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Clight\u1C7Cbg\u1C7C2x = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg\u1C7C2x;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7og\u1C7Cimage = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAog\u1C7Cimage;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7og\u1C7Cimage\u1C7C2x = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAog\u1C7Cimage\u1C7C2x;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cdesktop\u1C7CN = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAss\u1C7Cdesktop\u1C7CN;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cdesktop\u1C7CN\u1C7C2x = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAss\u1C7Cdesktop\u1C7CN\u1C7C2x;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cmobile\u1C7CN = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAss\u1C7Cmobile\u1C7CN;
    t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cmobile\u1C7CN\u1C7C2x = t\uA4FA\u0D02\u2CC7assets\u2CC7brand + "/" + t\uA4FAss\u1C7Cmobile\u1C7CN\u1C7C2x;
    t\uA4FAobj\uA4FAwidthHeight\u1C7C304x60\u02E32\uA60C608x120 = { [t\uA4FAwidth]: 608, [t\uA4FAheight]: 120 };
    t\uA4FAobj\uA4FAwidthHeight\u1C7C433x60\u02E32\uA60C866x120 = { [t\uA4FAwidth]: 866, [t\uA4FAheight]: 120 };
    t\uA4FAobj\uA4FAwidthHeight\u1C7C512x512\u02E32\uA60C1024x1024 = { [t\uA4FAwidth]: 1024, [t\uA4FAheight]: 1024 };
    t\uA4FAobj\uA4FAwidthHeight\u1C7C1200x630\u02E32\uA60C2400x1260 = { [t\uA4FAwidth]: 2400, [t\uA4FAheight]: 1260 };
    t\uA4FAobj\uA4FAwidthHeight\u1C7C630x1200\u02E32\uA60C1260x2400 = { [t\uA4FAwidth]: 1260, [t\uA4FAheight]: 2400 };
    add = (pkgName22, props) => {
      if (!rawPropsInitialized2)
        initializeRawProps2();
      if (Object.hasOwn(rawProps2, pkgName22)) {
        throw Error("rcqcXjar");
      }
      rawProps2[pkgName22] = deepFreeze(props);
      return get5(pkgName22);
    };
    remove = (pkgName22) => {
      if (!rawPropsInitialized2)
        initializeRawProps2();
      if (Object.hasOwn(rawProps2, pkgName22)) {
        delete rawProps2[pkgName22];
      }
    };
    get5 = (pkgName22) => {
      if (!rawPropsInitialized2)
        initializeRawProps2();
      pkgName22 = "&" === pkgName22 ? t\uA4FA\u0DB8clevercanyon\u2CC7clevercanyon\u0D02com : (
        //
        "&&" === pkgName22 ? t\uA4FA\u0DB8clevercanyon\u2CC7hop\u0D02gdn : (
          //
          pkgName22
        )
      );
      if (!pkgName22 || !rawProps2[pkgName22]) {
        throw Error("NC4Pnsxq");
      }
      if (instances2[pkgName22]) {
        return instances2[pkgName22];
      }
      const Brand2 = getClass7();
      if (rawProps2[pkgName22].org === pkgName22) {
        instances2[pkgName22] = new Brand2({ ...rawProps2[pkgName22], [t\uA4FAorg]: void 0 });
      } else {
        instances2[pkgName22] = new Brand2({ ...rawProps2[pkgName22], [t\uA4FAorg]: get5(rawProps2[pkgName22].org) });
      }
      return instances2[pkgName22];
    };
    initializeRawProps2 = () => {
      if (rawPropsInitialized2)
        return;
      rawPropsInitialized2 = true;
      rawProps2[t\uA4FA\u0DB8jaswrks\u2CC7o5p\u0D02org] = deepFreeze({
        [t\uA4FAorg]: t\uA4FA\u0DB8jaswrks\u2CC7o5p\u0D02org,
        [t\uA4FAtype2]: t\uA4FAorg,
        // Organization.
        [t\uA4FAlegalName]: t\uA4FAO5p,
        [t\uA4FAaddress2]: {
          [t\uA4FAstreet]: "9 N River Rd #660",
          [t\uA4FAcity]: "Auburn",
          [t\uA4FAstate]: "ME",
          [t\uA4FAzip]: "04210",
          [t\uA4FAcountry]: "US"
        },
        [t\uA4FAfounder2]: get4(t\uA4FA\u0DB8jaswrks),
        [t\uA4FAfoundingDate]: "2023-10-03",
        [t\uA4FAnumberOfEmployees]: 10,
        [t\uA4FAn7m]: t\uA4FAo5p,
        [t\uA4FAname]: t\uA4FAO5p,
        [t\uA4FApkgName]: t\uA4FA\u0DB8jaswrks\u2CC7o5p\u0D02org,
        [t\uA4FAnamespace]: t\uA4FAO5p,
        [t\uA4FAhostname]: t\uA4FAo5p\u0D02org,
        [t\uA4FAmxHostname]: t\uA4FAo5p\u0D02org,
        [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7,
        [t\uA4FAstatusURL]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7status\u0D02o5p\u0D02org\u2CC7,
        [t\uA4FAslug]: t\uA4FAo5p,
        [t\uA4FAvar]: t\uA4FAo5p,
        [t\uA4FAslugPrefix]: t\uA4FAo5p + "-",
        [t\uA4FAvarPrefix]: t\uA4FAo5p + "_",
        [t\uA4FAslogan]: "Your ideas, our code, limitless possibilities.",
        [t\uA4FAdescription3]: "Your digital partner for growth and innovation.",
        [t\uA4FAtheme2]: {
          [t\uA4FAisDark]: true,
          [t\uA4FAcolor2]: "#09090b",
          [t\uA4FAfgColor]: "#f0f0f0",
          [t\uA4FAlinkColor]: "#80aff9",
          [t\uA4FAlineColor]: "#17171c",
          [t\uA4FAheadingColor]: "#5596ff"
        },
        [t\uA4FAicon2]: {
          [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAicon2 + t\uA4FA\u0D02svg,
          [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAicon\u1C7C2x + t\uA4FA\u0D02png,
          ...t\uA4FAobj\uA4FAwidthHeight\u1C7C512x512\u02E32\uA60C1024x1024
        },
        [t\uA4FAlogo]: {
          [t\uA4FAonDarkBg]: {
            [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg + t\uA4FA\u0D02svg,
            [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg\u1C7C2x + t\uA4FA\u0D02png
          },
          [t\uA4FAonLightBg]: {
            [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg + t\uA4FA\u0D02svg,
            [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg\u1C7C2x + t\uA4FA\u0D02png
          },
          ...t\uA4FAobj\uA4FAwidthHeight\u1C7C433x60\u02E32\uA60C866x120
        },
        [t\uA4FAogImage2]: {
          [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAog\u1C7Cimage + t\uA4FA\u0D02svg,
          [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAog\u1C7Cimage\u1C7C2x + t\uA4FA\u0D02png,
          ...t\uA4FAobj\uA4FAwidthHeight\u1C7C1200x630\u02E32\uA60C2400x1260
        },
        [t\uA4FAscreenshots]: {
          [t\uA4FAdesktop]: {
            ...Object.fromEntries(
              ((entries = []) => {
                for (let i = 1; i <= 3; i++)
                  entries.push([
                    i,
                    {
                      [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAss\u1C7Cdesktop\u1C7CN.replace("{N}", i.toString()) + t\uA4FA\u0D02svg,
                      [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAss\u1C7Cdesktop\u1C7CN\u1C7C2x.replace("{N}", i.toString()) + t\uA4FA\u0D02png
                    }
                  ]);
                return entries;
              })()
            ),
            ...t\uA4FAobj\uA4FAwidthHeight\u1C7C1200x630\u02E32\uA60C2400x1260
          },
          [t\uA4FAmobile]: {
            ...Object.fromEntries(
              ((entries = []) => {
                for (let i = 1; i <= 3; i++)
                  entries.push([
                    i,
                    {
                      [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAss\u1C7Cmobile\u1C7CN.replace("{N}", i.toString()) + t\uA4FA\u0D02svg,
                      [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7o5p + "/" + t\uA4FAss\u1C7Cmobile\u1C7CN\u1C7C2x.replace("{N}", i.toString()) + t\uA4FA\u0D02png
                    }
                  ]);
                return entries;
              })()
            ),
            ...t\uA4FAobj\uA4FAwidthHeight\u1C7C630x1200\u02E32\uA60C1260x2400
          }
        },
        [t\uA4FApolicies]: {
          [t\uA4FAterms]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7legal\u2CC7 + t\uA4FAterms,
          [t\uA4FAprivacy]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7legal\u2CC7 + t\uA4FAprivacy,
          [t\uA4FAcookies]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7legal\u2CC7 + t\uA4FAcookies,
          [t\uA4FAsecurity]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7legal\u2CC7 + t\uA4FAsecurity,
          [t\uA4FAdsar]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7legal\u2CC7 + t\uA4FAdsar
        },
        [t\uA4FAcontacts]: {
          [t\uA4FAadmin]: {
            [t\uA4FAemail]: t\uA4FAadmin + t\uA4FA\u0DB8o5p\u0D02org,
            [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7 + t\uA4FAcontact,
            [t\uA4FAphone]: t\uA4FAv\uA4FAo5pPhone
          },
          [t\uA4FAinfo]: {
            [t\uA4FAemail]: t\uA4FAinfo + t\uA4FA\u0DB8o5p\u0D02org,
            [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7 + t\uA4FAcontact,
            [t\uA4FAphone]: t\uA4FAv\uA4FAo5pPhone
          },
          [t\uA4FAsupport]: {
            [t\uA4FAemail]: t\uA4FAsupport + t\uA4FA\u0DB8o5p\u0D02org,
            [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7 + t\uA4FAcontact,
            [t\uA4FAphone]: t\uA4FAv\uA4FAo5pPhone
          },
          [t\uA4FAsecurity]: {
            [t\uA4FAemail]: t\uA4FAsecurity + t\uA4FA\u0DB8o5p\u0D02org,
            [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7 + t\uA4FAcontact,
            [t\uA4FAphone]: t\uA4FAv\uA4FAo5pPhone
          },
          [t\uA4FAprivacy]: {
            [t\uA4FAemail]: t\uA4FAprivacy + t\uA4FA\u0DB8o5p\u0D02org,
            [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02org\u2CC7 + t\uA4FAcontact,
            [t\uA4FAphone]: t\uA4FAv\uA4FAo5pPhone
          }
        },
        [t\uA4FAsocialProfiles2]: {
          [t\uA4FAx2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAx2 + t\uA4FA\u0D02com2 + "/" + t\uA4FAo5p + "_hq",
          [t\uA4FAtwitter2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAx2 + t\uA4FA\u0D02com2 + "/" + t\uA4FAo5p + "_hq"
        }
      });
      rawProps2[t\uA4FA\u0DB8jaswrks\u2CC7o5p\u0D02me] = deepFreeze(
        mergeDeep(rawProps2[t\uA4FA\u0DB8jaswrks\u2CC7o5p\u0D02org], {
          $set: {
            // Inherits o5p.org org.
            // Inherits o5p.org type.
            // Inherits o5p.org legal name.
            // Inherits o5p.org address.
            // Inherits o5p.org founder.
            // Inherits o5p.org employees.
            // Inherits o5p.org n7m.
            // Inherits o5p.org name.
            [t\uA4FApkgName]: t\uA4FA\u0DB8jaswrks\u2CC7o5p\u0D02me,
            // Inherits o5p.org namespace.
            [t\uA4FAhostname]: t\uA4FAo5p\u0D02me,
            [t\uA4FAmxHostname]: t\uA4FAo5p\u0D02me,
            [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7o5p\u0D02me\u2CC7
            // Inherits o5p.org status URL.
            // Inherits o5p.org slug.
            // Inherits o5p.org var.
            // Inherits o5p.org slug prefix.
            // Inherits o5p.org var prefix.
            // Inherits o5p.org slogan.
            // Inherits o5p.org description.
            // Inherits o5p.org theme.
            // Inherits o5p.org icon.
            // Inherits o5p.org logo.
            // Inherits o5p.org OG image.
            // Inherits o5p.org screenshots.
            // Inherits o5p.org policies.
            // Inherits o5p.org contacts.
            // Inherits o5p.org social profiles.
          }
        })
      );
      rawProps2[t\uA4FA\u0DB8clevercanyon\u2CC7clevercanyon\u0D02com] = deepFreeze(
        mergeDeep(rawProps2[t\uA4FA\u0DB8jaswrks\u2CC7o5p\u0D02org], {
          $set: {
            [t\uA4FAorg]: t\uA4FA\u0DB8clevercanyon\u2CC7clevercanyon\u0D02com,
            [t\uA4FAtype2]: t\uA4FAcorp,
            // Corporation.
            [t\uA4FAlegalName]: t\uA4FAClever\u{110B1}Canyon + " LLC",
            // Inherits o5p.org address.
            // Inherits o5p.org founder.
            // Inherits o5p.org employees.
            [t\uA4FAn7m]: "c10n",
            [t\uA4FAname]: t\uA4FAClever\u{110B1}Canyon,
            [t\uA4FApkgName]: t\uA4FA\u0DB8clevercanyon\u2CC7clevercanyon\u0D02com,
            [t\uA4FAnamespace]: t\uA4FACleverCanyon,
            [t\uA4FAhostname]: t\uA4FAclevercanyon\u0D02com,
            [t\uA4FAmxHostname]: t\uA4FAclevercanyon\u0D02com,
            [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7,
            [t\uA4FAstatusURL]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7status\u0D02clevercanyon\u0D02com\u2CC7,
            [t\uA4FAslug]: t\uA4FAclevercanyon,
            [t\uA4FAvar]: t\uA4FAclevercanyon,
            [t\uA4FAslugPrefix]: t\uA4FAclevercanyon + "-",
            [t\uA4FAvarPrefix]: t\uA4FAclevercanyon + "_",
            [t\uA4FAslogan]: "Cleverly crafted digital brands.",
            [t\uA4FAdescription3]: "We\u2019re transforming ideas into digital realities.",
            [t\uA4FAtheme2]: {
              [t\uA4FAisDark]: true,
              [t\uA4FAcolor2]: "#09090b",
              [t\uA4FAfgColor]: "#f0f0f0",
              [t\uA4FAlinkColor]: "#ff9a62",
              [t\uA4FAlineColor]: "#17171c",
              [t\uA4FAheadingColor]: "#ed5f3b"
            },
            [t\uA4FAicon2]: {
              [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAicon2 + t\uA4FA\u0D02svg,
              [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAicon\u1C7C2x + t\uA4FA\u0D02png,
              ...t\uA4FAobj\uA4FAwidthHeight\u1C7C512x512\u02E32\uA60C1024x1024
            },
            [t\uA4FAlogo]: {
              [t\uA4FAonDarkBg]: {
                [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg + t\uA4FA\u0D02svg,
                [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg\u1C7C2x + t\uA4FA\u0D02png
              },
              [t\uA4FAonLightBg]: {
                [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg + t\uA4FA\u0D02svg,
                [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg\u1C7C2x + t\uA4FA\u0D02png
              },
              ...t\uA4FAobj\uA4FAwidthHeight\u1C7C433x60\u02E32\uA60C866x120
            },
            [t\uA4FAogImage2]: {
              [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAog\u1C7Cimage + t\uA4FA\u0D02svg,
              [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAog\u1C7Cimage\u1C7C2x + t\uA4FA\u0D02png,
              ...t\uA4FAobj\uA4FAwidthHeight\u1C7C1200x630\u02E32\uA60C2400x1260
            },
            [t\uA4FAscreenshots]: {
              [t\uA4FAdesktop]: {
                ...Object.fromEntries(
                  ((entries = []) => {
                    for (let i = 1; i <= 3; i++)
                      entries.push([
                        i,
                        {
                          [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAss\u1C7Cdesktop\u1C7CN.replace("{N}", i.toString()) + t\uA4FA\u0D02svg,
                          [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAss\u1C7Cdesktop\u1C7CN\u1C7C2x.replace("{N}", i.toString()) + t\uA4FA\u0D02png
                        }
                      ]);
                    return entries;
                  })()
                ),
                ...t\uA4FAobj\uA4FAwidthHeight\u1C7C1200x630\u02E32\uA60C2400x1260
              },
              [t\uA4FAmobile]: {
                ...Object.fromEntries(
                  ((entries = []) => {
                    for (let i = 1; i <= 3; i++)
                      entries.push([
                        i,
                        {
                          [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAss\u1C7Cmobile\u1C7CN.replace("{N}", i.toString()) + t\uA4FA\u0D02svg,
                          [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7clevercanyon + "/" + t\uA4FAss\u1C7Cmobile\u1C7CN\u1C7C2x.replace("{N}", i.toString()) + t\uA4FA\u0D02png
                        }
                      ]);
                    return entries;
                  })()
                ),
                ...t\uA4FAobj\uA4FAwidthHeight\u1C7C630x1200\u02E32\uA60C1260x2400
              }
            },
            [t\uA4FApolicies]: {
              [t\uA4FAterms]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7legal\u2CC7 + t\uA4FAterms,
              [t\uA4FAprivacy]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7legal\u2CC7 + t\uA4FAprivacy,
              [t\uA4FAcookies]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7legal\u2CC7 + t\uA4FAcookies,
              [t\uA4FAsecurity]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7legal\u2CC7 + t\uA4FAsecurity,
              [t\uA4FAdsar]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7legal\u2CC7 + t\uA4FAdsar
            },
            [t\uA4FAcontacts]: {
              [t\uA4FAadmin]: {
                [t\uA4FAemail]: t\uA4FAadmin + t\uA4FA\u0DB8clevercanyon\u0D02com,
                [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7 + t\uA4FAcontact,
                [t\uA4FAphone]: t\uA4FAv\uA4FAc10nPhone
              },
              [t\uA4FAinfo]: {
                [t\uA4FAemail]: t\uA4FAinfo + t\uA4FA\u0DB8clevercanyon\u0D02com,
                [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7 + t\uA4FAcontact,
                [t\uA4FAphone]: t\uA4FAv\uA4FAc10nPhone
              },
              [t\uA4FAsupport]: {
                [t\uA4FAemail]: t\uA4FAsupport + t\uA4FA\u0DB8clevercanyon\u0D02com,
                [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7 + t\uA4FAcontact,
                [t\uA4FAphone]: t\uA4FAv\uA4FAc10nPhone
              },
              [t\uA4FAsecurity]: {
                [t\uA4FAemail]: t\uA4FAsecurity + t\uA4FA\u0DB8clevercanyon\u0D02com,
                [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7 + t\uA4FAcontact,
                [t\uA4FAphone]: t\uA4FAv\uA4FAc10nPhone
              },
              [t\uA4FAprivacy]: {
                [t\uA4FAemail]: t\uA4FAprivacy + t\uA4FA\u0DB8clevercanyon\u0D02com,
                [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7clevercanyon\u0D02com\u2CC7 + t\uA4FAcontact,
                [t\uA4FAphone]: t\uA4FAv\uA4FAc10nPhone
              }
            },
            [t\uA4FAsocialProfiles2]: {
              [t\uA4FAdiscord]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7discord\u0D02clevercanyon\u0D02com\u2CC7,
              [t\uA4FAx2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAx2 + t\uA4FA\u0D02com2 + "/" + t\uA4FAclevercanyon,
              [t\uA4FAtwitter2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAx2 + t\uA4FA\u0D02com2 + "/" + t\uA4FAclevercanyon,
              [t\uA4FAlinkedin2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAwww\u0D022 + t\uA4FAlinkedin2 + t\uA4FA\u0D02com2 + "/" + t\uA4FAcompany + "/" + t\uA4FAclevercanyon,
              [t\uA4FAfacebook2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAwww\u0D022 + t\uA4FAfacebook2 + t\uA4FA\u0D02com2 + "/" + t\uA4FAclevercanyon,
              [t\uA4FAkeybase2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAkeybase2 + t\uA4FA\u0D02io2 + "/" + t\uA4FAteam + "/" + t\uA4FAclevercanyon,
              [t\uA4FAgithub2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAgithub2 + t\uA4FA\u0D02com2 + "/" + t\uA4FAclevercanyon,
              [t\uA4FAnpm2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC72 + t\uA4FAwww\u0D022 + t\uA4FAnpmjs2 + t\uA4FA\u0D02com2 + "/" + t\uA4FAorg + "/" + t\uA4FAclevercanyon
            }
          }
        })
      );
      rawProps2[t\uA4FA\u0DB8clevercanyon\u2CC7hop\u0D02gdn] = deepFreeze(
        mergeDeep(rawProps2[t\uA4FA\u0DB8clevercanyon\u2CC7clevercanyon\u0D02com], {
          $set: {
            [t\uA4FAorg]: t\uA4FA\u0DB8clevercanyon\u2CC7clevercanyon\u0D02com,
            [t\uA4FAtype2]: t\uA4FAorg,
            // Organization.
            [t\uA4FAlegalName]: t\uA4FAHop\u0D02gdn,
            // Inherits c10n address.
            // Inherits c10n founder.
            // Inherits c10n employees.
            [t\uA4FAn7m]: "h5n",
            [t\uA4FAname]: t\uA4FAHop\u0D02gdn,
            [t\uA4FApkgName]: t\uA4FA\u0DB8clevercanyon\u2CC7hop\u0D02gdn,
            [t\uA4FAnamespace]: t\uA4FAHop,
            [t\uA4FAhostname]: t\uA4FAhop\u0D02gdn,
            [t\uA4FAmxHostname]: t\uA4FAhop\u0D02gdn,
            [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7hop\u0D02gdn\u2CC7,
            // Inherits c10n status URL.
            [t\uA4FAslug]: t\uA4FAhop,
            [t\uA4FAvar]: t\uA4FAhop,
            [t\uA4FAslugPrefix]: t\uA4FAhop + "-",
            [t\uA4FAvarPrefix]: t\uA4FAhop + "_",
            [t\uA4FAslogan]: "Masters of the digital divide.",
            [t\uA4FAdescription3]: "Great things, built on great technology.",
            [t\uA4FAtheme2]: {
              ...rawProps2[t\uA4FA\u0DB8clevercanyon\u2CC7clevercanyon\u0D02com][t\uA4FAtheme2],
              [t\uA4FAlinkColor]: "#80aff9",
              [t\uA4FAheadingColor]: "#5596ff"
            },
            [t\uA4FAicon2]: {
              [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAicon2 + t\uA4FA\u0D02svg,
              [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAicon\u1C7C2x + t\uA4FA\u0D02png,
              ...t\uA4FAobj\uA4FAwidthHeight\u1C7C512x512\u02E32\uA60C1024x1024
            },
            [t\uA4FAlogo]: {
              [t\uA4FAonDarkBg]: {
                [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg + t\uA4FA\u0D02svg,
                [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAlogo\u1C7Con\u1C7Cdark\u1C7Cbg\u1C7C2x + t\uA4FA\u0D02png
              },
              [t\uA4FAonLightBg]: {
                [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg + t\uA4FA\u0D02svg,
                [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAlogo\u1C7Con\u1C7Clight\u1C7Cbg\u1C7C2x + t\uA4FA\u0D02png
              },
              ...t\uA4FAobj\uA4FAwidthHeight\u1C7C304x60\u02E32\uA60C608x120
            },
            [t\uA4FAogImage2]: {
              [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAog\u1C7Cimage + t\uA4FA\u0D02svg,
              [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAog\u1C7Cimage\u1C7C2x + t\uA4FA\u0D02png,
              ...t\uA4FAobj\uA4FAwidthHeight\u1C7C1200x630\u02E32\uA60C2400x1260
            },
            [t\uA4FAscreenshots]: {
              [t\uA4FAdesktop]: {
                ...Object.fromEntries(
                  ((entries = []) => {
                    for (let i = 1; i <= 3; i++)
                      entries.push([
                        i,
                        {
                          [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAss\u1C7Cdesktop\u1C7CN.replace("{N}", i.toString()) + t\uA4FA\u0D02svg,
                          [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAss\u1C7Cdesktop\u1C7CN\u1C7C2x.replace("{N}", i.toString()) + t\uA4FA\u0D02png
                        }
                      ]);
                    return entries;
                  })()
                ),
                ...t\uA4FAobj\uA4FAwidthHeight\u1C7C1200x630\u02E32\uA60C2400x1260
              },
              [t\uA4FAmobile]: {
                ...Object.fromEntries(
                  ((entries = []) => {
                    for (let i = 1; i <= 3; i++)
                      entries.push([
                        i,
                        {
                          [t\uA4FAsvg2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAss\u1C7Cmobile\u1C7CN.replace("{N}", i.toString()) + t\uA4FA\u0D02svg,
                          [t\uA4FApng]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7r2\u0D02hop\u0D02gdn\u2CC7assets\u2CC7brands\u2CC7hop + "/" + t\uA4FAss\u1C7Cmobile\u1C7CN\u1C7C2x.replace("{N}", i.toString()) + t\uA4FA\u0D02png
                        }
                      ]);
                    return entries;
                  })()
                ),
                ...t\uA4FAobj\uA4FAwidthHeight\u1C7C630x1200\u02E32\uA60C1260x2400
              }
            },
            [t\uA4FAcontacts]: {
              [t\uA4FAadmin]: {
                [t\uA4FAemail]: t\uA4FAadmin + t\uA4FA\u0DB8hop\u0D02gdn,
                [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7hop\u0D02gdn\u2CC7 + t\uA4FAcontact,
                [t\uA4FAphone]: t\uA4FAv\uA4FAc10nPhone
              },
              [t\uA4FAinfo]: {
                [t\uA4FAemail]: t\uA4FAinfo + t\uA4FA\u0DB8hop\u0D02gdn,
                [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7hop\u0D02gdn\u2CC7 + t\uA4FAcontact,
                [t\uA4FAphone]: t\uA4FAv\uA4FAc10nPhone
              },
              [t\uA4FAsupport]: {
                [t\uA4FAemail]: t\uA4FAsupport + t\uA4FA\u0DB8hop\u0D02gdn,
                [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7hop\u0D02gdn\u2CC7 + t\uA4FAcontact,
                [t\uA4FAphone]: t\uA4FAv\uA4FAc10nPhone
              },
              [t\uA4FAsecurity]: {
                [t\uA4FAemail]: t\uA4FAsecurity + t\uA4FA\u0DB8hop\u0D02gdn,
                [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7hop\u0D02gdn\u2CC7 + t\uA4FAcontact,
                [t\uA4FAphone]: t\uA4FAv\uA4FAc10nPhone
              },
              [t\uA4FAprivacy]: {
                [t\uA4FAemail]: t\uA4FAprivacy + t\uA4FA\u0DB8hop\u0D02gdn,
                [t\uA4FAurl2]: t\uA4FAhttps\uA4FD\u2CC7\u2CC7hop\u0D02gdn\u2CC7 + t\uA4FAcontact,
                [t\uA4FAphone]: t\uA4FAv\uA4FAc10nPhone
              }
            }
          }
        })
      );
    };
    addApp = (options4) => {
      const opts = defaults({}, options4 || {}, {
        pkgName: "",
        // Default below is {@see $app.pkgName()}.
        baseURL: "",
        // Default below is {@see $app.baseURL()}.
        props: void 0
        // i.e., Any other raw brand props.
      });
      const pkgName$1 = opts.pkgName || pkgName(), baseURL$1 = parse2(opts.baseURL || baseURL()), props = opts.props || brandProps(), org = get5(props.org || t\uA4FA\u0DB8clevercanyon\u2CC7hop\u0D02gdn);
      const pkgSlug$1 = pkgSlug(pkgName$1), pkgSlugAsName = titleCase(pkgSlug$1), pkgSlugAsN7m = numeronym(pkgSlugAsName), pkgSlugAsNamespace = studlyCase(pkgSlug$1, { [t\uA4FAasciiOnly]: true, [t\uA4FAletterFirst]: "X" }), pkgSlugAsVar = snakeCase(pkgSlug$1, { [t\uA4FAasciiOnly]: true, [t\uA4FAletterFirst]: "x" });
      const relPathToURLString = (relPath) => {
        return new URL(relPath, baseURL$1).toString();
      };
      return add(
        pkgName$1,
        mergeDeep(
          org.rawProps(),
          {
            [t\uA4FAorg]: org[t\uA4FApkgName],
            [t\uA4FAtype2]: props[t\uA4FAtype2] || "site",
            [t\uA4FAn7m]: pkgSlugAsN7m,
            [t\uA4FAname]: pkgSlugAsName,
            [t\uA4FApkgName]: pkgName$1,
            [t\uA4FAnamespace]: pkgSlugAsNamespace,
            [t\uA4FAhostname]: baseURL$1[t\uA4FAhostname],
            [t\uA4FAurl2]: baseURL$1.toString(),
            [t\uA4FAslug]: pkgSlug$1,
            [t\uA4FAvar]: pkgSlugAsVar,
            [t\uA4FAslugPrefix]: pkgSlug$1 + "-",
            [t\uA4FAvarPrefix]: pkgSlugAsVar + "_",
            [t\uA4FAicon2]: {
              [t\uA4FAsvg2]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7icon + t\uA4FA\u0D02svg),
              [t\uA4FApng]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7icon\u1C7C2x + t\uA4FA\u0D02png)
            },
            [t\uA4FAlogo]: {
              [t\uA4FAonDarkBg]: {
                [t\uA4FAsvg2]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Cdark\u1C7Cbg + t\uA4FA\u0D02svg),
                [t\uA4FApng]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Cdark\u1C7Cbg\u1C7C2x + t\uA4FA\u0D02png)
              },
              [t\uA4FAonLightBg]: {
                [t\uA4FAsvg2]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Clight\u1C7Cbg + t\uA4FA\u0D02svg),
                [t\uA4FApng]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7logo\u1C7Con\u1C7Clight\u1C7Cbg\u1C7C2x + t\uA4FA\u0D02png)
              }
            },
            [t\uA4FAogImage2]: {
              [t\uA4FAsvg2]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7og\u1C7Cimage + t\uA4FA\u0D02svg),
              [t\uA4FApng]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7og\u1C7Cimage\u1C7C2x + t\uA4FA\u0D02png)
            },
            [t\uA4FAscreenshots]: {
              [t\uA4FAdesktop]: {
                ...Object.fromEntries(
                  ((entries = []) => {
                    for (let i = 1; i <= 3; i++)
                      entries.push([
                        i,
                        {
                          [t\uA4FAsvg2]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cdesktop\u1C7CN.replace("{N}", i.toString()) + t\uA4FA\u0D02svg),
                          [t\uA4FApng]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cdesktop\u1C7CN\u1C7C2x.replace("{N}", i.toString()) + t\uA4FA\u0D02png)
                        }
                      ]);
                    return entries;
                  })()
                )
              },
              [t\uA4FAmobile]: {
                ...Object.fromEntries(
                  ((entries = []) => {
                    for (let i = 1; i <= 3; i++)
                      entries.push([
                        i,
                        {
                          [t\uA4FAsvg2]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cmobile\u1C7CN.replace("{N}", i.toString()) + t\uA4FA\u0D02svg),
                          [t\uA4FApng]: relPathToURLString(t\uA4FA\u0D02\u2CC7assets\u2CC7brand\u2CC7ss\u1C7Cmobile\u1C7CN\u1C7C2x.replace("{N}", i.toString()) + t\uA4FA\u0D02png)
                        }
                      ]);
                    return entries;
                  })()
                )
              }
            }
          },
          props
        )
      );
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/app.js
var app_exports = {};
__export(app_exports, {
  $pkgName: () => $pkgName,
  baseURL: () => baseURL,
  brand: () => brand2,
  brandProps: () => brandProps,
  buildTime: () => buildTime,
  config: () => config2,
  etcConfig: () => etcConfig,
  hasBaseURL: () => hasBaseURL,
  hasBrandProps: () => hasBrandProps,
  hasR2BaseURL: () => hasR2BaseURL,
  hasR2OriginURL: () => hasR2OriginURL,
  hasRootR2BaseURL: () => hasRootR2BaseURL,
  hasRootR2OriginURL: () => hasRootR2OriginURL,
  pkgName: () => pkgName,
  pkgSlug: () => pkgSlug,
  pkgVersion: () => pkgVersion,
  r2BaseURL: () => r2BaseURL,
  r2OriginURL: () => r2OriginURL,
  rootR2BaseURL: () => rootR2BaseURL,
  rootR2OriginURL: () => rootR2OriginURL,
  updateConfig: () => updateConfig,
  updateEtcConfig: () => updateEtcConfig
});
var $pkgName, pkgName, pkgSlug, pkgVersion, buildTime, hasBaseURL, baseURL, hasRootR2OriginURL, rootR2OriginURL, hasRootR2BaseURL, rootR2BaseURL, hasR2OriginURL, r2OriginURL, hasR2BaseURL, r2BaseURL, hasBrandProps, brandProps, brand2, config2, etcConfig, updateConfig, updateEtcConfig;
var init_app = __esm({
  "node_modules/@clevercanyon/utilities/dist/app.js"() {
    init_standalone();
    init_str();
    init_env();
    init_time();
    init_obj();
    init_url();
    init_brand2();
    $pkgName = $app\uA4FA$pkgName;
    pkgName = $fn\uA4FAmemo(() => {
      return get3("APP_PKG_NAME", { type: "string", require: true });
    });
    pkgSlug = $fn\uA4FAmemo(12, (value) => {
      value ??= pkgName();
      value = value.replace(/^@/u, "").split("/")[1] || value;
      return kebabCase(value, { asciiOnly: true, splitStrategy: "boundariesAndCaseOnly", letterFirst: "x" });
    });
    pkgVersion = $fn\uA4FAmemo(() => {
      return get3("APP_PKG_VERSION", { type: "string", require: true });
    });
    buildTime = $fn\uA4FAmemo(() => {
      return parse5(get3("APP_BUILD_TIME_STAMP", { type: "string", require: true }));
    });
    hasBaseURL = $fn\uA4FAmemo(() => {
      return get3("APP_BASE_URL") ? true : false;
    });
    baseURL = $fn\uA4FAmemo(
      { deep: true, maxSize: 2 },
      (options4) => {
        const opts = defaults({}, options4 || {}, { parsed: false }), value = get3("APP_BASE_URL", { type: "string", require: true });
        return opts.parsed ? parse2(value) : value;
      }
    );
    hasRootR2OriginURL = $fn\uA4FAmemo(() => {
      return get3("APP_ROOT_R2_ORIGIN_URL") ? true : false;
    });
    rootR2OriginURL = $fn\uA4FAmemo(
      { deep: true, maxSize: 2 },
      (options4) => {
        const opts = defaults({}, options4 || {}, { parsed: false }), value = rTrim(get3("APP_ROOT_R2_ORIGIN_URL", { type: "string", require: true }), "/");
        return opts.parsed ? parse2(value) : value;
      }
    );
    hasRootR2BaseURL = $fn\uA4FAmemo(() => {
      return get3("APP_ROOT_R2_BASE_URL") || hasRootR2OriginURL() ? true : false;
    });
    rootR2BaseURL = $fn\uA4FAmemo(
      { deep: true, maxSize: 2 },
      (options4) => {
        const opts = defaults({}, options4 || {}, { parsed: false }), value = get3("APP_ROOT_R2_BASE_URL", { type: "string", default: "" }) || rootR2OriginURL() + "/app/" + pkgSlug() + "/";
        return opts.parsed ? parse2(value) : value;
      }
    );
    hasR2OriginURL = $fn\uA4FAmemo(() => {
      return get3("APP_R2_ORIGIN_URL") ? true : false;
    });
    r2OriginURL = $fn\uA4FAmemo(
      { deep: true, maxSize: 2 },
      (options4) => {
        const opts = defaults({}, options4 || {}, { parsed: false }), value = rTrim(get3("APP_R2_ORIGIN_URL", { type: "string", require: true }), "/");
        return opts.parsed ? parse2(value) : value;
      }
    );
    hasR2BaseURL = $fn\uA4FAmemo(() => {
      return get3("APP_R2_BASE_URL") || hasR2OriginURL() ? true : false;
    });
    r2BaseURL = $fn\uA4FAmemo(
      { deep: true, maxSize: 2 },
      (options4) => {
        const opts = defaults({}, options4 || {}, { parsed: false }), value = get3("APP_R2_BASE_URL", { type: "string", default: "" }) || r2OriginURL() + "/app/" + pkgSlug() + "/";
        return opts.parsed ? parse2(value) : value;
      }
    );
    hasBrandProps = $fn\uA4FAmemo(() => {
      return get3("APP_BRAND_PROPS") ? true : false;
    });
    brandProps = $fn\uA4FAmemo(() => {
      return deepFreeze(get3("APP_BRAND_PROPS", { require: true }));
    });
    brand2 = $fn\uA4FAmemo(() => {
      const value = get3("APP_BRAND");
      if (!value)
        set3("APP_BRAND", addApp());
      return get3("APP_BRAND", { require: true });
    });
    config2 = $fn\uA4FAmemo(() => {
      return deepFreeze(get3("APP_CONFIG", { type: "object", default: {} }));
    });
    etcConfig = $fn\uA4FAmemo(() => {
      return deepFreeze(get3("APP_ETC_CONFIG", { type: "object", default: {} }));
    });
    updateConfig = async (updates, options4) => {
      const opts = defaults({}, options4 || {}), newConfig = deepFreeze(mergeClonesDeep(config2(), updates));
      set3("APP_CONFIG", newConfig), config2.flush();
      if (opts.callback)
        await opts.callback(newConfig);
    };
    updateEtcConfig = async (updates, options4) => {
      const opts = defaults({}, options4 || {}), newEtcConfig = deepFreeze(mergeClonesDeep(etcConfig(), updates));
      set3("APP_ETC_CONFIG", newEtcConfig), etcConfig.flush();
      if (opts.callback)
        await opts.callback(newEtcConfig);
    };
  }
});

// node_modules/@clevercanyon/utilities/dist/version.js
var version_exports = {};
__export(version_exports, {
  $: () => default26,
  compare: () => default4,
  increment: () => default5,
  isValid: () => default32,
  major: () => default6,
  minor: () => default7,
  patch: () => default8,
  prerelease: () => default9,
  rsort: () => default10,
  sort: () => default11
});
import { default as default26 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/semver/index.js";
import { default as default32 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/semver/functions/valid.js";
import { default as default4 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/semver/functions/cmp.js";
import { default as default5 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/semver/functions/inc.js";
import { default as default6 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/semver/functions/major.js";
import { default as default7 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/semver/functions/minor.js";
import { default as default8 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/semver/functions/patch.js";
import { default as default9 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/semver/functions/prerelease.js";
import { default as default10 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/semver/functions/rsort.js";
import { default as default11 } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/semver/functions/sort.js";
var init_version = __esm({
  "node_modules/@clevercanyon/utilities/dist/version.js"() {
  }
});

// node_modules/@clevercanyon/utilities/dist/index.js
var init_dist2 = __esm({
  "node_modules/@clevercanyon/utilities/dist/index.js"() {
    init_app();
    init_brand2();
    init_crypto();
    init_fn();
    init_is();
    init_json();
    init_mm();
    init_obj();
    init_obp();
    init_path();
    init_preact();
    init_str();
    init_time();
    init_url();
    init_version();
  }
});

// dev/.files/bin/includes/extensions.mjs
var dot, noDot, asBracedGlob, asNoBraceGlobstars, asRegExpFrag, extensions, extensions_default;
var init_extensions = __esm({
  "dev/.files/bin/includes/extensions.mjs"() {
    "use strict";
    init_dist2();
    dot = (exts2) => noDot(exts2).map((ext2) => "." + ext2);
    noDot = (exts2) => [...new Set(exts2)].map((ext2) => ext2.replace(/^\./u, ""));
    asBracedGlob = (exts2) => {
      exts2 = [...new Set(exts2)];
      return (exts2.length > 1 ? "{" : "") + noDot(exts2).join(",") + (exts2.length > 1 ? "}" : "");
    };
    asNoBraceGlobstars = (exts2) => {
      return noDot(exts2).map((ext2) => "**/*." + ext2);
    };
    asRegExpFrag = (exts2) => {
      exts2 = [...new Set(exts2)];
      return (exts2.length > 1 ? "(?:" : "") + noDot(exts2).join("|") + (exts2.length > 1 ? ")" : "");
    };
    extensions = {
      /**
       * Utilities.
       */
      dot,
      noDot,
      asBracedGlob,
      asNoBraceGlobstars,
      asRegExpFrag,
      /**
       * By canonical.
       */
      byCanonical: obj_exports.map(
        obj_exports.cloneDeep(path_exports.extsByCanonical()),
        //
        (exts2) => dot(exts2),
        { byReference: true }
      ),
      /**
       * By VS Code lang (camelCase, includes `codeTextual`).
       */
      byVSCodeLang: obj_exports.map(
        obj_exports.cloneDeep(path_exports.extsByVSCodeLang({ camelCase: true, enableCodeTextual: true })),
        //
        (exts2) => dot(exts2),
        { byReference: true }
      ),
      /**
       * By dev group.
       */
      byDevGroup: obj_exports.map(
        obj_exports.cloneDeep(path_exports.jsTSExtsByDevGroup()),
        //
        (exts2) => dot(exts2),
        { byReference: true }
      )
    };
    extensions.tailwindContent = [
      .../* @__PURE__ */ new Set([
        ...extensions.byVSCodeLang.mdx,
        ...extensions.byVSCodeLang.markdown,
        ...extensions.byVSCodeLang.html,
        ...extensions.byVSCodeLang.php,
        ...extensions.byVSCodeLang.asp,
        ...extensions.byVSCodeLang.ruby,
        ...extensions.byVSCodeLang.python,
        ...extensions.byVSCodeLang.perl,
        ...extensions.byVSCodeLang.shellscript,
        ...extensions.byDevGroup.allJavaScript,
        ...extensions.byDevGroup.allTypeScript,
        ...extensions.byVSCodeLang.xml
        // e.g., SVGs.
      ])
    ];
    extensions.tailwindPrettierContent = [...extensions.tailwindContent];
    extensions.commentAnchorsContent = [...extensions.tailwindContent];
    extensions.onImportWithNoExtensionTry = [...extensions.byDevGroup.allTypeScript, ...extensions.byDevGroup.allJavaScript];
    extensions_default = extensions;
  }
});

// dev/.files/bin/includes/node-version.mjs
var node_version_default;
var init_node_version = __esm({
  "dev/.files/bin/includes/node-version.mjs"() {
    "use strict";
    node_version_default = {
      previous: "20.5.0",
      current: "20.9.0",
      forwardCompat: ["21.6.2"],
      npm: {
        previous: "9.8.0",
        current: "10.1.0",
        forwardCompat: ["10.2.4"]
      }
    };
  }
});

// dev/.files/bin/includes/utilities.mjs
import { Octokit as OctokitCore } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@octokit/core/dist-node/index.js";
import { paginateRest as OctokitPluginPaginateRest } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@octokit/plugin-paginate-rest/dist-node/index.js";
import sodium from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/libsodium-wrappers/dist/modules/libsodium-wrappers.js";
import fs3 from "node:fs";
import fsp from "node:fs/promises";
import os from "node:os";
import path3 from "node:path";
var __vite_injected_original_import_meta_url2, __dirname2, binDir, projDir2, pkgFile2, pkgName2, pkgPrivate, pkgBuildAppType, Octokit, octokit, githubConfigVersion, githubEnvsVersion, npmjsConfigVersion, c10nLogo, u;
var init_utilities = __esm({
  "dev/.files/bin/includes/utilities.mjs"() {
    "use strict";
    init_dist();
    init_dist2();
    init_node_version();
    __vite_injected_original_import_meta_url2 = "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/dev/.files/bin/includes/utilities.mjs";
    __dirname2 = fs_exports.imuDirname(__vite_injected_original_import_meta_url2);
    binDir = path3.resolve(__dirname2, "..");
    projDir2 = path3.resolve(__dirname2, "../../../..");
    ({ pkgFile: pkgFile2, pkgName: pkgName2, pkgPrivate, pkgBuildAppType } = (() => {
      const pkgFile3 = path3.resolve(projDir2, "./package.json");
      if (!fs3.existsSync(pkgFile3)) {
        throw new Error("u: Missing `./package.json`.");
      }
      const pkg2 = json_exports.parse(fs3.readFileSync(pkgFile3).toString());
      if (!is_exports.plainObject(pkg2)) {
        throw new Error("u: Unable to parse `./package.json`.");
      }
      const pkgName3 = obp_exports.get(pkg2, "name", "");
      const pkgPrivate2 = obp_exports.get(pkg2, "private");
      const pkgBuildAppType2 = obp_exports.get(pkg2, "config.c10n.&.build.appType", "");
      return { pkgFile: pkgFile3, pkgName: pkgName3, pkgPrivate: pkgPrivate2, pkgBuildAppType: pkgBuildAppType2 };
    })());
    Octokit = OctokitCore.plugin(OctokitPluginPaginateRest);
    octokit = new Octokit({ auth: process.env.USER_GITHUB_TOKEN || "" });
    githubConfigVersion = "1.0.9";
    githubEnvsVersion = "1.0.9";
    npmjsConfigVersion = "1.0.9";
    c10nLogo = path3.resolve(__dirname2, "../../assets/brands/clevercanyon/logo-on-dark-bg.png");
    u = class _u {
      /**
       * Static props.
       */
      static s = {};
      // Initialize.
      /**
       * Synchronous utilities.
       */
      /*
       * Output utilities.
       */
      static log(...args) {
        return console.log(...args);
      }
      /**
       * Asynchronous utilities.
       */
      /*
       * User environment var utilities.
       */
      static async propagateUserEnvVars() {
        process.env.NPM_TOKEN = process.env.USER_NPM_TOKEN || "";
        process.env.GH_TOKEN = process.env.USER_GITHUB_TOKEN || "";
        process.env.GITHUB_TOKEN = process.env.USER_GITHUB_TOKEN || "";
        process.env.CLOUDFLARE_API_TOKEN = process.env.USER_CLOUDFLARE_TOKEN || "";
      }
      /*
       * TTY utilities.
       */
      static async isInteractive() {
        const isTTY = process.stdout.isTTY || "true" === process.env.PARENT_IS_TTY ? true : false;
        return isTTY && process.env.TERM && "dumb" !== process.env.TERM && "true" !== process.env.CI && true !== process.env.CI;
      }
      /**
       * Spawn utilities.
       */
      static async spawn(cmd, args = [], opts = {}) {
        return await cmd_exports.spawn(cmd, args, {
          cwd: projDir2,
          stdio: "pipe",
          env: {
            ...process.env,
            // Parent TTY assists {@see isInteractive()}.
            PARENT_IS_TTY: process.stdout.isTTY || process.env.PARENT_IS_TTY ? "true" : "false"
          },
          ...opts
        });
      }
      /*
       * Pkg utilities.
       */
      static async pkg(file = pkgFile2) {
        if (!fs3.existsSync(file)) {
          throw new Error("u.pkg: Missing `" + file + "`.");
        }
        const pkg2 = json_exports.parse(fs3.readFileSync(file).toString());
        if (!is_exports.plainObject(pkg2)) {
          throw new Error("u.pkg: Unable to parse `" + file + "`.");
        }
        return pkg2;
      }
      static async depPkg(dependency) {
        return _u.pkg(path3.resolve(projDir2, "./node_modules", dependency, "./package.json"));
      }
      static async isPkgName(name) {
        return name === pkgName2;
      }
      static async isPkgFork() {
        return pkgName2.endsWith(".fork");
      }
      static async isPkgSkeleton() {
        return "skeleton" === pkgName2 || pkgName2.startsWith("skeleton.");
      }
      static async pkgIncrementVersion(opts = { dryRun: false }) {
        const pkg2 = await _u.pkg();
        const origVersion = String(pkg2.version || "");
        let version = origVersion || "0.0.0";
        if (!version_exports.isValid(version)) {
          throw new Error("u.pkgIncrementVersion: Not a semantic version: `" + origVersion + "`.");
        }
        const isVersionPrerelease = version_exports.prerelease(version) ? true : false;
        version = version_exports.increment(version, isVersionPrerelease ? "prerelease" : "patch");
        if (!version) {
          throw new Error("u.pkgIncrementVersion: Failed to increment version: `" + origVersion + "`.");
        }
        if (!opts.dryRun) {
          await _u.updatePkg({ version });
        }
      }
      static async updatePkg(propsOrPath = {}, value = void 0, separator = ".") {
        const pkg2 = await _u.pkg();
        if (is_exports.string(propsOrPath)) {
          const path15 = propsOrPath;
          obp_exports.set(pkg2, path15, value, separator);
        } else if (is_exports.plainObject(propsOrPath)) {
          const props = propsOrPath;
          obj_exports.patchDeep(pkg2, props);
        } else {
          throw new Error("u.updatePkg: Invalid arguments.");
        }
        const updatesFile = path3.resolve(projDir2, "./dev/.files/bin/updater/data/_package.json/updates.json");
        const updates = json_exports.parse((await fsp.readFile(updatesFile)).toString());
        if (!is_exports.plainObject(updates)) {
          throw new Error("u.updatePkg: Unable to parse `" + updatesFile + "`.");
        }
        if (await _u.isPkgFork()) {
          if (updates["$\uA4FAdefaults"]?.imports)
            updates["$\uA4FAdefaults"].imports = {};
        }
        if (Object.hasOwn(updates["$\uA4FAset"]?.engines || {}, "node")) {
          updates["$\uA4FAset"].engines.node = [];
          if (node_version_default.previous)
            updates["$\uA4FAset"].engines.node.push(node_version_default.previous);
          if (node_version_default.current)
            updates["$\uA4FAset"].engines.node.push(node_version_default.current);
          if (node_version_default.forwardCompat.length)
            updates["$\uA4FAset"].engines.node = updates["$\uA4FAset"].engines.node.concat(node_version_default.forwardCompat);
          updates["$\uA4FAset"].engines.node = (updates["$\uA4FAset"].engines.node.length ? "^" : "") + updates["$\uA4FAset"].engines.node.join(" || ^");
        }
        if (Object.hasOwn(updates["$\uA4FAset"]?.engines || {}, "npm")) {
          updates["$\uA4FAset"].engines.npm = [];
          if (node_version_default.npm.previous)
            updates["$\uA4FAset"].engines.npm.push(node_version_default.npm.previous);
          if (node_version_default.npm.current)
            updates["$\uA4FAset"].engines.npm.push(node_version_default.npm.current);
          if (node_version_default.npm.forwardCompat.length)
            updates["$\uA4FAset"].engines.npm = updates["$\uA4FAset"].engines.npm.concat(node_version_default.npm.forwardCompat);
          updates["$\uA4FAset"].engines.npm = (updates["$\uA4FAset"].engines.npm.length ? "^" : "") + updates["$\uA4FAset"].engines.npm.join(" || ^");
        }
        if (await _u.isPkgName("@clevercanyon/dev-deps")) {
          if (updates["$\uA4FAdefaults"]?.["devDependencies\uA4FA@clevercanyon/dev-deps"]) {
            delete updates["$\uA4FAdefaults"]["devDependencies\uA4FA@clevercanyon/dev-deps"];
          }
          if (is_exports.array(updates["$\uA4FAunset"])) {
            updates["$\uA4FAunset"].push("devDependencies\uA4FA@clevercanyon/dev-deps");
          } else {
            updates["$\uA4FAunset"] = ["devDependencies\uA4FA@clevercanyon/dev-deps"];
          }
        }
        obj_exports.patchDeep(pkg2, updates);
        const prettierConfig = { ...await prettier_exports.resolveConfig(pkgFile2), parser: "json" };
        await fsp.writeFile(pkgFile2, await prettier_exports.format(json_exports.stringify(pkg2, { pretty: true }), prettierConfig));
      }
      /**
       * Brand utilities.
       */
      static async brand({ mode, baseURL: baseURL2 } = {}) {
        return fn_exports.try(() => brand_exports.get(pkgName2), void 0)() || brand_exports.addApp({
          pkgName: pkgName2,
          baseURL: baseURL2,
          props: await _u.brandConfig({ mode, baseURL: baseURL2 })
        });
      }
      static async brandConfig({ mode, baseURL: baseURL2 }) {
        return await (await import(path3.resolve(projDir2, "./brand.config.mjs"))).default({ mode, baseURL: baseURL2 });
      }
      /*
       * Git utilities.
       */
      static async isGitRepo() {
        try {
          return "true" === String(await _u.spawn("git", ["rev-parse", "--is-inside-work-tree"], { quiet: true })).trim();
        } catch {
          return false;
        }
      }
      static async isGitRepoDirty() {
        return "" !== await _u.gitStatus({ short: true });
      }
      static async isGitRepoOriginGitHub() {
        try {
          const { owner, repo } = await _u.githubOrigin();
          return owner && repo ? true : false;
        } catch {
          return false;
        }
      }
      static async gitStatus(opts = { short: false }) {
        return String(await _u.spawn("git", ["status", ...opts.short ? ["--short"] : [], "--porcelain"], { quiet: true })).trim();
      }
      static async gitCurrentBranch() {
        const branch = String(await _u.spawn("git", ["symbolic-ref", "--short", "--quiet", "HEAD"], { quiet: true })).trim();
        if (!branch) {
          throw new Error("u.gitCurrentBranch: Not currently on any git branch.");
        }
        return branch;
      }
      static async gitAddCommitTagPush(message) {
        await _u.gitAddCommitTag(message);
        await _u.gitPush();
      }
      static async gitAddCommitPush(message) {
        await _u.gitAddCommit(message);
        await _u.gitPush();
      }
      static async gitAddCommitTag(message) {
        await _u.gitAddCommit(message);
        await _u.gitTag(message);
      }
      static async gitAddCommit(message) {
        await _u.spawn("git", ["add", "--all"]);
        await _u.spawn("git", ["commit", "--message", message + (/\]$/u.test(message) ? "" : " ") + "[robotic]"]);
      }
      static async gitTag(message) {
        const pkg2 = await _u.pkg();
        if (!pkg2.version) {
          throw new Error("u.gitTag: Package version is empty.");
        }
        await _u.spawn("git", ["tag", "--annotate", "v" + pkg2.version, "--message", message + (/\]$/u.test(message) ? "" : " ") + "[robotic]"]);
      }
      static async gitPush() {
        await _u.spawn("git", ["push", "--set-upstream", "origin", await _u.gitCurrentBranch()]);
        await _u.spawn("git", ["push", "origin", "--tags"]);
      }
      static async gitLocalRepoSHA(repoDir, branch) {
        return String(await _u.spawn("git", ["rev-parse", branch], { cwd: repoDir, quiet: true })).trim().toLowerCase();
      }
      static async gitRemoteRepoSHA(repoURI, branch) {
        return String(await _u.spawn("git", ["ls-remote", repoURI, branch], { cwd: os.tmpdir(), quiet: true })).trim().toLowerCase().split(/\s+/u)[0];
      }
      /**
       * Gist utilities.
       */
      static async gistGetJSON(user, gistId) {
        return await (await fetch("https://gist.github.com/" + url_exports.encode(user) + "/" + url_exports.encode(gistId) + "/raw")).json();
      }
      static async gistGetC10NUsers() {
        return await _u.gistGetJSON("jaswrks", "0a1780dc08ac30824858bbbb86294c73");
      }
      static async gistGetC10NUser() {
        if (!process.env.USER_GITHUB_USERNAME) {
          return {};
        }
        const c10nUsers = await _u.gistGetC10NUsers();
        const githubUsername = String(process.env.USER_GITHUB_USERNAME).replace(/^@/u, "").toLowerCase();
        let c10nUser = c10nUsers[githubUsername] || {};
        c10nUser = is_exports.plainObject(c10nUser) ? c10nUser : {};
        obp_exports.set(c10nUser, "github.username", githubUsername);
        return c10nUser;
      }
      /*
       * GitHub utilities.
       */
      static async githubOrigin() {
        let m = null;
        const url3 = String(await _u.spawn("git", ["remote", "get-url", "origin"], { quiet: true })).trim();
        if (m = /^https?:\/\/github.com\/([^/]+)\/([^/]+?)(?:\.git)?$/iu.exec(url3)) {
          return { owner: m[1], repo: m[2] };
        } else if (m = /^git@github(?:\.com)?:([^/]+)\/([^/]+?)(?:\.git)?$/iu.exec(url3)) {
          return { owner: m[1], repo: m[2] };
        }
        throw new Error("u.githubOrigin: Repo does not have a GitHub origin.");
      }
      static async githubReleaseTag() {
        const { owner, repo } = await _u.githubOrigin();
        const distZipFile = path3.resolve(projDir2, "./.~dist.zip");
        const pkg2 = await _u.pkg();
        if (!pkg2.version) {
          throw new Error("u.githubReleaseTag: Package version is empty.");
        }
        if (await _u.isViteBuild() && !fs3.existsSync(distZipFile)) {
          throw new Error("u.githubReleaseTag: Missing `./.~dist.zip` archive.");
        }
        const r = await octokit.request("POST /repos/{owner}/{repo}/releases", {
          owner,
          repo,
          name: "v" + pkg2.version,
          tag_name: "v" + pkg2.version,
          draft: false,
          generate_release_notes: true,
          prerelease: version_exports.prerelease(pkg2.version) ? true : false
        });
        if (!is_exports.object(r) || !is_exports.object(r.data) || !r.data.id || !r.data.upload_url) {
          throw new Error("u.githubReleaseTag: Failed to acquire GitHub release data.");
        }
        if (await _u.isViteBuild() && fs3.existsSync(distZipFile)) {
          await octokit.request({
            method: "POST",
            url: r.data.upload_url,
            name: "dist.zip",
            headers: {
              "content-type": "application/zip",
              "content-length": fs3.statSync(distZipFile).size
            },
            data: fs3.readFileSync(distZipFile)
          });
        }
      }
      static async githubCheckRepoOrgWideStandards(opts = { dryRun: false }) {
        const { owner, repo } = await _u.githubOrigin();
        const repoData = await _u._githubRepo();
        if ("Organization" !== repoData.owner?.type) {
          return;
        }
        if ("clevercanyon" !== repoData.organization?.login) {
          return;
        }
        if (!repoData.permissions?.admin) {
          return;
        }
        const pkg2 = await _u.pkg();
        if (obp_exports.get(pkg2, "config.c10n.&.github.configVersion") === githubConfigVersion) {
          _u.log(chalk_exports.gray("GitHub repo configuration is up-to-date @v" + githubConfigVersion + "."));
          return;
        }
        if ("main" !== repoData.default_branch) {
          throw new Error("githubCheckRepoOrgWideStandards: Default branch at GitHub must be `main`.");
        }
        await _u._githubEnsureRepoEnvs({ dryRun: opts.dryRun });
        const requiredLabels = {
          "bug report": {
            color: "b60205",
            desc: "Something isn\u2019t working."
          },
          "good first issue": {
            color: "fef2c0",
            desc: "Good first issue for newcomers."
          },
          "question": {
            color: "0e8a16",
            desc: "Something is being asked."
          },
          "request": {
            color: "1d76db",
            desc: "Something is being requested."
          },
          "robotic": {
            color: "eeeeee",
            desc: "Something created robotically."
          },
          "suggestion": {
            color: "fbca04",
            desc: "Something is being suggested."
          }
        };
        const rulesets = {
          main: {
            name: "main",
            target: "branch",
            enforcement: "active",
            conditions: { ref_name: { include: ["refs/heads/main"], exclude: [] } },
            rules: [
              { type: "creation" },
              { type: "deletion" },
              { type: "non_fast_forward" },
              { type: "required_signatures" },
              { type: "required_linear_history" },
              { type: "update", parameters: { update_allows_fetch_and_merge: true } },
              { type: "required_deployments", parameters: { required_deployment_environments: ["ci"] } },
              {
                type: "pull_request",
                parameters: {
                  require_code_owner_review: true,
                  require_last_push_approval: true,
                  required_approving_review_count: 1,
                  dismiss_stale_reviews_on_push: true,
                  required_review_thread_resolution: true
                }
              }
            ],
            bypass_actors: [{ actor_id: 7256007, actor_type: "Team", bypass_mode: "always" }]
          }
        };
        const protectedBranches = {
          main: {
            lock_branch: false,
            block_creations: true,
            allow_deletions: false,
            allow_fork_syncing: false,
            allow_force_pushes: false,
            required_signatures: true,
            required_linear_history: true,
            required_conversation_resolution: true,
            required_status_checks: null,
            // We don't use.
            // required_deployment_environments: { environments: ['ci'] },
            // Deployments not currently implemented for branch protections via API.
            // In order to pull this off it has to be done through a ruleset.
            restrictions: { users: [], teams: ["owners"], apps: [] },
            required_pull_request_reviews: {
              dismiss_stale_reviews: true,
              require_code_owner_reviews: true,
              required_approving_review_count: 1,
              require_last_push_approval: true,
              dismissal_restrictions: { users: [], teams: ["owners"], apps: [] },
              bypass_pull_request_allowances: { users: [], teams: ["owners"], apps: [] }
            },
            enforce_admins: false
            // No. Let's not get too crazy.
          }
        };
        const labels = obj_exports.assign({}, obp_exports.get(pkg2, "config.c10n.&.github.labels", {}), requiredLabels);
        const labelsToDelete = await _u._githubRepoLabels();
        const requiredTeams = { owners: "admin", "security-managers": "pull" };
        const teams = obj_exports.assign({}, obp_exports.get(pkg2, "config.c10n.&.github.teams", {}), requiredTeams);
        const teamsToDelete = await _u._githubRepoTeams();
        const rulesetsToDelete = await _u._githubRepoRulesets();
        const protectedBranchesToDelete = await _u._githubRepoProtectedBranches();
        const defaultHomepage = "https://github.com/" + url_exports.encode(owner) + "/" + url_exports.encode(repo) + "#readme";
        const defaultDescription = "Another great project by @" + repoData.owner.login + ".";
        _u.log(chalk_exports.gray("Configuring GitHub repo using org-wide standards."));
        if (!opts.dryRun) {
          await octokit.request("PATCH /repos/{owner}/{repo}", {
            owner,
            repo,
            has_wiki: true,
            has_issues: true,
            has_projects: true,
            has_discussions: true,
            has_downloads: true,
            allow_auto_merge: false,
            allow_squash_merge: true,
            allow_merge_commit: false,
            allow_rebase_merge: false,
            allow_update_branch: true,
            delete_branch_on_merge: true,
            web_commit_signoff_required: false,
            // allow_forking: false,
            // Not possible to configure forking via API ops.
            // Disabled for private repos at org level already.
            // Public repos are always forkable repos, no exceptions.
            ...!repoData.private ? {
              security_and_analysis: {
                // advanced_security: { status: 'enabled' },
                // Always on for public repos, and throws warning when attempting to enable.
                // For private repos, these features are currently unavailable on the pro plan.
                secret_scanning: { status: "enabled" },
                secret_scanning_push_protection: { status: "enabled" }
              }
            } : {},
            merge_commit_title: "MERGE_MESSAGE",
            merge_commit_message: "PR_TITLE",
            squash_merge_commit_title: "PR_TITLE",
            squash_merge_commit_message: "COMMIT_MESSAGES",
            homepage: pkg2.homepage || defaultHomepage,
            description: pkg2.description || defaultDescription,
            is_template: await _u.isPkgSkeleton()
          });
          await octokit.request("PUT /repos/{owner}/{repo}/vulnerability-alerts", { owner, repo });
          await octokit.request("PUT /repos/{owner}/{repo}/automated-security-fixes", { owner, repo });
          if (!repoData.private) {
            await octokit.request("PUT /repos/{owner}/{repo}/private-vulnerability-reporting", { owner, repo });
          }
        }
        for (const [labelName, labelData] of Object.entries(labels)) {
          if (labelsToDelete[labelName]) {
            delete labelsToDelete[labelName];
            _u.log(chalk_exports.gray("Updating `" + labelName + "` label in GitHub repo to `#" + labelData.color + "` color."));
            if (!opts.dryRun) {
              await octokit.request("PATCH /repos/{owner}/{repo}/labels/{labelName}", { owner, repo, labelName, ...labelData });
            }
          } else {
            _u.log(chalk_exports.gray("Adding `" + labelName + "` label to GitHub repo with `#" + labelData.color + "` color."));
            if (!opts.dryRun) {
              await octokit.request("POST /repos/{owner}/{repo}/labels", { owner, repo, name: labelName, ...labelData });
            }
          }
        }
        for (const [labelName, labelData] of Object.entries(labelsToDelete)) {
          _u.log(chalk_exports.gray("Deleting `" + labelName + "` (unused) label with `#" + labelData.color + "` color from GitHub repo."));
          if (!opts.dryRun) {
            await octokit.request("DELETE /repos/{owner}/{repo}/labels/{labelName}", { owner, repo, labelName });
          }
        }
        for (const [teamSlug, permission] of Object.entries(teams)) {
          delete teamsToDelete[teamSlug];
          _u.log(chalk_exports.gray("Adding `" + teamSlug + "` team to GitHub repo with `" + permission + "` permission."));
          if (!opts.dryRun) {
            await octokit.request("PUT /orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}", { org: owner, owner, repo, teamSlug, permission });
          }
        }
        for (const [teamSlug, teamData] of Object.entries(teamsToDelete)) {
          _u.log(chalk_exports.gray("Deleting `" + teamSlug + "` (unused) team with `" + teamData.permission + "` permission from GitHub repo."));
          if (!opts.dryRun) {
            await octokit.request("DELETE /orgs/{org}/teams/{teamSlug}/repos/{owner}/{repo}", { org: owner, owner, repo, teamSlug });
          }
        }
        for (const [rulesetName, rulesetProtections] of Object.entries(rulesets)) {
          if (rulesetsToDelete[rulesetName]) {
            const rulesetId = rulesetsToDelete[rulesetName].id;
            delete rulesetsToDelete[rulesetName];
            _u.log(chalk_exports.gray("Updating `" + rulesetName + "` ruleset in GitHub repo."));
            if (!opts.dryRun) {
              await octokit.request("PUT /repos/{owner}/{repo}/rulesets/{rulesetId}", { owner, repo, rulesetId, ...rulesetProtections });
            }
          } else {
            _u.log(chalk_exports.gray("Adding `" + rulesetName + "` ruleset to GitHub repo."));
            if (!opts.dryRun) {
              await octokit.request("POST /repos/{owner}/{repo}/rulesets", { owner, repo, ...rulesetProtections });
            }
          }
        }
        for (const [rulesetName, rulesetData] of Object.entries(rulesetsToDelete)) {
          _u.log(chalk_exports.gray("Deleting `" + rulesetName + "` (unused) ruleset from GitHub repo."));
          if (!opts.dryRun) {
            await octokit.request("DELETE /repos/{owner}/{repo}/rulesets/{rulesetId}", { owner, repo, rulesetId: rulesetData.id });
          }
        }
        for (const [branchName, branchProtections] of Object.entries(protectedBranches)) {
          delete protectedBranchesToDelete[branchName];
          _u.log(chalk_exports.gray("Protecting `" + branchName + "` branch in GitHub repo."));
          if (!opts.dryRun) {
            await octokit.request("PUT /repos/{owner}/{repo}/branches/{branchName}/protection", { owner, repo, branchName, ...branchProtections });
          }
        }
        for (const [branchName] of Object.entries(protectedBranchesToDelete)) {
          _u.log(chalk_exports.gray("Deleting `" + branchName + "` (unused) branch protection in GitHub repo."));
          if (!opts.dryRun) {
            await octokit.request("DELETE /repos/{owner}/{repo}/branches/{branchName}/protection", { owner, repo, branchName });
          }
        }
        if (!opts.dryRun) {
          await _u.updatePkg("config.c10n.&.github.configVersion", githubConfigVersion);
        }
      }
      static async githubPushRepoEnvs(opts = { dryRun: false }) {
        const { id: repoId, ...repoData } = await _u._githubRepo();
        if ("Organization" !== repoData.owner?.type) {
          return;
        }
        if ("clevercanyon" !== repoData.organization?.login) {
          return;
        }
        if (!repoData.permissions?.admin) {
          return;
        }
        const pkg2 = await _u.pkg();
        if (obp_exports.get(pkg2, "config.c10n.&.github.envsVersion") === githubEnvsVersion) {
          _u.log(chalk_exports.gray("GitHub repo environments are up-to-date @v" + githubEnvsVersion + "."));
          return;
        }
        _u.log(chalk_exports.gray("Configuring GitHub repo environments using org-wide standards."));
        const envFiles = await _u.envFiles();
        const envKeys = await _u._envsExtractKeys();
        await _u._githubEnsureRepoEnvs({ dryRun: opts.dryRun });
        for (const [envName] of Object.entries(obj_exports.omit(envFiles, ["main"]))) {
          const envSecretsToDelete = await _u._githubRepoEnvSecrets(repoId, envName);
          for (const [envSecretName, envSecretValue] of Object.entries({
            ["USER_DOTENV_KEY_MAIN"]: envKeys.main,
            ["USER_DOTENV_KEY_" + envName.toUpperCase()]: envKeys[envName]
          })) {
            delete envSecretsToDelete[envSecretName];
            const { envPublicKeyId, envPublicKey } = await _u._githubRepoEnvPublicKey(repoId, envName);
            const encryptedEnvSecretValue = await sodium.ready.then(() => {
              const sodiumKey = sodium.from_base64(envPublicKey, sodium.base64_variants.ORIGINAL);
              return sodium.to_base64(sodium.crypto_box_seal(sodium.from_string(envSecretValue), sodiumKey), sodium.base64_variants.ORIGINAL);
            });
            _u.log(chalk_exports.gray("Updating `" + envSecretName + "` secret in `" + envName + "` repo env at GitHub."));
            if (!opts.dryRun) {
              await octokit.request("PUT /repositories/{repoId}/environments/{envName}/secrets/{envSecretName}", {
                repoId,
                envName,
                envSecretName,
                key_id: envPublicKeyId,
                encrypted_value: encryptedEnvSecretValue
              });
            }
          }
          for (const [envSecretName] of Object.entries(envSecretsToDelete)) {
            _u.log(chalk_exports.gray("Deleting `" + envSecretName + "` (unused) secret in `" + envName + "` repo env at GitHub."));
            if (!opts.dryRun) {
              await octokit.request("DELETE /repositories/{repoId}/environments/{envName}/secrets/{envSecretName}", { repoId, envName, envSecretName });
            }
          }
        }
        if (!opts.dryRun) {
          await _u.updatePkg("config.c10n.&.github.envsVersion", githubEnvsVersion);
        }
      }
      static async _githubRepo() {
        const { owner, repo } = await _u.githubOrigin();
        const r = await octokit.request("GET /repos/{owner}/{repo}", { owner, repo });
        if (!is_exports.object(r) || !is_exports.object(r.data) || !r.data.id) {
          throw new Error("u._githubRepo: Failed to acquire GitHub repository\u2019s data.");
        }
        return r.data;
      }
      static async _githubRepoLabels() {
        const labels = {};
        const { owner, repo } = await _u.githubOrigin();
        const i6r = octokit.paginate.iterator("GET /repos/{owner}/{repo}/labels{?per_page}", { owner, repo, per_page: 100 });
        if (!is_exports.object(i6r)) {
          throw new Error("u._githubRepoLabels: Failed to acquire GitHub repository\u2019s labels.");
        }
        for await (const { data } of i6r) {
          for (const label of data) {
            if (!is_exports.object(label) || !label.name) {
              throw new Error("u._githubRepoLabels: Failed to acquire GitHub repository\u2019s label data.");
            }
            labels[label.name] = label;
          }
        }
        return labels;
      }
      static async _githubRepoTeams() {
        const repoTeams = {};
        const { owner, repo } = await _u.githubOrigin();
        const i6r = octokit.paginate.iterator("GET /repos/{owner}/{repo}/teams{?per_page}", { owner, repo, per_page: 100 });
        if (!is_exports.object(i6r)) {
          throw new Error("u._githubRepoTeams: Failed to acquire GitHub repository\u2019s teams.");
        }
        for await (const { data } of i6r) {
          for (const repoTeam of data) {
            if (!is_exports.object(repoTeam) || !repoTeam.slug) {
              throw new Error("u._githubRepoTeams: Failed to acquire a GitHub repo team\u2019s data.");
            }
            repoTeams[repoTeam.slug] = repoTeam;
          }
        }
        return repoTeams;
      }
      static async _githubRepoProtectedBranches() {
        const repoProtectedBranches = {};
        const { owner, repo } = await _u.githubOrigin();
        const i6r = octokit.paginate.iterator("GET /repos/{owner}/{repo}/branches{?protected,per_page}", { owner, repo, protected: true, per_page: 100 });
        if (!is_exports.object(i6r)) {
          throw new Error("u._githubRepoProtectedBranches: Failed to acquire GitHub repository\u2019s protected branches.");
        }
        for await (const { data } of i6r) {
          for (const repoProtectedBranch of data) {
            if (!is_exports.object(repoProtectedBranch) || !repoProtectedBranch.name) {
              throw new Error("u._githubRepoProtectedBranches: Failed to acquire a GitHub repository\u2019s protected branch data.");
            }
            repoProtectedBranches[repoProtectedBranch.name] = repoProtectedBranch;
          }
        }
        return repoProtectedBranches;
      }
      static async _githubRepoRulesets() {
        const repoRulesets = {};
        const { owner, repo } = await _u.githubOrigin();
        const i6r = octokit.paginate.iterator("GET /repos/{owner}/{repo}/rulesets{?includes_parents,per_page}", { owner, repo, includes_parents: false, per_page: 100 });
        if (!is_exports.object(i6r)) {
          throw new Error("u._githubRepoRulesets: Failed to acquire GitHub repository\u2019s rulesets.");
        }
        for await (const { data } of i6r) {
          for (const repoRuleset of data) {
            if (!is_exports.object(repoRuleset) || !repoRuleset.name) {
              throw new Error("u._githubRepoRulesets: Failed to acquire a GitHub repository\u2019s ruleset data.");
            }
            repoRulesets[repoRuleset.name] = repoRuleset;
          }
        }
        return repoRulesets;
      }
      static async _githubRepoEnvs() {
        const envs = {};
        const { owner, repo } = await _u.githubOrigin();
        const i6r = octokit.paginate.iterator("GET /repos/{owner}/{repo}/environments{?per_page}", { owner, repo, per_page: 100 });
        if (!is_exports.object(i6r)) {
          throw new Error("u._githubRepoEnvs: Failed to acquire GitHub repository\u2019s environments.");
        }
        for await (const { data } of i6r) {
          for (const env of data) {
            if (!is_exports.object(env) || !env.name) {
              throw new Error("u._githubRepoEnvs: Failed to acquire GitHub repository\u2019s environment data.");
            }
            envs[env.name] = env;
          }
        }
        return envs;
      }
      static async _githubRepoEnvPublicKey(repoId, envName) {
        const r = await octokit.request("GET /repositories/{repoId}/environments/{envName}/secrets/public-key", { repoId, envName });
        if (!is_exports.object(r) || !is_exports.object(r.data) || !r.data.key_id || !r.data.key) {
          throw new Error("u._githubRepoEnvPublicKey: Failed to acquire GitHub repository env\u2019s public key.");
        }
        return { envPublicKeyId: r.data.key_id, envPublicKey: r.data.key };
      }
      static async _githubRepoEnvSecrets(repoId, envName) {
        const envSecrets = {};
        const i6r = octokit.paginate.iterator("GET /repositories/{repoId}/environments/{envName}/secrets{?per_page}", { repoId, envName, per_page: 100 });
        if (!is_exports.object(i6r)) {
          throw new Error("u._githubRepoEnvSecrets: Failed to acquire GitHub repository\u2019s secrets for an environment.");
        }
        for await (const { data } of i6r) {
          for (const envSecret of data) {
            if (!is_exports.object(envSecret) || !envSecret.name) {
              throw new Error("u._githubRepoEnvSecrets: Failed to acquire GitHub repository\u2019s secret data for an environment.");
            }
            envSecrets[envSecret.name] = envSecret;
          }
        }
        return envSecrets;
      }
      static async _githubRepoEnvBranchPolicies(envName) {
        const envBranchPolicies = {};
        const { owner, repo } = await _u.githubOrigin();
        const i6r = octokit.paginate.iterator("GET /repos/{owner}/{repo}/environments/{envName}/deployment-branch-policies{?per_page}", { owner, repo, envName, per_page: 100 });
        if (!is_exports.object(i6r)) {
          throw new Error("u._githubRepoEnvBranchPolicies: Failed to acquire GitHub repository\u2019s branch policies for an environment.");
        }
        for await (const { data } of i6r) {
          for (const envBranchPolicy of data) {
            if (!is_exports.object(envBranchPolicy) || !envBranchPolicy.name) {
              throw new Error("u._githubRepoEnvBranchPolicies: Failed to acquire GitHub repository\u2019s branch policy data for an environment.");
            }
            envBranchPolicies[envBranchPolicy.name] = envBranchPolicy;
          }
        }
        return envBranchPolicies;
      }
      static async _githubEnsureRepoEnvs(opts = { dryRun: false }) {
        if (_u.s._githubRepoEnvsEnsured)
          return;
        _u.s._githubRepoEnvsEnsured = true;
        const envFiles = await _u.envFiles();
        const { owner, repo } = await _u.githubOrigin();
        const repoEnvs = await _u._githubRepoEnvs();
        const repoEnvsToDelete = obj_exports.assign({}, repoEnvs);
        for (const [envName] of Object.entries(obj_exports.omit(envFiles, ["main"]))) {
          delete repoEnvsToDelete[envName];
          if (repoEnvs[envName]) {
            _u.log(chalk_exports.gray("Updating `" + envName + "` repo env at GitHub."));
          } else {
            _u.log(chalk_exports.gray("Creating `" + envName + "` repo env at GitHub."));
          }
          if (!opts.dryRun) {
            await octokit.request("PUT /repos/{owner}/{repo}/environments/{envName}", {
              owner,
              repo,
              envName,
              deployment_branch_policy: {
                protected_branches: false,
                custom_branch_policies: true
              }
            });
            const repoEnvBranchPolicies = await _u._githubRepoEnvBranchPolicies(envName);
            const repoEnvBranchPoliciesToDelete = obj_exports.assign({}, repoEnvBranchPolicies);
            for (const repoEnvBranchPolicyName of [..."prod" === envName ? ["main"] : []]) {
              delete repoEnvBranchPoliciesToDelete[repoEnvBranchPolicyName];
              if (!repoEnvBranchPolicies[repoEnvBranchPolicyName]) {
                _u.log(chalk_exports.gray("Creating `" + repoEnvBranchPolicyName + "` branch policy for `" + envName + "` repo env at GitHub."));
                if (!opts.dryRun) {
                  await octokit.request("POST /repos/{owner}/{repo}/environments/{envName}/deployment-branch-policies", {
                    owner,
                    repo,
                    envName,
                    name: repoEnvBranchPolicyName
                  });
                }
              }
            }
            for (const [repoEnvBranchPolicyName, repoEnvBranchPolicy] of Object.entries(repoEnvBranchPoliciesToDelete)) {
              _u.log(chalk_exports.gray("Deleting `" + repoEnvBranchPolicyName + "` (unused) branch policy for `" + envName + "` repo env at GitHub."));
              if (!opts.dryRun) {
                await octokit.request("DELETE /repos/{owner}/{repo}/environments/{envName}/deployment-branch-policies/{branchPolicyId}", {
                  owner,
                  repo,
                  envName,
                  branchPolicyId: repoEnvBranchPolicy.id
                });
              }
            }
          }
        }
        for (const [envName] of Object.entries(repoEnvsToDelete)) {
          _u.log(chalk_exports.gray("Deleting `" + envName + "` (unused) repo env at GitHub."));
          if (!opts.dryRun) {
            await octokit.request("DELETE /repos/{owner}/{repo}/environments/{envName}", { owner, repo, envName });
          }
        }
      }
      /*
       * Env utilities.
       */
      static async envFiles() {
        return {
          main: path3.resolve(projDir2, "./dev/.envs/.env"),
          dev: path3.resolve(projDir2, "./dev/.envs/.env.dev"),
          ci: path3.resolve(projDir2, "./dev/.envs/.env.ci"),
          stage: path3.resolve(projDir2, "./dev/.envs/.env.stage"),
          prod: path3.resolve(projDir2, "./dev/.envs/.env.prod")
        };
      }
      static async isEnvsVault() {
        return fs3.existsSync(path3.resolve(projDir2, "./.env.vault"));
      }
      static async envsPush(opts = { dryRun: false }) {
        const envFiles = await _u.envFiles();
        for (const [envName, envFile] of Object.entries(envFiles)) {
          if (!fs3.existsSync(envFile)) {
            _u.log(chalk_exports.gray("Creating file for `" + envName + "` env."));
            if (!opts.dryRun) {
              await fsp.mkdir(path3.dirname(envFile), { recursive: true });
              await fsp.writeFile(envFile, "# " + envName);
            }
          }
          _u.log(chalk_exports.gray("Pushing `" + envName + "` env to Dotenv Vault."));
          if (!opts.dryRun) {
            await _u.spawn("npx", ["dotenv-vault", "push", envName, envFile, "--yes"]);
          }
        }
        _u.log(chalk_exports.gray("Encrypting all envs using latest Dotenv Vault data."));
        if (!opts.dryRun) {
          await _u.spawn("npx", ["dotenv-vault", "build", "--yes"]);
        }
        if (await _u.isGitRepo() && await _u.isGitRepoOriginGitHub()) {
          await _u.githubPushRepoEnvs({ dryRun: opts.dryRun });
        }
      }
      static async envsPull(opts = { dryRun: false }) {
        const envFiles = await _u.envFiles();
        for (const [envName, envFile] of Object.entries(envFiles)) {
          _u.log(chalk_exports.gray("Pulling `" + envName + "` env from Dotenv Vault."));
          if (!opts.dryRun) {
            await fsp.mkdir(path3.dirname(envFile), { recursive: true });
            await _u.spawn("npx", ["dotenv-vault", "pull", envName, envFile, "--yes"]);
            await fsp.rm(envFile + ".previous", { force: true });
          }
        }
      }
      static async envsKeys(opts = { dryRun: false }) {
        _u.log(chalk_exports.gray("Getting all Dotenv Vault keys."));
        if (!opts.dryRun) {
          await _u.spawn("npx", ["dotenv-vault", "keys", "--yes"]);
        }
      }
      static async envsEncrypt(opts = { dryRun: false }) {
        _u.log(chalk_exports.gray("Building Dotenv Vault; i.e., encrypting all envs."));
        if (!opts.dryRun) {
          await _u.spawn("npx", ["dotenv-vault", "build", "--yes"]);
        }
      }
      static async envsDecrypt(opts = { keys: [], dryRun: false }) {
        const envFiles = await _u.envFiles();
        for (const key of opts.keys) {
          const envName = key.split("?")[1]?.split("=")[1] || "";
          const envFile = envFiles[envName] || "";
          if (!envName || !envFile) {
            throw new Error("u.envsDecrypt: Invalid Dotenv Vault decryption key: `" + key + "`.");
          }
          _u.log(chalk_exports.gray("Decrypting `" + envName + "` env using Dotenv Vault key."));
          if (!opts.dryRun) {
            const env = dotenv_exports.$._parseVault({
              DOTENV_KEY: key,
              // Pass explicitly.
              path: path3.resolve(projDir2, "./.env.vault")
            });
            await fsp.mkdir(path3.dirname(envFile), { recursive: true });
            await fsp.writeFile(envFile, await _u._envToProps(envName, env));
          }
        }
      }
      static async envsInstallOrDecrypt(opts = { mode: "prod" }) {
        if (!await _u.isInteractive()) {
          const env = process.env;
          if (!env.USER_DOTENV_KEY_MAIN) {
            throw new Error("u.envsInstallOrDecrypt: Missing `USER_DOTENV_KEY_MAIN` environment variable.");
          }
          const keys = [env.USER_DOTENV_KEY_MAIN];
          if ("dev" === opts.mode) {
            if (!env.USER_DOTENV_KEY_DEV) {
              throw new Error("u.envsInstallOrDecrypt: Missing `USER_DOTENV_KEY_DEV` environment variable.");
            }
            keys.push(env.USER_DOTENV_KEY_DEV);
          } else if ("ci" === opts.mode) {
            if (!env.USER_DOTENV_KEY_CI) {
              throw new Error("u.envsInstallOrDecrypt: Missing `USER_DOTENV_KEY_CI` environment variable.");
            }
            keys.push(env.USER_DOTENV_KEY_CI);
          } else if ("stage" === opts.mode) {
            if (!env.USER_DOTENV_KEY_STAGE) {
              throw new Error("u.envsInstallOrDecrypt: Missing `USER_DOTENV_KEY_STAGE` environment variable.");
            }
            keys.push(env.USER_DOTENV_KEY_STAGE);
          } else if ("prod" === opts.mode) {
            if (!env.USER_DOTENV_KEY_PROD) {
              throw new Error("u.envsInstallOrDecrypt: Missing `USER_DOTENV_KEY_PROD` environment variable.");
            }
            keys.push(env.USER_DOTENV_KEY_PROD);
          }
          await _u.spawn(path3.resolve(binDir, "./envs.mjs"), ["decrypt", "--keys", ...keys]);
        } else {
          await _u.spawn(path3.resolve(binDir, "./envs.mjs"), ["install"]);
        }
      }
      static async loadEnv({ mode }) {
        const envFiles = await _u.envFiles();
        if (!mode || "main" === mode || !envFiles[mode]) {
          throw new Error("u.loadEnv: Invalid mode: `" + mode + "`.");
        }
        return dotenv_exports.parseExpand([envFiles.main, envFiles[mode]]);
      }
      static async _envsExtractKeys() {
        const keys = {};
        const envFiles = await _u.envFiles();
        _u.log(chalk_exports.gray("Extracting all Dotenv Vault keys."));
        const output = await _u.spawn("npx", ["dotenv-vault", "keys", "--yes"], { quiet: true });
        let _m = null;
        const regExp2 = /\bdotenv:\/\/:key_.+?\?environment=([^\s]+)/giu;
        while ((_m = regExp2.exec(output)) !== null) {
          keys[_m[1]] = _m[0];
        }
        if (Object.keys(keys).length !== Object.keys(envFiles).length) {
          throw new Error("u._envsExtractKeys: Failed to extract Dotenv Vault keys.");
        }
        return keys;
      }
      static async _envToJSON(envName, env) {
        let json = {};
        for (let [name, value] of Object.entries(env)) {
          json[name] = String(value);
        }
        return json_exports.stringify(json, { pretty: true });
      }
      static async _envToProps(envName, env) {
        let props = "# " + envName + "\n";
        for (let [name, value] of Object.entries(env)) {
          value = String(value);
          value = value.replace(/\r\n?/gu, "\n");
          value = value.replace(/\n/gu, "\\n");
          if (value.includes("\\n")) {
            props += name + "=" + str_exports.quote(value, { type: "double" }) + "\n";
          } else {
            props += name + "=" + str_exports.quote(value) + "\n";
          }
        }
        return props;
      }
      /*
       * NPM utilities.
       */
      static async isNPMPkg() {
        return await _u.isGitRepo() && false === pkgPrivate;
      }
      static async isNPMPkgOriginNPMJS() {
        try {
          return await _u.npmjsPkgOrigin() && // Throws exception on failure.
          await _u.isNPMPkgRegistryNPMJS() && // Confirms `https://registry.npmjs.org`.
          // This command throws an exception on failure; e.g., if package is not published at npmjs.
          await _u.spawn("npm", ["author", "ls"], { quiet: true }).then(() => true);
        } catch {
          return false;
        }
      }
      static async isNPMPkgRegistryNPMJS() {
        return await _u.isNPMPkgRegistry("https://registry.npmjs.org");
      }
      static async isNPMPkgRegistry(registry) {
        return registry.replace(/\/+$/, "") === String(await _u.spawn("npm", ["config", "get", "registry"], { quiet: true })).trim().replace(/\/+$/, "");
      }
      static async isNPMPkgPublishable(opts = { mode: "prod" }) {
        return await _u.isNPMPkg() && "main" === await _u.gitCurrentBranch() && "prod" === opts.mode;
      }
      static async npmInstall() {
        await _u.spawn("npm", ["install"], { stdio: "inherit" });
      }
      static async npmCleanInstall() {
        await _u.spawn("npm", ["ci"], { stdio: "inherit" });
      }
      static async npmUpdate(opts = { directive: "default" }) {
        if ("no" === opts.directive) {
          _u.log(chalk_exports.gray("Skipping NPM update entirely."));
        } else {
          if ("nimble" === opts.directive) {
            const pkg2 = await _u.pkg();
            let dependenciesToUpdate = [];
            for (const [dependency] of Object.entries(pkg2.dependencies || {}))
              dependenciesToUpdate.push(dependency);
            for (const [dependency] of Object.entries(pkg2.peerDependencies || {}))
              dependenciesToUpdate.push(dependency);
            if (!await _u.isPkgName("@clevercanyon/dev-deps"))
              for (const [dependency] of Object.entries((await _u.depPkg("@clevercanyon/dev-deps"))?.dependencies || {})) {
                if (/^@clevercanyon\//iu.test(dependency))
                  dependenciesToUpdate.push(dependency);
              }
            if (dependenciesToUpdate.length) {
              dependenciesToUpdate = [...new Set(dependenciesToUpdate)];
              _u.log(chalk_exports.gray("Updating these specific NPM dependencies:")), _u.log(chalk_exports.gray(dependenciesToUpdate.join(", ")));
              await _u.spawn("npm", ["update", ...dependenciesToUpdate, "--save"], { stdio: "inherit" });
            }
            _u.log(chalk_exports.gray("Updating other NPM dependencies in `--prefer-offline` mode."));
            await _u.spawn("npm", ["update", "--prefer-offline", "--save"], { stdio: "inherit" });
          } else {
            await _u.spawn("npm", ["update", "--save"], { stdio: "inherit" });
          }
        }
        await _u.updatePkg();
      }
      static async npmPublish(opts = { dryRun: false }) {
        if (!opts.dryRun) {
          await _u.spawn("npm", ["publish"]);
        }
        if (await _u.isNPMPkgOriginNPMJS()) {
          await _u.npmjsCheckPkgOrgWideStandards({ dryRun: opts.dryRun });
        }
      }
      /*
       * npmjs utilities.
       */
      static async npmjsPkgOrigin() {
        let m = null;
        if (m = /^(@[^/]+)\/([^/]+)$/iu.exec(pkgName2)) {
          return { org: m[1], name: m[2] };
        } else if (m = /^([^/]+)$/iu.exec(pkgName2)) {
          return { org: "", name: m[1] };
        }
        throw new Error("u.npmjsPkgOrigin: Package does not have an npmjs origin.");
      }
      static async npmjsCheckPkgOrgWideStandards(opts = { dryRun: false }) {
        const { org } = await _u.npmjsPkgOrigin();
        if ("@clevercanyon" !== org) {
          return;
        }
        if (!await _u._npmjsOrgUserCanAdmin(org)) {
          return;
        }
        const pkg2 = await _u.pkg();
        if (obp_exports.get(pkg2, "config.c10n.&.npmjs.configVersions") === githubConfigVersion + "," + npmjsConfigVersion) {
          _u.log(chalk_exports.gray("npmjs package configuration is up-to-date @v" + githubConfigVersion + " @v" + npmjsConfigVersion + "."));
          return;
        }
        _u.log(chalk_exports.gray("Configuring npmjs package using org-wide standards."));
        const teamsToDelete = await _u._npmjsOrgTeams(org);
        const alwaysOnRequiredTeams = { developers: "read-write", owners: "read-write", "security-managers": "read-only" };
        const teams = obj_exports.assign({}, obp_exports.get(pkg2, "config.c10n.&.npmjs.teams", obp_exports.get(pkg2, "config.c10n.&.github.teams", {})), alwaysOnRequiredTeams);
        Object.keys(teams).forEach((team) => teams[team] = /^(?:read-write|push|maintain|admin)$/iu.test(teams[team]) ? "read-write" : "read-only");
        for (const [team, permission] of Object.entries(teams)) {
          delete teamsToDelete[team];
          _u.log(chalk_exports.gray("Adding `" + team + "` team to npmjs package with `" + permission + "` permission."));
          if (!opts.dryRun) {
            await _u.spawn("npm", ["access", "grant", permission, org + ":" + team, pkgName2], { quiet: true });
          }
        }
        for (const [team] of Object.entries(teamsToDelete)) {
          _u.log(chalk_exports.gray("Deleting `" + team + "` (unused) from npmjs package."));
          if (!opts.dryRun) {
            await _u.spawn("npm", ["access", "revoke", org + ":" + team, pkgName2], { quiet: true }).catch(() => null);
          }
        }
        if (!opts.dryRun) {
          await _u.updatePkg("config.c10n.&.npmjs.configVersions", githubConfigVersion + "," + npmjsConfigVersion);
        }
      }
      static async _npmjsOrgUserCanAdmin(org) {
        try {
          return is_exports.plainObject(await _u._npmjsOrgUsers(org));
        } catch {
          return false;
        }
      }
      static async _npmjsOrgUsers(org) {
        const members = json_exports.parse(String(await _u.spawn("npm", ["org", "ls", org, "--json"], { quiet: true })));
        if (!is_exports.plainObject(members)) {
          throw new Error("u._npmjsOrgMembers: Failed to acquire list of NPM team members for `" + org + "`.");
        }
        return members;
      }
      static async _npmjsOrgTeams(org) {
        const teams = json_exports.parse(String(await _u.spawn("npm", ["team", "ls", org, "--json"], { quiet: true })));
        if (!is_exports.array(teams)) {
          throw new Error("u._npmjsOrgTeams: Failed to acquire list of NPM teams for `" + org + "` org.");
        }
        return teams.reduce((obj, team) => {
          obj[team.replace(/^[^:]+:/u, "")] = team;
          return obj;
        }, {});
      }
      /*
       * Vite utilities.
       */
      static async isViteBuild() {
        return "" !== pkgBuildAppType;
      }
      static async viteBuild(opts = { mode: "prod" }) {
        await _u.spawn("npx", ["vite", "build", "--mode", opts.mode]);
      }
      /*
       * Dotfile utilities.
       */
      static async updateDotfiles() {
        await _u.spawn("npx", ["@clevercanyon/madrun", "update", "dotfiles"]);
      }
      /**
       * Finale utilities.
       */
      static async finaleBox(title, text) {
        return await chalk_exports.finaleBox(title, text, { image: c10nLogo });
      }
    };
  }
});

// dev/.files/wrangler/settings.mjs
var settings_exports = {};
__export(settings_exports, {
  default: () => settings_default
});
import os2 from "node:os";
import path13 from "node:path";
var __vite_injected_original_import_meta_url4, __dirname3, projDir3, distDir, settings_default;
var init_settings = __esm({
  "dev/.files/wrangler/settings.mjs"() {
    "use strict";
    init_dist();
    init_dist2();
    init_extensions();
    init_utilities();
    __vite_injected_original_import_meta_url4 = "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/dev/.files/wrangler/settings.mjs";
    __dirname3 = fs_exports.imuDirname(__vite_injected_original_import_meta_url4);
    projDir3 = path13.resolve(__dirname3, "../../..");
    distDir = path13.resolve(__dirname3, "../../../dist");
    settings_default = async () => {
      const pkg2 = await u.pkg();
      const pkgSlug2 = app_exports.pkgSlug(pkg2.name);
      const o5pOrg = brand_exports.get("@jaswrks/o5p.org");
      const o5pMe = brand_exports.get("@jaswrks/o5p.me");
      const hop = brand_exports.get("@clevercanyon/hop.gdn");
      let brandHostname = hop.hostname;
      let brandDevZoneHostname = hop.org.n7m + ".workers.dev";
      let brandAccountId = "f1176464a976947aa5665d989814a4b1";
      let brandSupportsLogpush = true;
      if (/^workers-o5p-(?:org|me)(?:$|-)/u.test(pkgSlug2)) {
        brandHostname = /^workers-o5p-org(?:$|-)/u.test(pkgSlug2) ? o5pOrg.hostname : o5pMe.hostname;
        brandDevZoneHostname = "j5s.workers.dev";
        brandAccountId = "4cf0983a5f62681776b3bc8a8e35b104";
        brandSupportsLogpush = false;
      }
      return {
        // Compatibility.
        compatibilityDate: "2025-02-14",
        // ^ Most recent, as of 2025-03-01.
        compatibilityFlags: ["nodejs_compat"],
        // Adds support for `node:*` modules.
        // Workers & pages.
        defaultAccountId: brandAccountId,
        defaultSendMetricsEnable: false,
        defaultCPULimitTime: time_exports.secondInMilliseconds * 5,
        defaultPlacementMode: "off",
        defaultDevLogLevel: "error",
        defaultLocalIP: "0.0.0.0",
        defaultLocalHostname: "localhost",
        defaultLocalPort: "443",
        defaultLocalProtocol: "https",
        defaultUpstreamProtocol: "https",
        // Workers.
        defaultWorkersDevEnable: false,
        defaultWorkersDevPreviewURLsEnable: false,
        defaultWorkerObservabilityEnabled: true,
        defaultWorkerObservabilityHeadSamplingRate: 1,
        defaultWorkerLogpush: brandSupportsLogpush,
        defaultWorkerZoneName: brandHostname,
        defaultWorkersDevZoneName: brandDevZoneHostname,
        defaultWorkersDomain: "workers." + brandHostname,
        defaultWorkerName: pkgSlug2,
        // e.g., `workers-hop-gdn-utilities`.
        defaultWorkerShortName: pkgSlug2.replace(/^workers-(?:o5p-(?:org|me)|hop-gdn)-/iu, ""),
        defaultWorkerStageShortName: "stage." + pkgSlug2.replace(/^workers-(?:o5p-(?:org|me)|hop-gdn)-/iu, ""),
        defaultWorkerMainEntryFile: path13.resolve(distDir, "./index.js"),
        // Bundling rules; {@see <https://o5p.me/JRHxfC>}.
        defaultWorkerRules: [
          {
            type: "ESModule",
            globs: extensions_default.asNoBraceGlobstars([
              ...extensions_default.byDevGroup.sJavaScript,
              //
              ...extensions_default.byDevGroup.sJavaScriptReact,
              ...extensions_default.byDevGroup.mJavaScript,
              ...extensions_default.byDevGroup.mJavaScriptReact
            ]),
            fallthrough: false
          },
          {
            type: "CommonJS",
            globs: extensions_default.asNoBraceGlobstars([
              ...extensions_default.byDevGroup.cJavaScript,
              //
              ...extensions_default.byDevGroup.cJavaScriptReact
            ]),
            fallthrough: false
          },
          {
            type: "CompiledWasm",
            //
            globs: extensions_default.asNoBraceGlobstars([
              ...extensions_default.byCanonical.wasm
              //
            ]),
            fallthrough: false
          },
          {
            type: "Text",
            globs: extensions_default.asNoBraceGlobstars(
              [...extensions_default.byVSCodeLang.codeTextual].filter(
                (ext2) => ![
                  ...extensions_default.byDevGroup.sJavaScript,
                  //
                  ...extensions_default.byDevGroup.sJavaScriptReact,
                  ...extensions_default.byDevGroup.mJavaScript,
                  ...extensions_default.byDevGroup.mJavaScriptReact,
                  ...extensions_default.byDevGroup.cJavaScript,
                  ...extensions_default.byDevGroup.cJavaScriptReact,
                  ...extensions_default.byCanonical.wasm,
                  ...extensions_default.byDevGroup.allTypeScript
                  // Omit TypeScript also, because it causes Wrangler to choke. Apparently, Wrangler’s build system incorporates TypeScript middleware files.
                  // Therefore, we omit all TypeScript such that Wrangler’s build system can add TS files without them inadvertently being classified as text by our rules.
                  // We don’t expect TypeScript to be present in our `./dist` anyway, so this is harmless, and probably a good idea in general to omit TypeScript here.
                ].includes(ext2)
              )
            ),
            fallthrough: false
          },
          {
            type: "Data",
            globs: extensions_default.asNoBraceGlobstars(
              [...extensions_default.byVSCodeLang.codeTextBinary].filter(
                (ext2) => ![
                  ...extensions_default.byDevGroup.sJavaScript,
                  //
                  ...extensions_default.byDevGroup.sJavaScriptReact,
                  ...extensions_default.byDevGroup.mJavaScript,
                  ...extensions_default.byDevGroup.mJavaScriptReact,
                  ...extensions_default.byDevGroup.cJavaScript,
                  ...extensions_default.byDevGroup.cJavaScriptReact,
                  ...extensions_default.byCanonical.wasm,
                  ...extensions_default.byDevGroup.allTypeScript
                ].includes(ext2)
              )
            ),
            fallthrough: false
          }
        ],
        // Pages.
        defaultPagesZoneName: brandHostname,
        defaultPagesDevZoneName: "pages.dev",
        defaultPagesProjectName: pkgSlug2,
        defaultPagesProjectShortName: pkgSlug2.replace(/-(?:o5p-(?:org|me)|hop-gdn|com|net|org|gdn|me)$/iu, ""),
        defaultPagesProductionBranch: "production",
        defaultPagesProjectStageBranchName: "stage",
        defaultPagesProductionEnvironment: "production",
        defaultPagesAssetsDir: distDir,
        defaultPagesBuildOutputDir: distDir,
        defaultPagesUploadSourceMaps: true,
        // Other.
        osDir: path13.resolve(os2.homedir(), "./.wrangler"),
        projDir: path13.resolve(projDir3, "./.wrangler"),
        projStateDir: path13.resolve(projDir3, "./.wrangler/state"),
        osSSLCertDir: path13.resolve(os2.homedir(), "./.wrangler/local-cert"),
        osSSLKeyFile: path13.resolve(os2.homedir(), "./.wrangler/local-cert/key.pem"),
        osSSLCertFile: path13.resolve(os2.homedir(), "./.wrangler/local-cert/cert.pem"),
        customSSLKeyFile: path13.resolve(projDir3, "./dev/.files/bin/ssl-certs/i10e-ca-key.pem"),
        customSSLCertFile: path13.resolve(projDir3, "./dev/.files/bin/ssl-certs/i10e-ca-crt.pem"),
        runtimeModules: ["cloudflare:email", "cloudflare:sockets", "cloudflare:workers", "cloudflare:workflows"],
        virtualModules: ["cloudflare:test"]
        // It is loaded by `@cloudflare/vitest-pool-workers`.
      };
    };
  }
});

// dev/.files/vite/config.mjs
init_dist();
init_dist2();
import fs7 from "node:fs";
import path14 from "node:path";
import { createLogger, loadEnv } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/vite/dist/node/index.js";

// dev/.files/bin/includes/es-version.mjs
import globals from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/globals/index.js";
var es_version_default = {
  year: 2022,
  lcnYear: "es2022",
  ucnYear: "ES2022",
  globals: {
    ...globals.es2021,
    // Defined by globals package.
    ...globals.es2022
    // Not currently defined by globals package.
  }
};

// dev/.files/vite/config.mjs
init_extensions();

// dev/.files/bin/includes/import-aliases.mjs
init_dist();
init_dist2();
import fs2 from "node:fs";
import path2 from "node:path";
var __vite_injected_original_import_meta_url = "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/dev/.files/bin/includes/import-aliases.mjs";
var __dirname = fs_exports.imuDirname(__vite_injected_original_import_meta_url);
var projDir = path2.resolve(__dirname, "../../../..");
var pkgFile = path2.resolve(projDir, "./package.json");
var pkg = json_exports.parse(fs2.readFileSync(pkgFile).toString());
var userlandAliasesAsGlobs = {};
var userlandAliasesAsRegExpStrings = {};
var userlandAliasesAsFindReplaceRegExps = [];
for (const [glob, relPath] of Object.entries(pkg.imports || {})) {
  if (!is_exports.string(relPath))
    throw new Error("Invalid subpath imports.");
  let regExpRepCounter = 0;
  const regExpString = "^" + (glob.startsWith("#") ? "&?" : "") + str_exports.escRegExp(glob).replace(/\\\*/gu, "(.+?)") + "$";
  userlandAliasesAsGlobs[glob] = path2.resolve(projDir, relPath);
  userlandAliasesAsRegExpStrings[regExpString] = path2.resolve(projDir, relPath).replace(/\*/gu, () => "$" + String(++regExpRepCounter));
  userlandAliasesAsFindReplaceRegExps.push({ find: new RegExp(regExpString, "u"), replacement: userlandAliasesAsRegExpStrings[regExpString] });
}
var import_aliases_default = {
  asGlobs: {
    ...userlandAliasesAsGlobs,
    // In descending order of their precedence in Node.
    "react": path2.resolve(projDir, "./node_modules/preact/compat"),
    "react/jsx-runtime": path2.resolve(projDir, "./node_modules/preact/jsx-runtime"),
    "react-dom": path2.resolve(projDir, "./node_modules/preact/compat"),
    "react-dom/test-utils": path2.resolve(projDir, "./node_modules/preact/test-utils")
  },
  asRegExpStrings: {
    ...userlandAliasesAsRegExpStrings,
    // In descending order of their precedence in Node.
    "^react$": path2.resolve(projDir, "./node_modules/preact/compat"),
    "^react/jsx-runtime$": path2.resolve(projDir, "./node_modules/preact/jsx-runtime"),
    "^react-dom$": path2.resolve(projDir, "./node_modules/preact/compat"),
    "^react-dom/test-utils$": path2.resolve(projDir, "./node_modules/preact/test-utils")
  },
  asFindReplaceRegExps: [
    ...userlandAliasesAsFindReplaceRegExps,
    // In descending order of their precedence in Node.
    { find: /^react$/u, replacement: path2.resolve(projDir, "./node_modules/preact/compat") },
    { find: /^react\/jsx-runtime$/u, replacement: path2.resolve(projDir, "./node_modules/preact/jsx-runtime") },
    { find: /^react-dom$/u, replacement: path2.resolve(projDir, "./node_modules/preact/compat") },
    { find: /^react-dom\/test-utils$/u, replacement: path2.resolve(projDir, "./node_modules/preact/test-utils") }
  ]
};

// dev/.files/vite/config.mjs
init_utilities();

// dev/.files/vite/includes/a16s/dir.mjs
import path4 from "node:path";
var dir_default = async ({ isSSRBuild, distDir: distDir2 }) => {
  return path4.resolve(distDir2, "." + (isSSRBuild ? "/node_modules" : "") + "/assets/a16s");
};

// dev/.files/vite/includes/c10n/brand-config.mjs
init_dist2();
init_utilities();
var brand_config_default = async ({ mode, appBaseURL }) => {
  const virtualId = "virtual:brand/config";
  const resolvedVirtualId = "\0" + virtualId;
  return {
    name: "vite-plugin-c10n-brand-config",
    resolveId(id) {
      if (id === virtualId) {
        return "\0" + id;
      }
    },
    async load(id) {
      if (id === resolvedVirtualId) {
        return "export default " + json_exports.stringify(await u.brandConfig({ mode, baseURL: appBaseURL }), { pretty: true });
      }
    }
  };
};

// dev/.files/vite/includes/c10n/cloudflare-email.mjs
var cloudflare_email_default = async ({ mode, command }) => {
  const virtualId = "cloudflare:email";
  const resolvedVirtualId = "\0" + virtualId;
  return {
    name: "vite-plugin-c10n-cloudflare-email",
    resolveId(id) {
      if ("dev" === mode && "serve" === command && id === virtualId) {
        return "\0" + id;
      }
    },
    async load(id) {
      if ("dev" === mode && "serve" === command && id === resolvedVirtualId) {
        return "export default {};";
      }
    }
  };
};

// dev/.files/vite/includes/c10n/cloudflare-sockets.mjs
var cloudflare_sockets_default = async ({ mode, command }) => {
  const virtualId = "cloudflare:sockets";
  const resolvedVirtualId = "\0" + virtualId;
  return {
    name: "vite-plugin-c10n-cloudflare-sockets",
    resolveId(id) {
      if ("dev" === mode && "serve" === command && id === virtualId) {
        return "\0" + id;
      }
    },
    async load(id) {
      if ("dev" === mode && "serve" === command && id === resolvedVirtualId) {
        return "export default {};";
      }
    }
  };
};

// dev/.files/vite/includes/c10n/cloudflare-workers.mjs
var cloudflare_workers_default = async ({ mode, command }) => {
  const virtualId = "cloudflare:workers";
  const resolvedVirtualId = "\0" + virtualId;
  return {
    name: "vite-plugin-c10n-cloudflare-workers",
    resolveId(id) {
      if ("dev" === mode && "serve" === command && id === virtualId) {
        return "\0" + id;
      }
    },
    async load(id) {
      if ("dev" === mode && "serve" === command && id === resolvedVirtualId) {
        return "export default {};";
      }
    }
  };
};

// dev/.files/vite/includes/c10n/cloudflare-workflows.mjs
var cloudflare_workflows_default = async ({ mode, command }) => {
  const virtualId = "cloudflare:workflows";
  const resolvedVirtualId = "\0" + virtualId;
  return {
    name: "vite-plugin-c10n-cloudflare-workflows",
    resolveId(id) {
      if ("dev" === mode && "serve" === command && id === virtualId) {
        return "\0" + id;
      }
    },
    async load(id) {
      if ("dev" === mode && "serve" === command && id === resolvedVirtualId) {
        return "export default {};";
      }
    }
  };
};

// dev/.files/vite/includes/c10n/html-transforms.mjs
init_dist2();
var html_transforms_default = async ({ staticDefs }) => {
  return {
    name: "vite-plugin-c10n-html-transforms",
    transformIndexHtml(html2) {
      for (const key of Object.keys(staticDefs)) {
        html2 = html2.replace(new RegExp(str_exports.escRegExp(key), "gu"), staticDefs[key]);
      }
      return html2;
    }
  };
};

// dev/.files/vite/includes/c10n/no-module-preload.mjs
var no_module_preload_default = async () => {
  const virtualId = "vite/preload-helper.js";
  const resolvedVirtualId = "\0" + virtualId;
  return {
    name: "vite-plugin-c10n-no-module-preload",
    enforce: "pre",
    // Before Vite loads this virtual module.
    load(id) {
      if (id === resolvedVirtualId) {
        return "export const __vitePreload = (dynamicImport) => dynamicImport();";
      }
    }
  };
};

// dev/.files/vite/includes/c10n/post-processing.mjs
import fs4 from "node:fs";
import fsp2 from "node:fs/promises";
import path6 from "node:path";

// node_modules/@clevercanyon/utilities.cfp/dist/build.js
import { $obj as $obj5, $json, $time, $str, $http, $url, $profile } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@clevercanyon/utilities/dist/index.js";
var prepareDefaultWellKnownGPCJSON = (options4) => {
  const opts = $obj5.defaults({}, options4, { isC10n: false });
  if (!["spa", "mpa"].includes(opts.appType)) {
    return "";
  }
  return $json.stringify(
    {
      gpc: true,
      lastUpdate: $time.now().toYMD()
    },
    { pretty: true }
  );
};
var prepareDefaultWellKnownGPGTxt = (options4) => {
  const opts = $obj5.defaults({}, options4, { isC10n: false });
  if (!["spa", "mpa"].includes(opts.appType)) {
    return "";
  }
  return $str.dedent(`
        -----BEGIN PGP PUBLIC KEY BLOCK-----

        mQINBGWFAj4BEADONu8MsVl9kqa+Sg3NOApSQgSIubYv8UdUqkdRGBwM8etHGyup
        Mau1f0+jOvkZGdMONcagj96r2d5bXSBN4mOwqxL7CvBdQ4yYkGyrGAXHKH3jbWTM
        pxD2ubysknCpG9hP1y8uOihSNpyDYUKt5aeHbVtRq8rJgRTdwc9KzC1ojH3RpGvi
        OdKLV/9Ly96yBRBcFMdbxt2Q7crbLHCBBpiSV/jgzXY9Mc0zdt9X2SqIcF6moaL2
        MGkRBa1RzHyt5AKBUofeaxgB3h2DNHMcrGf7traixdCqKTIR4swXt1qiRhJ+1G5U
        WVSO5cyjPyIs39w65B75+QXi5cS+bJ/SGTo8DRVv8YrA6ds8aey7BQMrRq+dLj9i
        XRbQPWlY9Us8d+aW8IZDJKe2aI5tWhATTq7JgtA9TkkeQH0fey5CcmqNu0qQbe0e
        q/Zw4+ITz6T/VQs6XOuWRfdi1FPuXYLXcpTzMAqUYAVPwOetxYgsQ2sQP+z2w+Qj
        qLW2M5bBBHlv8vBHaQ5If4dndo41lDZ6IaFCpRiZAUWxVwdHlNueYkNdKLoyRjga
        ZsJk2dMolI3VUEyKorY9PntSPsUUCfd6GxlKqo0S7I49Dbf0qnfpQNBJ1X4n9trt
        mRgGRDebiVtGnWogmUeQwxk5nraMtHcZc8dfoWnjDxEruZzzJU2TBS+i/QARAQAB
        tEVDbGV2ZXItQ2FueW9uIChQYXJhbm9pYSBpcyB0b3RhbCBhd2FyZW5lc3MhKSA8
        YWRtaW5AY2xldmVyY2FueW9uLmNvbT6JAlEEEwEIADsWIQTOj28M4pEi0l35S1EW
        3b+fCuWNQwUCZYUCPgIbAwULCQgHAgIiAgYVCgkICwIEFgIDAQIeBwIXgAAKCRAW
        3b+fCuWNQ8u+D/0cqVjAwAlVNKUKzABzN8t3bowhsM+lv8zrqhDtXAB3TsE0RGFo
        OTSdaX86oSDVdgT/5VI24bEl8tCSEb6KWsu8r6vQ8eVVen0JOyTzGoK9RR1v3a4i
        M1lin/hSvO95/71vUJYE5pcendioPi5sacH1fVPYvop3jvdG626h/6RcnevAsQ33
        jAa4NgniyuV2z+U+9B5Yy5dfATXB6ZYtChkWctaQz/PDAdpQUgBKS8wWaAvSGGmg
        u80131MazFM8Wr+rKXlYIkSVx5Y0/eGhfsnaorcJdBzUs4o8NsBVjUdZVi8Sa0Lu
        GmGgu1L9374fe+nqIhILMTXLgM23xC8rVf56nsq21J33bAs+EvCvZJ3+YwKqtqf9
        RO08SoCApt1n0lLR7ish30BCX3vbEsgoLMoEkkPuMQ+KobEfmOAuypgbvIsQxeEV
        c8QP2NEMvv9w55tONsWKbdpvVtsrEEGyMo4xIUac8/r5iVF2WfMZytULK2ebryiU
        OBk5XJ4TDyoiKvl5tRb01Sjl17Yaf2G+7Qnub/2dFqi9x/D45VXbMUaMRZ/Bsd46
        2Kb/b1Kh4ohCSSHPqghcEhsX8NtFf+4IeB4XnrJiQ40JwspUp3hsxtC274JENYZI
        vVYfZy2SRDKg2jvVIhnbNDnPDSL3Q9s9s+G0XoSa7ZWDLsxf40+xsQx+V7kCDQRl
        hQI+ARAAtL+Kq8HbpvRrp2ZyOaT6G+lvxwiAljRIUqK9tMDZITcQwYC6iaoZcV4+
        IvJkbyVirqUcqruyHiBr0vcN+tt+YMIX1Lkx19Y9pcz8kRJiBnL512G4jvxQ2KD9
        1qyqyfwTrKq6R5kUDFDpa44cOEwWGRQD9wHTfKqygVCCsoCdrZNNl7DiZrK4bmyd
        5ROAM1IEcADoIuqyqURYETZb0Wid1Yotz5K4r5Bc4nuTAuNglV0vEuMuzGSRRlM2
        zF1iPN9TDVkobIljrY8eLQiI4l6OKoROGo6JoRv1BVVe6RV72tYpxu9D5dCDgGFg
        CE0nVgjVHcswKeSgP8jqyRWJtq7ve0t/CCXd7L+/wo96U8U6PkopJkT4Ejpk6XYz
        mDC+h1lwo0wqLktTgv3HwJUanLSk6cbqBgIcdCfNG0UKehbAXQy2x+5/LPhQVgoK
        zgqoVYSqQfHuyKV8uvdyBQEYaKN3wBrME+pQgg255ovGkM/RVLUySqXtCW4WQgOA
        CMe5M80ge3o5ftz+wd7ZumoFYHZdUEHxlNsbmKrFsiFi+132XZpDv5olI93R+eTZ
        LD92AvwQSLutaE69pH2vT/w99b0mJXTd5wtE+9svmuiJ9q8ZvQ5BFbnpPe6bwenl
        OYQwMfBYL7GhVS/I9CyvVijD+I+ASQPsVY3EEHuoVSVQpKgI/EkAEQEAAYkCNgQY
        AQgAIBYhBM6PbwzikSLSXflLURbdv58K5Y1DBQJlhQI+AhsMAAoJEBbdv58K5Y1D
        z9UQALppLO3hDG4oDy16Mm9Ds7tgrUht/D5zF7q/5Vqv47XK2TrgYIHljxZpvGOt
        JrAQYqhwqf5xyPb7/rY1/5S6wYX1Z09Qd/h62rKWhMv4jbvWlPu+lEO5WaJTwBZv
        KvpV5p6/y55dpoJxp7WnelhftR3TCTB9uSA/UZp/qgJ097BjAoqXjWuA2zMQnhzE
        tWmxdldsTuSfjFs/x8M8y0zXVyOcR6Rne0Im2qX1hma2PdOgDFFVdSa+BXXbcYS2
        CGuZcPjOydPYQlRmVw+8sOO8k0dqIKQmR53o9xiWKKuDvwnVMd3rPM3ZIGMYc8GF
        wymy29c8mDvBobms81rUgwEdw0FmTEa8Tpn158cfH0/UljHjrdiWFwFuArbMpnIE
        jEjL5JWiu1pzAc7omQ/HwxM9WqzzauiJWNdG4boykP5+2MXMSPQpL0ai5BXDJK1g
        JytcE7MximuVRMiVIduDA7yFMliGn+QYVOMFFZuZYblbjb7uzwpCuFJbhCzJI2kk
        sadqQW1iEy27+uzLmXYgF7AbwPPe8XDwb5fcBvRMWzM1ghkXOzF9QMu0MOpNyo2a
        K2yLdH3KHXO+bgAdt2wlmKNJCTvUyNBssXohuv45gYnb1nUCJx8z4+wyCIByeYnh
        1ROeSdKrEqXJbBAjG28TVI46jQflqW2eFnlCXGqMK+deoWQR
        =7MJh
        -----END PGP PUBLIC KEY BLOCK-----
    `);
};
var prepareDefaultWellKnownSecurityTxt = (options4) => {
  const opts = $obj5.defaults({}, options4, { isC10n: false });
  const brandPolicies = opts.brand.policies, brandContacts = opts.brand.contacts;
  if (!["spa", "mpa"].includes(opts.appType)) {
    return "";
  }
  return $str.dedent(`
        Contact: mailto:${brandContacts.security.email}
        Contact: ${brandContacts.security.url}
        Policy: ${brandPolicies.security}
        Encryption: ${new URL("./.well-known/gpg.txt", opts.baseURL).toString()}
        Expires: ${$time.now().add(2, "y").toYMD()}
        Preferred-Languages: en
    `);
};
var prepareDefaultHeaders = (options4) => {
  const opts = $obj5.defaults({}, options4, { isC10n: false });
  if (!["spa", "mpa"].includes(opts.appType)) {
    return "";
  }
  const separator = "\n    ", httpSecurityHeaders = opts.isC10n ? $http.c10nSecurityHeaders({ enableCORs: true }) : $http.defaultSecurityHeaders({ enableCORs: true });
  let securityHeadersArr = [];
  for (const [name, value] of Object.entries(httpSecurityHeaders)) {
    securityHeadersArr.push(name + ": " + value);
  }
  const securityHeaders = securityHeadersArr.join(separator), staticCacheControlHeaders = [
    "cache-control: public, must-revalidate, max-age=31536000, s-maxage=31536000, stale-while-revalidate=604800, stale-if-error=604800",
    "cdn-cache-control: public, must-revalidate, max-age=31536000, stale-while-revalidate=604800, stale-if-error=604800"
  ].join(separator), seoRelatedCacheControlHeaders = [
    "! cache-control",
    "! cdn-cache-control",
    "cache-control: public, must-revalidate, max-age=86400, s-maxage=86400, stale-while-revalidate=86400, stale-if-error=86400",
    "cdn-cache-control: public, must-revalidate, max-age=86400, stale-while-revalidate=86400, stale-if-error=86400"
  ].join(separator);
  return $str.dedent(`
        /*
            ${securityHeaders}
            ${staticCacheControlHeaders}

        /.well-known/*
            ${seoRelatedCacheControlHeaders}

        /sitemaps/*.xml
            ${seoRelatedCacheControlHeaders}

        /sitemap.xml
            ${seoRelatedCacheControlHeaders}

        /manifest.json
            ${seoRelatedCacheControlHeaders}

        /ads.txt
            ${seoRelatedCacheControlHeaders}

        /humans.txt
            ${seoRelatedCacheControlHeaders}

        /robots.txt
            ${seoRelatedCacheControlHeaders}

        /favicon.ico
            ${seoRelatedCacheControlHeaders}

        https://*.pages.dev/*
            x-robots-tag: noindex, nofollow
    `);
};
var prepareDefaultRedirects = (options4) => {
  const opts = $obj5.defaults({}, options4, { isC10n: false });
  if (!["spa", "mpa"].includes(opts.appType)) {
    return "";
  }
  return "";
};
var prepareDefaultRoutesJSON = (options4) => {
  const opts = $obj5.defaults({}, options4, { isC10n: false });
  if (!["spa", "mpa"].includes(opts.appType)) {
    return "";
  }
  return $json.stringify(
    {
      version: 1,
      // Cloudflare `/_routes.json` file version.
      include: ["/*"],
      // Default is a blanket over all paths, which we treat as dynamic routes to functions.
      exclude: [
        // Now, exclude all static paths from the default blanket over all paths.
        // We want these common requests to immediately bypass any dynamics, for performance.
        "/.well-known/*",
        "/assets/*",
        "/sitemaps/*",
        "/vite/*",
        "/sitemap.xml",
        "/manifest.json",
        "/ads.txt",
        "/humans.txt",
        "/robots.txt",
        "/favicon.ico",
        "/404.html",
        // Also exclude all known redirects.
        // We want `_redirects` to control these.
        "/r/*"
      ]
    },
    { pretty: true }
  );
};
var prepareDefaultManifestJSON = (options4) => {
  const opts = $obj5.defaults({}, options4, { isC10n: false }), brand3 = opts.brand;
  if (!["spa", "mpa"].includes(opts.appType)) {
    return "";
  }
  return $json.stringify(
    {
      id: $url.toPathQueryHash($url.addQueryVar("utm_source", "pwa", opts.baseURL)),
      start_url: $url.toPathQueryHash($url.addQueryVar("utm_source", "pwa", opts.baseURL)),
      scope: $str.rTrim($url.parse(opts.baseURL).pathname, "/") + "/",
      display_override: ["standalone", "browser"],
      display: "standalone",
      // Preferred presentation.
      theme_color: brand3.theme.color,
      background_color: brand3.theme.color,
      name: brand3.name,
      short_name: brand3.name,
      description: brand3.description,
      icons: [
        // SVGs (any).
        {
          type: "image/svg+xml",
          src: brand3.icon.svg,
          sizes: String(brand3.icon.width) + "x" + String(brand3.icon.height),
          purpose: "any"
        },
        {
          type: "image/svg+xml",
          src: brand3.icon.svg,
          sizes: "512x512",
          purpose: "any"
        },
        {
          type: "image/svg+xml",
          src: brand3.icon.svg,
          sizes: "192x192",
          purpose: "any"
        },
        // SVGs (maskable).
        {
          type: "image/svg+xml",
          src: brand3.icon.svg,
          sizes: String(brand3.icon.width) + "x" + String(brand3.icon.height),
          purpose: "maskable"
        },
        {
          type: "image/svg+xml",
          src: brand3.icon.svg,
          sizes: "512x512",
          purpose: "maskable"
        },
        {
          type: "image/svg+xml",
          src: brand3.icon.svg,
          sizes: "192x192",
          purpose: "maskable"
        },
        // PNGs (any).
        {
          type: "image/png",
          src: brand3.icon.png,
          sizes: String(brand3.icon.width) + "x" + String(brand3.icon.height),
          purpose: "any"
        },
        {
          type: "image/png",
          src: brand3.icon.png,
          sizes: "512x512",
          purpose: "any"
        },
        {
          type: "image/png",
          src: brand3.icon.png,
          sizes: "192x192",
          purpose: "any"
        },
        // PNGs (maskable).
        {
          type: "image/png",
          src: brand3.icon.png,
          sizes: String(brand3.icon.width) + "x" + String(brand3.icon.height),
          purpose: "maskable"
        },
        {
          type: "image/png",
          src: brand3.icon.png,
          sizes: "512x512",
          purpose: "maskable"
        },
        {
          type: "image/png",
          src: brand3.icon.png,
          sizes: "192x192",
          purpose: "maskable"
        }
      ],
      screenshots: [
        // Wide on desktop.
        {
          type: "image/png",
          form_factor: "wide",
          src: brand3.ogImage.png,
          sizes: String(brand3.ogImage.width) + "x" + String(brand3.ogImage.height)
        },
        {
          type: "image/png",
          form_factor: "wide",
          src: brand3.screenshots.desktop["1"].png,
          sizes: String(brand3.screenshots.desktop.width) + "x" + String(brand3.screenshots.desktop.height)
        },
        {
          type: "image/png",
          form_factor: "wide",
          src: brand3.screenshots.desktop["2"].png,
          sizes: String(brand3.screenshots.desktop.width) + "x" + String(brand3.screenshots.desktop.height)
        },
        {
          type: "image/png",
          form_factor: "wide",
          src: brand3.screenshots.desktop["3"].png,
          sizes: String(brand3.screenshots.desktop.width) + "x" + String(brand3.screenshots.desktop.height)
        },
        // Narrow on mobile.
        {
          type: "image/png",
          form_factor: "narrow",
          src: brand3.screenshots.mobile["1"].png,
          sizes: String(brand3.screenshots.mobile.width) + "x" + String(brand3.screenshots.mobile.height)
        },
        {
          type: "image/png",
          form_factor: "narrow",
          src: brand3.screenshots.mobile["2"].png,
          sizes: String(brand3.screenshots.mobile.width) + "x" + String(brand3.screenshots.mobile.height)
        },
        {
          type: "image/png",
          form_factor: "narrow",
          src: brand3.screenshots.mobile["3"].png,
          sizes: String(brand3.screenshots.mobile.width) + "x" + String(brand3.screenshots.mobile.height)
        }
      ]
    },
    { pretty: true }
  );
};
var prepareDefaultAdsTxt = (options4) => {
  const opts = $obj5.defaults({}, options4, { isC10n: false });
  if (!["spa", "mpa"].includes(opts.appType)) {
    return "";
  }
  return "";
};
var prepareDefaultHumansTxt = (options4) => {
  const opts = $obj5.defaults({}, options4, { isC10n: false });
  const jaswrks = $profile.get("@jaswrks"), brucewrks = $profile.get("@brucewrks");
  if (!["spa", "mpa"].includes(opts.appType)) {
    return "";
  }
  return opts.isC10n ? $str.dedent(`
        Hello human! Welcome to our ./humans.txt file.
        Aren't you a clever bag of bones and flesh?

        Our website is built by a small team of engineers, designers,
        researchers, and robots. It is updated continuously and built with
        more tools and technologies than we can list here. If you'd like to
        help us out, please contact one of the fine folks mentioned below.

        ---

        Name: ${jaswrks.name}
        Headline: ${jaswrks.headline}
        Location: ${jaswrks.location}

        NPM: ${jaswrks.socialProfiles.npm}
        GitHub: ${jaswrks.socialProfiles.github}
        Keybase: ${jaswrks.socialProfiles.keybase}
        Twitter: ${jaswrks.socialProfiles.twitter}
        LinkedIn: ${jaswrks.socialProfiles.linkedin}

        Technologies: ES2022, HTML5, CSS4
        Software: JavaScript, Preact, Vite, Cloudflare

        ---

        Name: ${brucewrks.name}
        Headline: ${brucewrks.headline}
        Location: ${brucewrks.location}

        NPM: ${brucewrks.socialProfiles.npm}
        GitHub: ${brucewrks.socialProfiles.github}
        Keybase: ${brucewrks.socialProfiles.keybase}
        Twitter: ${brucewrks.socialProfiles.twitter}
        LinkedIn: ${brucewrks.socialProfiles.linkedin}

        Technologies: ES2022, HTML5, CSS4
        Software: JavaScript, Preact, Vite, Cloudflare
    `) : "";
};
var prepareDefaultRobotsTxt = (options4) => {
  const opts = $obj5.defaults({}, options4, { isC10n: false });
  if (!["spa", "mpa"].includes(opts.appType)) {
    return "";
  }
  const termly = $str.dedent(`
        user-agent: TermlyBot
        allow: /
    `);
  const common = opts.isC10n ? termly : "";
  return opts.allow ? $str.dedent(`
            user-agent: *
            allow: /

            ${common}
        `) : $str.dedent(`
            user-agent: *
            disallow: /

            ${common}
        `);
};
var prepareDefaultSitemapsForRobotsTxt = (options4) => {
  const opts = $obj5.defaults({}, options4, { isC10n: false }), baseURLResolvedNTS = $str.rTrim(new URL("./", opts.baseURL).toString(), "/");
  if (!["spa", "mpa"].includes(opts.appType)) {
    return "";
  }
  const sitemaps = $str.dedent(`
        sitemap: ${baseURLResolvedNTS}/sitemap.xml
    `);
  return sitemaps;
};

// dev/.files/vite/includes/c10n/post-processing.mjs
init_dist();
init_dist2();
init__();

// dev/.files/bin/includes/exclusions.mjs
init_dist2();
import path5 from "node:path";
var asRegExpStrings = (globs) => [...new Set(globs)].map((glob) => path_exports.globToRegExpString(glob));
var asRegExps = (globs) => asRegExpStrings(globs).map((rxs) => new RegExp(rxs, "ui"));
var asNegatedGlobs = (globs, { dropExistingNegations }) => {
  if (void 0 === dropExistingNegations) {
    throw new Error("Missing option: `dropExistingNegations`.");
  }
  if (dropExistingNegations) {
    return [...new Set(globs)].filter((glob) => !/^!/u.test(glob)).map((glob) => "!" + glob);
  }
  return [...new Set(globs)].map((glob) => /^!/u.test(glob) ? glob.replace(/^!/u, "") : "!" + glob);
};
var asRelativeGlobs = (from, globs, { forceRelative = false, forceNoLeadingSlash = false, headGreedy = true, tailGreedy = true } = {}) => {
  return [...new Set(globs)].map((glob) => {
    glob = glob.replace(/^(?:\*\*\/)+|(?:\/\*\*)+$/gu, "");
    glob = headGreedy && !/\//u.test(glob) ? "**/" + glob : glob;
    glob = tailGreedy ? glob + "/**" : glob;
    glob = forceRelative ? glob.replace(/^(?:\*\*\/)+/u, "") : glob;
    glob = forceNoLeadingSlash ? glob.replace(/^\/+/u, "") : glob;
    return /^(?:\/|\*\*\/)/u.test(glob) ? glob : path5.relative(from, glob);
  });
};
var asRootedRelativeGlobs = (from, globs, { forceRelative = false, forceNoLeadingSlash = false, headGreedy = true, tailGreedy = true } = {}) => {
  return [...new Set(globs)].map((glob) => {
    glob = glob.replace(/^(?:\*\*\/)+|(?:\/\*\*)+$/gu, "");
    glob = headGreedy && !/\//u.test(glob) ? "**/" + glob : glob;
    glob = tailGreedy ? glob + "/**" : glob;
    glob = forceRelative ? glob.replace(/^(?:\*\*\/)+/u, "") : glob;
    glob = forceNoLeadingSlash ? glob.replace(/^\/+/u, "") : glob;
    return /^(?:\/|\*\*\/)/u.test(glob) ? glob : "/" + str_exports.lTrim(path5.relative(from, glob), "/");
  });
};
var asBracedGlob2 = (globs, { dropExistingNegations, maybeDropExistingRelatives, headGreedy = true, tailGreedy = true }) => {
  if (true !== dropExistingNegations) {
    throw new Error("Missing option: `dropExistingNegations`; must be `true`.");
  }
  if (true !== maybeDropExistingRelatives) {
    throw new Error("Missing option: `maybeDropExistingRelatives`; must be `true`.");
  }
  let bracedGlobs = [];
  [...new Set(globs)].forEach((glob) => {
    if (dropExistingNegations && /^!/u.test(glob))
      return;
    glob = glob.replace(/^(?:\*\*\/)+|(?:\/\*\*)+$/gu, "");
    if (maybeDropExistingRelatives && headGreedy && /^\//u.test(glob))
      return;
    bracedGlobs.push(glob);
  });
  bracedGlobs = [...new Set(bracedGlobs)];
  return (headGreedy ? "**/" : "") + //
  (bracedGlobs.length > 1 ? "{" : "") + bracedGlobs.join(",") + // Concatenate.
  (bracedGlobs.length > 1 ? "}" : "") + (tailGreedy ? "/**" : "");
};
var asBoolProps = (globs, { headGreedy = true, tailGreedy = true } = {}) => {
  const props = {};
  for (let glob of globs) {
    const isNegated = /^!/u.test(glob);
    if (isNegated) {
      glob = glob.replace(/^!/u, "");
    }
    glob = glob.replace(/^(?:\*\*\/)+|(?:\/\*\*)+$/gu, "");
    glob = headGreedy && !/\//u.test(glob) ? "**/" + glob : glob;
    glob = tailGreedy ? glob + "/**" : glob;
    props[glob] = isNegated ? false : true;
  }
  return props;
};
var exclusions_default = {
  /**
   * Default Git/NPM ignores, by category. Categories added to the default export here. Provided by
   * `@clevercanyon/utilities`. Includes everything we have in our default `./.gitignore`, `./.npmignore`.
   */
  ...obj_exports.map(obj_exports.cloneDeep(path_exports.defaultGitNPMIgnoresByCategory()), (category) => {
    return category.map((gitIgnore) => path_exports.gitIgnoreToGlob(gitIgnore));
  }),
  /**
   * We intentionally use our 'default' NPM ignores when pruning; i.e., as opposed to using the current and
   * potentially customized `./.npmignore` file in the current project directory. The reason is because we intend to
   * enforce our standards. For further details {@see https://o5p.me/MuskgW}.
   */
  defaultNPMIgnores: obj_exports.cloneDeep(path_exports.defaultNPMIgnores()).map((npmIgnore) => {
    return path_exports.gitIgnoreToGlob(npmIgnore);
  }),
  /**
   * Specifically for use in our projects.
   */
  adhocExIgnores: ["**/ex-*/**"],
  // For special use cases.
  /**
   * Utilities.
   */
  asRegExps,
  asRegExpStrings,
  asNegatedGlobs,
  asRelativeGlobs,
  asRootedRelativeGlobs,
  asBracedGlob: asBracedGlob2,
  asBoolProps
};

// dev/.files/vite/includes/c10n/post-processing.mjs
init_extensions();
init_utilities();
var post_processing_default = async ({ mode, wranglerMode, inProdLikeMode, command, isSSRBuild, projDir: projDir4, distDir: distDir2, pkg: pkg2, env, appBaseURL, appType, targetEnv, staticDefs, pkgUpdates }) => {
  let buildEndError = void 0, postProcessed = false;
  return {
    name: "vite-plugin-c10n-post-processing",
    enforce: "post",
    // After others on this hook.
    // Listens for build-related errors.
    // No post-processing if there were errors.
    buildEnd: (error2) => void (buildEndError = error2),
    async closeBundle() {
      if (postProcessed || buildEndError)
        return;
      postProcessed = true;
      if (!isSSRBuild && "build" === command) {
        u.log(chalk_exports.gray("Recompiling `./package.json`."));
        await u.updatePkg({ $set: pkgUpdates });
      }
      if (!isSSRBuild && "build" === command) {
        u.log(chalk_exports.gray("Running TypeScript type checks."));
        await u.spawn("npx", ["tsc"]);
      }
      if ("build" === command && inProdLikeMode) {
        for (let globOpts = [{ onlyDirectories: true }, { onlyFiles: false }], i = 0; i < globOpts.length; i++) {
          for (const fileOrDir of await glob_exports.promise(exclusions_default.defaultNPMIgnores, { cwd: distDir2, ignoreCase: true, ...globOpts[i] })) {
            const projRelPath = path6.relative(projDir4, fileOrDir);
            if (!fs4.existsSync(fileOrDir)) {
              continue;
            }
            if (mm_exports.test(projRelPath, ["dist/node_modules", "dist/node_modules/.cache/**"], { ignoreCase: true, dot: true })) {
              continue;
            }
            if (isSSRBuild && mm_exports.test(projRelPath, ["dist/node_modules/assets", "dist/node_modules/assets/a16s/**"], { ignoreCase: true, dot: true })) {
              continue;
            }
            if (
              // These things we expect to prune regularly.
              // Anything else warrants more attention (see below).
              mm_exports.test(
                projRelPath,
                [
                  ...exclusions_default.devIgnores,
                  //
                  ...exclusions_default.sandboxIgnores,
                  ...exclusions_default.exampleIgnores,
                  ...exclusions_default.docIgnores,
                  ...exclusions_default.testIgnores,
                  ...exclusions_default.specIgnores,
                  ...exclusions_default.benchIgnores
                ],
                { ignoreCase: true, dot: true }
              )
            ) {
              u.log(chalk_exports.gray("Pruning `./" + projRelPath + "`."));
            } else {
              u.log(chalk_exports.yellow("Pruning `./" + projRelPath + "`."));
            }
            await fsp2.rm(fileOrDir, { force: true, recursive: true });
          }
        }
      }
      if ("build" === command && inProdLikeMode && ["spa", "mpa"].includes(appType) && ["cfp"].includes(targetEnv)) {
        for (const fileOrDir of await glob_exports.promise(
          [
            "types",
            // Prunes TypeScript type declarations.
            "index." + extensions_default.asBracedGlob([...extensions_default.byCanonical.html])
          ],
          { cwd: distDir2, onlyFiles: false }
        )) {
          u.log(chalk_exports.gray("Pruning `./" + path6.relative(projDir4, fileOrDir) + "`."));
          await fsp2.rm(fileOrDir, { force: true, recursive: true });
        }
      }
      if (!isSSRBuild && "build" === command && ["spa", "mpa"].includes(appType) && ["cfp"].includes(targetEnv)) {
        const isC10n2 = env.APP_IS_C10N || false, baseURL2 = appBaseURL, brand3 = await u.brand({ mode, baseURL: baseURL2 });
        for (const file of await glob_exports.promise(
          [
            ".well-known/gpc.json",
            ".well-known/gpg.txt",
            ".well-known/security.txt",
            "_headers",
            "_redirects",
            "_routes.json",
            "sitemaps/**/*.xml",
            "sitemap.xml",
            "manifest.json",
            "ads.txt",
            "humans.txt",
            "robots.txt",
            "404.html"
          ],
          { cwd: distDir2 }
        )) {
          const fileExt = str_exports.trim(path6.extname(file), ".");
          const fileRelPath = path6.relative(distDir2, file);
          let fileContents = fs4.readFileSync(file).toString();
          for (const key of Object.keys(staticDefs)) {
            fileContents = fileContents.replace(new RegExp(str_exports.escRegExp(key), "gu"), staticDefs[key]);
          }
          if ([".well-known/gpc.json"].includes(fileRelPath)) {
            const cfpDefaultWellKnownGPCJSON = prepareDefaultWellKnownGPCJSON({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2 });
            fileContents = fileContents.replace('"$$__APP_CFP_DEFAULT_WELL_KNOWN_GPC_JSON__$$"', cfpDefaultWellKnownGPCJSON).replace("$$__APP_CFP_DEFAULT_WELL_KNOWN_GPC_JSON__$$", cfpDefaultWellKnownGPCJSON);
          } else if ([".well-known/gpg.txt"].includes(fileRelPath)) {
            const cfpDefaultWellKnownGPGTxt = prepareDefaultWellKnownGPGTxt({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2 });
            fileContents = fileContents.replace("$$__APP_CFP_DEFAULT_WELL_KNOWN_GPG_TXT__$$", cfpDefaultWellKnownGPGTxt);
          } else if ([".well-known/security.txt"].includes(fileRelPath)) {
            const cfpDefaultWellKnownSecurityTxt = prepareDefaultWellKnownSecurityTxt({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2 });
            fileContents = fileContents.replace("$$__APP_CFP_DEFAULT_WELL_KNOWN_SECURITY_TXT__$$", cfpDefaultWellKnownSecurityTxt);
          } else if (["_headers"].includes(fileRelPath)) {
            const cfpDefaultHeaders = prepareDefaultHeaders({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2 });
            fileContents = fileContents.replace("$$__APP_CFP_DEFAULT_HEADERS__$$", cfpDefaultHeaders);
          } else if (["_redirects"].includes(fileRelPath)) {
            const cfpDefaultRedirects = prepareDefaultRedirects({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2 });
            fileContents = fileContents.replace("$$__APP_CFP_DEFAULT_REDIRECTS__$$", cfpDefaultRedirects);
          } else if (["_routes.json"].includes(fileRelPath)) {
            const cfpDefaultRoutesJSON = prepareDefaultRoutesJSON({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2 });
            fileContents = fileContents.replace('"$$__APP_CFP_DEFAULT_ROUTES_JSON__$$"', cfpDefaultRoutesJSON).replace("$$__APP_CFP_DEFAULT_ROUTES_JSON__$$", cfpDefaultRoutesJSON);
          } else if (["manifest.json"].includes(fileRelPath)) {
            const cfpDefaultManifestJSON = prepareDefaultManifestJSON({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2 });
            fileContents = fileContents.replace('"$$__APP_CFP_DEFAULT_MANIFEST_JSON__$$"', cfpDefaultManifestJSON).replace("$$__APP_CFP_DEFAULT_MANIFEST_JSON__$$", cfpDefaultManifestJSON);
          } else if (["ads.txt"].includes(fileRelPath)) {
            const cfpDefaultAdsTxt = prepareDefaultAdsTxt({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2 });
            fileContents = fileContents.replace("$$__APP_CFP_DEFAULT_ADS_TXT__$$", cfpDefaultAdsTxt);
          } else if (["humans.txt"].includes(fileRelPath)) {
            const cfpDefaultHumansTxt = prepareDefaultHumansTxt({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2 });
            fileContents = fileContents.replace("$$__APP_CFP_DEFAULT_HUMANS_TXT__$$", cfpDefaultHumansTxt);
          } else if (["robots.txt"].includes(fileRelPath)) {
            const cfpDefaultRobotsTxt = prepareDefaultRobotsTxt({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2, allow: false });
            fileContents = fileContents.replace("$$__APP_CFP_DEFAULT_ROBOTS_TXT__$$", cfpDefaultRobotsTxt);
            const cfpDefaultAllowRobotsTxt = prepareDefaultRobotsTxt({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2, allow: true });
            fileContents = fileContents.replace("$$__APP_CFP_DEFAULT_ALLOW_ROBOTS_TXT__$$", cfpDefaultAllowRobotsTxt);
            const cfpDefaultSitemapsForRobotsTxt = prepareDefaultSitemapsForRobotsTxt({ appType, baseURL: baseURL2, brand: brand3, isC10n: isC10n2 });
            fileContents = fileContents.replace("$$__APP_CFP_DEFAULT_SITEMAPS_FOR_ROBOTS_TXT__$$", cfpDefaultSitemapsForRobotsTxt);
          } else if (["404.html"].includes(fileRelPath)) {
            const cfpDefault404 = "<!doctype html>" + preact_exports.ssr.renderToString(preact_exports.create(StandAlone));
            fileContents = fileContents.replace("$$__APP_CFP_DEFAULT_404_HTML__$$", cfpDefault404);
          }
          if (["txt"].includes(fileExt) || ["_headers", "_redirects"].includes(fileRelPath)) {
            fileContents = fileContents.replace(/^#[^\n]*\n/gmu, "");
          } else if (["json"].includes(fileExt)) {
            fileContents = fileContents.replace(/\/\*[\s\S]*?\*\/\n?/gu, "");
          } else if (["xml", "html"].includes(fileExt)) {
            fileContents = fileContents.replace(/<!--[\s\S]*?-->\n?/gu, "");
          }
          fileContents = str_exports.trim(fileContents.replace(/\n{3,}/gu, "\n\n"));
          u.log(chalk_exports.gray("Updating `./" + path6.relative(projDir4, file) + "`."));
          await fsp2.writeFile(file, fileContents);
        }
      }
      if ("build" === command && fs4.existsSync(path6.resolve(distDir2, "./vite/" + (isSSRBuild ? "ssr-" : "") + "manifest.json"))) {
        u.log(chalk_exports.gray("Generating MD5-keyed " + (isSSRBuild ? "SSR " : "") + "manifest."));
        const file = path6.resolve(distDir2, "./vite/" + (isSSRBuild ? "ssr-" : "") + "manifest.json");
        const data = json_exports.parse((await fsp2.readFile(file)).toString());
        const sha1Data = {};
        for (const [key, value] of Object.entries(data)) {
          sha1Data["x" + await crypto_exports.sha1(key)] = { [key]: value };
        }
        const prettierConfig = { ...await prettier_exports.resolveConfig(file), parser: "json" };
        await fsp2.writeFile(file, await prettier_exports.format(json_exports.stringify(sha1Data, { pretty: true }), prettierConfig));
      }
      if (!isSSRBuild && "build" === command && obp_exports.get(pkg2, "config.c10n.&.ssrBuild.appType")) {
        u.log(chalk_exports.gray("Running secondary SSR build routine."));
        await u.spawn("npx", ["vite", "build", "--mode", mode, "--ssr"]);
      }
      if (!isSSRBuild && "build" === command && "dev" !== wranglerMode) {
        const zipFile = path6.resolve(projDir4, "./.~dist.zip");
        u.log(chalk_exports.gray("Generating `" + path6.relative(projDir4, zipFile) + "`."));
        const archive = fs_exports.archiver("zip", { zlib: { level: 9 } });
        archive.pipe(fs4.createWriteStream(zipFile));
        archive.directory(distDir2 + "/", false);
        await archive.finalize();
      }
    }
  };
};

// dev/.files/vite/includes/c10n/pre-processing.mjs
init_dist();
init_utilities();
import fs5 from "node:fs";
import path7 from "node:path";
var pre_processing_default = async ({ command, isSSRBuild, projDir: projDir4, distDir: distDir2, appType }) => {
  return {
    name: "vite-plugin-c10n-pre-processing",
    enforce: "pre",
    // Before others on this hook.
    // By 'pre', we mean before writing bundle to disk.
    // i.e., The `buildEnd` hook fires before writing to disk.
    buildEnd(error2) {
      if (error2)
        return;
      const maybeEmptyDistDir = () => {
        if ("build" !== command || isSSRBuild)
          return;
        if (!distDir2 || !fs5.existsSync(distDir2))
          return;
        if (["spa", "mpa"].includes(appType)) {
          const wranglerCacheDir = path7.resolve(distDir2, "./node_modules/.cache/wrangler");
          if (fs5.existsSync(wranglerCacheDir)) {
            const tmpDir = fs5.mkdtempSync(path7.resolve(projDir4, "./.~c10n-")), wranglerTmpCacheDir = path7.resolve(tmpDir, "./tGuaPyXd");
            u.log(chalk_exports.gray("Preserving `./node_modules/.cache/wrangler`."));
            fs5.renameSync(wranglerCacheDir, wranglerTmpCacheDir);
            resetDistDir();
            u.log(chalk_exports.gray("Restoring `./node_modules/.cache/wrangler`."));
            fs5.mkdirSync(path7.dirname(wranglerCacheDir), { recursive: true });
            fs5.renameSync(wranglerTmpCacheDir, wranglerCacheDir);
            fs5.rmSync(tmpDir, { force: true, recursive: true });
            return;
          }
        }
        resetDistDir();
      }, resetDistDir = () => {
        u.log(chalk_exports.gray("Resetting `./" + path7.relative(projDir4, distDir2) + "` directory."));
        fs5.rmSync(distDir2, { force: true, recursive: true });
      };
      maybeEmptyDistDir();
    }
  };
};

// dev/.files/vite/includes/c10n/side-effects.mjs
var side_effects_default = async () => {
  return {
    name: "vite-plugin-c10n-side-effects",
    async transform(unused\uA4FA, id) {
      if (/@preact\/signals(?:-core)?\b/iu.test(id)) {
        return { moduleSideEffects: false };
      }
    }
  };
};

// dev/.files/vite/includes/mdx/config.mjs
import path8 from "node:path";
init_extensions();
var config_default = async ({ projDir: projDir4 }) => {
  return (await import("file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@mdx-js/rollup/index.js")).default(await config3({ projDir: projDir4 }));
};
var config3 = async ({ projDir: projDir4 }) => ({
  exclude: [
    .../* @__PURE__ */ new Set([
      ...exclusions_default.localIgnores,
      //
      ...exclusions_default.logIgnores,
      ...exclusions_default.backupIgnores,
      ...exclusions_default.patchIgnores,
      ...exclusions_default.editorIgnores,
      ...exclusions_default.toolingIgnores,
      ...exclusions_default.pkgIgnores,
      ...exclusions_default.vcsIgnores,
      ...exclusions_default.osIgnores,
      ...exclusions_default.dotIgnores,
      ...exclusions_default.dtsIgnores,
      ...exclusions_default.configIgnores,
      ...exclusions_default.lockIgnores,
      ...exclusions_default.devIgnores,
      ...exclusions_default.distIgnores,
      ...exclusions_default.docIgnores
    ])
  ],
  include: [
    "**/*." + extensions_default.asBracedGlob([
      ...extensions_default.byVSCodeLang.markdown,
      // Single default export only.
      ...extensions_default.byVSCodeLang.mdx
      // Default + potentially other exports.
    ])
  ],
  ...await (await import(path8.resolve(projDir4, "./mdx.config.mjs"))).default()
});

// dev/.files/vite/includes/mdx/esbuild.mjs
var esbuild_default = async ({ projDir: projDir4 }) => {
  return (await import("file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@mdx-js/esbuild/index.js")).default(await config3({ projDir: projDir4 }));
};

// dev/.files/vite/includes/deps/config.mjs
var config_default2 = async ({ projDir: projDir4, pkg: pkg2, wranglerSettings, prefreshEnable }) => ({
  force: true,
  // Force recreation; i.e., don’t cache.
  include: [
    ...prefreshEnable ? [
      "preact",
      //
      "preact/hooks",
      "preact/compat",
      "preact/jsx-runtime",
      "@preact/signals"
    ] : []
  ].filter((name) => name !== pkg2.name && !name.startsWith(pkg2.name + "/")),
  exclude: [
    ...wranglerSettings.runtimeModules,
    //
    ...wranglerSettings.virtualModules
  ],
  esbuildOptions: {
    plugins: [await esbuild_default({ projDir: projDir4 })]
  }
});

// dev/.files/vite/includes/dts/config.mjs
var config_default3 = async ({ isSSRBuild, distDir: distDir2 }) => {
  return isSSRBuild ? null : (await import("file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/vite-plugin-dts/dist/index.mjs")).default({
    logLevel: "error",
    outDir: distDir2 + "/types"
  });
};

// dev/.files/vite/includes/ejs/config.mjs
import { createRequire } from "node:module";
import path9 from "node:path";
var __vite_injected_original_import_meta_url3 = "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/dev/.files/vite/includes/ejs/config.mjs";
var config_default4 = async ({ mode, projDir: projDir4, srcDir, pkg: pkg2, env }) => {
  const require3 = createRequire(__vite_injected_original_import_meta_url3);
  return (await import("file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/vite-plugin-ejs/index.js")).ViteEjsPlugin(
    { $: { require: require3, pkg: pkg2, mode, env, projDir: projDir4 } },
    {
      // EJS is enabled for `index.{html}` entry points.
      ejs: (
        /* <https://o5p.me/wGv5nM> */
        {
          strict: true,
          // JS strict mode.
          async: true,
          // Support await in EJS files.
          delimiter: "?",
          // <https://o5p.me/Qwu3af>.
          localsName: "$",
          // Shorter name for `locals`.
          outputFunctionName: "echo",
          // For output in scriptlets.
          root: [srcDir],
          // For includes with an absolute path.
          views: (
            /* For includes with a relative path — includes utilities. */
            [
              //
              path9.resolve(srcDir, "./resources/ejs-views"),
              // Our standard location for internal EJS views.
              path9.resolve(srcDir, "./cargo/assets/ejs-views")
              // Our standard location for distributed EJS views.
            ]
          )
        }
      )
    }
  );
};

// dev/.files/vite/includes/esbuild/config.mjs
var config_default5 = async () => {
  return {
    // See <https://o5p.me/Wk8Fm9>.
    jsx: "automatic",
    // Matches TypeScript config.
    jsxImportSource: "preact",
    // Matches TypeScript config.
    legalComments: "none"
    // See <https://o5p.me/DZKXwX>.
  };
};

// dev/.files/vite/includes/icons/config.mjs
var config_default6 = async () => {
  return (await import("file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/unplugin-icons/dist/vite.mjs")).default({
    compiler: "jsx",
    jsx: "preact",
    scale: 1,
    // em.
    defaultStyle: "",
    defaultClass: ""
  });
};

// dev/.files/vite/includes/minify/config.mjs
var config_default7 = async ({ minifyEnable }) => {
  return minifyEnable ? (await import("file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/vite-plugin-minify/dist/index.cjs")).ViteMinifyPlugin() : null;
};

// dev/.files/vite/includes/package/updates.mjs
init_dist();
init_dist2();
init_extensions();
init_utilities();
import fs6 from "node:fs";
import path10 from "node:path";
var updates_default = async ({
  command,
  isSSRBuild,
  projDir: projDir4,
  srcDir,
  distDir: distDir2,
  pkg: pkg2,
  appType,
  targetEnv,
  sideEffects,
  appEntriesAsProjRelPaths,
  appEntriesAsSrcSubpaths,
  appEntriesAsSrcSubpathsNoExt
}) => {
  const updates = {};
  if (isSSRBuild) {
    updates.type = "module";
    updates.sideEffects = (pkg2.sideEffects || []).concat(sideEffects);
  } else {
    updates.type = "module";
    updates.exports = {};
    updates.sideEffects = ["**/*." + extensions_default.asBracedGlob([...extensions_default.byVSCodeLang.css, ...extensions_default.byVSCodeLang.scss, ...extensions_default.byVSCodeLang.less])];
    updates.sideEffects = updates.sideEffects.concat(sideEffects);
    if (fs6.existsSync(path10.resolve(srcDir, "./resources/initialize.ts"))) {
      updates.sideEffects.push("./" + path10.relative(projDir4, path10.resolve(srcDir, "./resources/initialize.ts")));
    }
    if (["spa", "mpa"].includes(appType) && fs6.existsSync(path10.resolve(srcDir, "./resources/hydrate.tsx"))) {
      updates.sideEffects.push("./" + path10.relative(projDir4, path10.resolve(srcDir, "./resources/hydrate.tsx")));
    }
    const distDirAsProjRelPath = "./" + path10.relative(projDir4, distDir2);
    switch (true) {
      case ["spa", "mpa"].includes(appType): {
        const canonicalHTMLExtRegExp = new RegExp("\\." + extensions_default.asRegExpFrag([...extensions_default.byCanonical.html]) + "$", "ui");
        const appEntryIndexAsSrcSubpath = appEntriesAsSrcSubpaths.find(
          (subpath) => mm_exports.isMatch(subpath, "index." + extensions_default.asBracedGlob([...extensions_default.byCanonical.html]))
        );
        const appEntryIndexAsSrcSubpathNoExt = appEntryIndexAsSrcSubpath.replace(/\.[^.]+$/u, "");
        if (["spa"].includes(appType) && (!appEntryIndexAsSrcSubpath || !appEntryIndexAsSrcSubpathNoExt)) {
          throw new Error("Single-page apps must have an `./index." + extensions_default.asBracedGlob([...extensions_default.byCanonical.html]) + "` entry point.");
        } else if (["mpa"].includes(appType) && (!appEntryIndexAsSrcSubpath || !appEntryIndexAsSrcSubpathNoExt)) {
          throw new Error("Multipage apps must have an `./index." + extensions_default.asBracedGlob([...extensions_default.byCanonical.html]) + "` entry point.");
        }
        updates.exports = null, updates.typesVersions = {};
        updates.main = updates.module = updates.unpkg = updates.browser = updates.types = "";
        for (const appEntryAsProjRelPath of appEntriesAsProjRelPaths) {
          if (canonicalHTMLExtRegExp.test(appEntryAsProjRelPath)) {
            updates.sideEffects.push(appEntryAsProjRelPath);
            updates.sideEffects.push(appEntryAsProjRelPath.replace(canonicalHTMLExtRegExp, ".tsx"));
            if (fs6.existsSync(path10.resolve(projDir4, appEntryAsProjRelPath.replace(canonicalHTMLExtRegExp, ".scss")))) {
              updates.sideEffects.push(appEntryAsProjRelPath.replace(canonicalHTMLExtRegExp, ".scss"));
            }
          }
        }
        break;
      }
      case ["cma", "lib"].includes(appType): {
        const appEntryIndexAsSrcSubpath = appEntriesAsSrcSubpaths.find(
          (subpath) => mm_exports.isMatch(subpath, "index." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.sTypeScript, ...extensions_default.byDevGroup.sTypeScriptReact]))
        );
        const appEntryIndexAsSrcSubpathNoExt = appEntryIndexAsSrcSubpath.replace(/\.[^.]+$/u, "");
        if (["cma"].includes(appType) && (!appEntryIndexAsSrcSubpath || !appEntryIndexAsSrcSubpathNoExt)) {
          throw new Error(
            "Custom apps must have an `./index." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.sTypeScript, ...extensions_default.byDevGroup.sTypeScriptReact]) + "` entry point."
          );
        } else if (["lib"].includes(appType) && (!appEntryIndexAsSrcSubpath || !appEntryIndexAsSrcSubpathNoExt)) {
          throw new Error(
            "Library apps must have an `./index." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.sTypeScript, ...extensions_default.byDevGroup.sTypeScriptReact]) + "` entry point."
          );
        }
        updates.exports = {
          ".": {
            types: distDirAsProjRelPath + "/types/" + appEntryIndexAsSrcSubpathNoExt + ".d.ts",
            // First, always.
            import: distDirAsProjRelPath + "/" + appEntryIndexAsSrcSubpathNoExt + ".js",
            // ESM module import path.
            default: distDirAsProjRelPath + "/" + appEntryIndexAsSrcSubpathNoExt + ".js"
            // Last, always.
          }
        };
        updates.main = distDirAsProjRelPath + "/" + appEntryIndexAsSrcSubpathNoExt + ".js";
        updates.module = distDirAsProjRelPath + "/" + appEntryIndexAsSrcSubpathNoExt + ".js";
        updates.unpkg = updates.module;
        updates.browser = ["web"].includes(targetEnv) ? updates.module : "";
        updates.typesVersions = { ">=3.1": { "./*": [distDirAsProjRelPath + "/types/*"] } };
        updates.types = distDirAsProjRelPath + "/types/" + appEntryIndexAsSrcSubpathNoExt + ".d.ts";
        for (const appEntryAsSrcSubpathNoExt of [...appEntriesAsSrcSubpathsNoExt].sort()) {
          if (appEntryAsSrcSubpathNoExt === appEntryIndexAsSrcSubpathNoExt) {
            continue;
          }
          obj_exports.patchDeep(updates.exports, {
            ["./" + appEntryAsSrcSubpathNoExt]: {
              types: distDirAsProjRelPath + "/types/" + appEntryAsSrcSubpathNoExt + ".d.ts",
              // First, always.
              import: distDirAsProjRelPath + "/" + appEntryAsSrcSubpathNoExt + ".js",
              // ESM module import path.
              default: distDirAsProjRelPath + "/" + appEntryAsSrcSubpathNoExt + ".js"
              // Last, always.
            }
          });
        }
        break;
      }
      default: {
        throw new Error("Unexpected `appType`. Failed to update `./package.json` properties.");
      }
    }
  }
  updates.sideEffects = [...new Set(updates.sideEffects)].sort();
  if ("build" === command) {
    u.log(chalk_exports.gray("Updating `type` and `sideEffects` in `./package.json`."));
    await u.updatePkg({ $set: { type: updates.type, sideEffects: updates.sideEffects } });
  }
  return updates;
};

// dev/.files/vite/includes/prefresh/config.mjs
init_extensions();
var config_default8 = async () => {
  return (await import("file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@prefresh/vite/src/index.js")).default({
    exclude: [
      .../* @__PURE__ */ new Set([
        ...exclusions_default.localIgnores,
        //
        ...exclusions_default.logIgnores,
        ...exclusions_default.backupIgnores,
        ...exclusions_default.patchIgnores,
        ...exclusions_default.editorIgnores,
        ...exclusions_default.toolingIgnores,
        ...exclusions_default.pkgIgnores,
        ...exclusions_default.vcsIgnores,
        ...exclusions_default.osIgnores,
        ...exclusions_default.dotIgnores,
        ...exclusions_default.dtsIgnores,
        ...exclusions_default.configIgnores,
        ...exclusions_default.lockIgnores,
        ...exclusions_default.devIgnores,
        ...exclusions_default.distIgnores,
        ...exclusions_default.docIgnores
      ])
    ],
    include: [
      "**/*." + extensions_default.asBracedGlob([
        ...extensions_default.byDevGroup.allJavaScriptReact,
        //
        ...extensions_default.byDevGroup.allTypeScriptReact
      ])
    ]
  });
};

// dev/.files/vite/includes/rollup/config.mjs
init_dist2();
init_extensions();
import path11 from "node:path";
var config_default9 = async ({ projDir: projDir4, srcDir, distDir: distDir2, a16sDir, appType, appEntries, peerDepKeys, minifyEnable, sideEffects }) => {
  return {
    input: appEntries,
    // App entry file paths.
    ...["lib"].includes(appType) ? { preserveEntrySignatures: "strict" } : {},
    treeshake: {
      preset: "safest",
      annotations: true,
      tryCatchDeoptimization: true,
      propertyReadSideEffects: true,
      unknownGlobalSideEffects: true,
      correctVarValueBeforeDeclaration: true,
      manualPureFunctions: [],
      // None at this time.
      moduleSideEffects: (id) => {
        return sideEffects.includes("./" + path11.relative(projDir4, id));
      }
      // {@see https://o5p.me/7YF2NU}.
    },
    external: [
      /^(?:node:|cloudflare:).*$/iu,
      // eslint-disable-next-line no-control-regex -- Allows `\x00` NULL byte.
      ...["lib"].includes(appType) ? [/^(?![./~#\x00]|file:|data:|virtual:).*$/iu] : [],
      ...peerDepKeys.map((pkgName3) => new RegExp("^" + str_exports.escRegExp(pkgName3) + "(?:$|[/?])", "u"))
    ],
    output: {
      interop: "auto",
      // Matches TypeScript configuration.
      exports: "named",
      // Matches TypeScript configuration.
      esModule: true,
      // Matches TypeScript configuration.
      extend: true,
      // i.e., UMD global `||` checks.
      noConflict: true,
      // Behaves the same as `jQuery.noConflict()`.
      compact: minifyEnable,
      // Minify wrapper code generated by rollup?
      // By default, special chars in a path like `[[name]].js` get changed to `__name__.js`.
      // This prevents that by enforcing a custom sanitizer. More details: <https://o5p.me/Y2fNf9>.
      sanitizeFileName: (fileName) => fileName.replace(/[\0?*]/gu, ""),
      // By default, in SSR mode, Vite forces all entry files into the `distDir` root.
      // This prevents that by enforcing a consistently relative location for all entries.
      entryFileNames: (entry) => {
        if (extensions_default.noDot([...extensions_default.byCanonical.html]).includes(path_exports.ext(entry.facadeModuleId))) {
          if (/\//u.test(entry.name))
            return "[name]-[hash].js";
          return path11.join(path11.relative(distDir2, a16sDir), "[name]-[hash].js");
        }
        if (/\//u.test(entry.name))
          return "[name].js";
        return path11.join(path11.relative(srcDir, path11.dirname(entry.facadeModuleId)), "[name].js");
      },
      // By default, in library mode, Vite ignores `build.assetsDir`.
      // This prevents that by enforcing a consistent location for chunks and assets.
      chunkFileNames: () => {
        return path11.join(path11.relative(distDir2, a16sDir), "[name]-[hash].js");
      },
      // By default, in library mode, Vite ignores `build.assetsDir`.
      // This prevents that by enforcing a consistent location for chunks and assets.
      assetFileNames: () => path11.join(path11.relative(distDir2, a16sDir), "[name]-[hash].[ext]"),
      // Preserves module structure in apps built explicitly as libraries.
      // Cannot inline dynamic imports when `preserveModules` is enabled, so set as `false` explicitly.
      ...["lib"].includes(appType) ? { preserveModules: true, hoistTransitiveImports: false, inlineDynamicImports: false } : {}
    }
  };
};

// dev/.files/vite/includes/terser/config.mjs
var config_default10 = async () => {
  return {
    module: true,
    toplevel: true,
    ecma: es_version_default.year,
    compress: { passes: 1 },
    format: { comments: false }
  };
};

// dev/.files/vite/includes/vitest/config.mjs
init_dist2();
import { buildPagesASSETSBinding, defineWorkersProject } from "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/node_modules/@cloudflare/vitest-pool-workers/dist/config/index.cjs";
import path12 from "node:path";
init_extensions();
var config_default11 = async ({ mode, projDir: projDir4, srcDir, logsDir, pkg: pkg2, appType, targetEnv, wranglerSettings, vitestSandboxEnable, vitestExamplesEnable, rollupConfig, depsConfig }) => {
  const vitestExcludes = [
    .../* @__PURE__ */ new Set([
      ...exclusions_default.localIgnores,
      ...exclusions_default.logIgnores,
      ...exclusions_default.backupIgnores,
      ...exclusions_default.patchIgnores,
      ...exclusions_default.editorIgnores,
      ...exclusions_default.pkgIgnores,
      ...exclusions_default.vcsIgnores,
      ...exclusions_default.osIgnores,
      ...exclusions_default.dotIgnores,
      ...exclusions_default.dtsIgnores,
      ...exclusions_default.configIgnores,
      ...exclusions_default.lockIgnores,
      ...exclusions_default.devIgnores,
      ...exclusions_default.distIgnores,
      ...exclusions_default.docIgnores,
      ...vitestSandboxEnable ? [] : [...exclusions_default.sandboxIgnores],
      ...vitestExamplesEnable ? [] : [...exclusions_default.exampleIgnores],
      ...exclusions_default.adhocExIgnores
      // Deliberate ad-hoc exclusions.
    ])
  ];
  const allEnvSuffixes = ["cfp", "web", "cfw", "webw", "node", "any"], allReservedSlugs = ["test", "tests", "test-d", "tests-d", "spec", "specs", "spec-d", "specs-d", "bench", "benchmark", "benchmarks"], vitestEnvSpecificPaths = [
    "**/" + (allReservedSlugs.length ? extensions_default.asBracedGlob(allReservedSlugs) : "") + "/**/*." + (allEnvSuffixes.length ? extensions_default.asBracedGlob(allEnvSuffixes) + "." : "") + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript]),
    "**/*." + (allEnvSuffixes.length ? extensions_default.asBracedGlob(allEnvSuffixes) + "." : "") + (allReservedSlugs.length ? extensions_default.asBracedGlob(allReservedSlugs) + "." : "") + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript])
  ];
  let jsdomProjectConfig, nodeProjectConfig, workerProjectConfig;
  const envIncludesExcludes = (envSuffixes) => {
    return {
      include: vitestSandboxEnable || vitestExamplesEnable ? [
        ...vitestSandboxEnable ? [
          "**/sandbox/**/{test,tests,spec,specs}/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript]),
          "**/sandbox/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + "{test,tests,spec,specs}." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript])
        ] : [],
        ...vitestExamplesEnable ? [
          "**/{example,examples}/**/{test,tests,spec,specs}/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript]),
          "**/{example,examples}/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + "{test,tests,spec,specs}." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript])
        ] : []
      ] : [
        "**/{test,tests,spec,specs}/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript]),
        "**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + "{test,tests,spec,specs}." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript])
      ],
      exclude: [.../* @__PURE__ */ new Set([...vitestExcludes, ...!envSuffixes.length ? vitestEnvSpecificPaths : []])],
      typecheck: {
        include: vitestSandboxEnable || vitestExamplesEnable ? [
          ...vitestSandboxEnable ? [
            "**/sandbox/**/{test,tests,spec,specs}-d/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allTypeScript]),
            "**/sandbox/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + "{test,tests,spec,specs}-d." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allTypeScript])
          ] : [],
          ...vitestExamplesEnable ? [
            "**/{example,examples}/**/{test,tests,spec,specs}-d/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allTypeScript]),
            "**/{example,examples}/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + "{test,tests,spec,specs}-d." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allTypeScript])
          ] : []
        ] : [
          "**/{test,tests,spec,specs}-d/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allTypeScript]),
          "**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + "{test,tests,spec,specs}-d." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allTypeScript])
        ],
        exclude: [.../* @__PURE__ */ new Set([...vitestExcludes, ...!envSuffixes.length ? vitestEnvSpecificPaths : []])]
      },
      benchmark: {
        include: vitestSandboxEnable || vitestExamplesEnable ? [
          ...vitestSandboxEnable ? [
            "**/sandbox/**/{bench,benchmark,benchmarks}/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript]),
            "**/sandbox/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + "{bench,benchmark,benchmarks}." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript])
          ] : [],
          ...vitestExamplesEnable ? [
            "**/{example,examples}/**/{bench,benchmark,benchmarks}/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript]),
            "**/{example,examples}/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + "{bench,benchmark,benchmarks}." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript])
          ] : []
        ] : [
          "**/{bench,benchmark,benchmarks}/**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript]),
          "**/*." + (envSuffixes.length ? extensions_default.asBracedGlob(envSuffixes) + "." : "") + "{bench,benchmark,benchmarks}." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript])
        ],
        exclude: [.../* @__PURE__ */ new Set([...vitestExcludes, ...!envSuffixes.length ? vitestEnvSpecificPaths : []])]
      },
      css: { include: /.+/u, exclude: [] }
      // CSS includes/excludes; i.e., when following style imports.
    };
  };
  return {
    mode,
    // Same mode as Vite.
    root: srcDir,
    // Vitest root dir.
    restoreMocks: true,
    // Remove all mocks before a test begins.
    unstubEnvs: true,
    // Remove all env stubs before a test begins.
    unstubGlobals: true,
    // Remove all global stubs before a test begins.
    passWithNoTests: true,
    // Pass if there are no tests to run.
    allowOnly: true,
    // Allows `describe.only`, `test.only`, `bench.only`.
    watch: false,
    // Disable watching by default; instead use `--watch`.
    forceRerunTriggers: [],
    // Disable; we’ll perform our own full re-runs when necessary.
    // One of the reasons for disabling this is because it doesn’t support negated `!` patterns.
    reporters: ["verbose", "hanging-process"],
    // Verbose reporting.
    // {@see https://o5p.me/p0f9j5} for further details.
    // Unprefixed vars we want added to `import.meta.env`.
    // Vars with app-environment prefixes are already included by default.
    // This is mainly for worker tests, because `process.env` is available otherwise;
    // whereas with worker tests, the pool of workers does not inherit `process.env`.
    env: obj_exports.pick(process.env, ["CI", "TEST", "VITEST"]),
    outputFile: {
      json: path12.resolve(logsDir, "./tests/vitest.json"),
      junit: path12.resolve(logsDir, "./tests/vitest.junit"),
      html: path12.resolve(logsDir, "./tests/vitest/index.html")
    },
    benchmark: {
      outputFile: {
        json: path12.resolve(logsDir, "./benchmarks/vitest.json"),
        junit: path12.resolve(logsDir, "./benchmarks/vitest.junit"),
        html: path12.resolve(logsDir, "./benchmarks/vitest.html")
      }
    },
    coverage: {
      all: true,
      // All of the below.
      extension: [...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript],
      include: ["**/*." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.allJavaScript, ...extensions_default.byDevGroup.allTypeScript])],
      exclude: [
        .../* @__PURE__ */ new Set([
          ...vitestExcludes,
          ...exclusions_default.sandboxIgnores,
          ...exclusions_default.exampleIgnores,
          ...exclusions_default.testIgnores,
          ...exclusions_default.specIgnores,
          ...exclusions_default.benchIgnores
        ])
      ],
      reporter: ["text", "html", "clover", "json"],
      reportsDirectory: path12.resolve(logsDir, "./coverage/vitest")
    },
    server: {
      deps: {
        inline: [],
        // {@see https://o5p.me/DHrjU4} for details.
        external: [...new Set([...exclusions_default.pkgIgnores].concat(rollupConfig.external))]
      }
    },
    poolOptions: {
      workers: {
        singleWorker: true,
        wrangler: {
          configPath: path12.resolve(projDir4, "./wrangler.toml"),
          // {@see https://o5p.me/vUsocE}.
          // For pages projects, an explicit `dev` environment is not supported by `$ madrun wrangler pages deploy`.
          // The only valid environment keys are `production` and `preview`. So instead of `dev`, top-level keys are `dev` keys.
          // Remember, miniflare writes to local storage anyway, so having a separate `dev` environment is not 100% necessary.
          // What is necessary is that miniflare knows the names of the bindings we need, so it can populate those for tests.
          ...["spa", "mpa"].includes(appType) && ["cfp"].includes(targetEnv) ? {} : { environment: "dev" }
        },
        // Miniflare config takes precedence over wrangler config.
        miniflare: {
          ...["cfp", "any"].includes(targetEnv) ? (
            // Explicitly defining an assets binding for `createPagesEventContext()` in `@clevercanyon/utilities.cfp/test`.
            {
              serviceBindings: {
                ASSETS: (
                  // eslint-disable-next-line no-constant-condition -- @review Can we start using `buildPagesASSETSBinding()`?
                  "use:buildPagesASSETSBinding()" === true ? await buildPagesASSETSBinding(wranglerSettings.defaultPagesAssetsDir) : async () => new Response(null, { status: 404 })
                )
              }
            }
          ) : {}
        }
      }
    },
    deps: {
      optimizer: {
        web: depsConfig,
        // @{see https://o5p.me/c7L3KS}.
        ssr: depsConfig
        // @{see https://o5p.me/c7L3KS}.
      }
    },
    workspace: [
      obj_exports.mergeDeep(
        jsdomProjectConfig = {
          extends: true,
          test: {
            mode,
            // Same mode.
            environment: "jsdom"
          }
        },
        {
          test: {
            name: "[cfp,web]",
            ...envIncludesExcludes(["cfp", "web"])
          }
        }
      ),
      obj_exports.mergeDeep(
        workerProjectConfig = obj_exports.patchDeep(defineWorkersProject({}), {
          extends: true,
          test: {
            mode,
            // Same mode.
            environment: "node",
            // + workerd; {@see https://o5p.me/QUeRzq}.
            deps: {
              optimizer: {
                ssr: obj_exports.mergeDeep(depsConfig, {
                  $concat: {
                    include: [
                      "@clevercanyon/utilities",
                      //
                      "@clevercanyon/utilities/**",
                      "@clevercanyon/utilities.web",
                      "@clevercanyon/utilities.web/**",
                      "@clevercanyon/utilities.cfw",
                      "@clevercanyon/utilities.cfw/**",
                      "@clevercanyon/utilities.cfp",
                      "@clevercanyon/utilities.cfp/**"
                    ].filter((name) => name !== pkg2.name && !name.startsWith(pkg2.name + "/"))
                  }
                })
              }
            }
          }
        }),
        {
          test: {
            name: "[cfw,webw]",
            ...envIncludesExcludes(["cfw", "webw"])
          }
        }
      ),
      obj_exports.mergeDeep(
        nodeProjectConfig = {
          extends: true,
          test: {
            mode,
            // Same mode.
            environment: "node"
          }
        },
        {
          test: {
            name: "[node,any]",
            ...envIncludesExcludes(["node", "any"])
          }
        }
      ),
      obj_exports.mergeDeep(
        ["cfp", "web"].includes(targetEnv) ? jsdomProjectConfig : ["cfw", "webw"].includes(targetEnv) ? workerProjectConfig : ["node", "any"].includes(targetEnv) ? nodeProjectConfig : nodeProjectConfig,
        // Default is node.
        {
          test: {
            name: "[targetEnv:" + targetEnv + "]",
            ...envIncludesExcludes([])
          }
        }
      )
      // prettier-ignore
    ]
  };
};

// dev/.files/vite/config.mjs
var __vite_injected_original_import_meta_url5 = "file:///Users/Jason/Mounts/XDrive/Projects/clevercanyon/utilities/dev/.files/vite/config.mjs";
var config_default12 = async ({ mode, command, isSsrBuild: isSSRBuild }) => {
  const time2 = time_exports.now();
  if (process.env.APP_IS_VITE) {
    mode = process.env.APP_IS_VITE.split("=")[1] || mode;
  }
  process.env.APP_IS_VITE = command + "=" + mode;
  process.env.NODE_ENV = // As detailed by Vite <https://o5p.me/DscTVM>.
  "dev" === mode ? "development" : "production";
  const __dirname4 = fs_exports.imuDirname(__vite_injected_original_import_meta_url5);
  const projDir4 = path14.resolve(__dirname4, "../../..");
  const srcDir = path14.resolve(__dirname4, "../../../src");
  const cargoDir = path14.resolve(__dirname4, "../../../src/cargo");
  const distDir2 = path14.resolve(__dirname4, "../../../dist");
  const envsDir = path14.resolve(__dirname4, "../../../dev/.envs");
  const logsDir = path14.resolve(__dirname4, "../../../dev/.logs");
  const cacheDir = path14.resolve(__dirname4, "../../../node_modules/.cache/vite");
  const a16sDir = await dir_default({ isSSRBuild, distDir: distDir2 });
  const pkg2 = await u.pkg();
  let appEnvPrefixes = ["APP_"];
  if (isSSRBuild)
    appEnvPrefixes.push("SSR_APP_");
  const env = loadEnv(mode, envsDir, appEnvPrefixes);
  const appBaseURL = env.APP_BASE_URL || "";
  const appBaseURLResolvedNTS = appBaseURL ? str_exports.rTrim(new URL("./", appBaseURL).toString(), "/") : "";
  process.env._VITE_MODE_ = mode;
  process.env._VITE_APP_BASE_URL_ = appBaseURL;
  const staticDefs = {
    ["$$__" + appEnvPrefixes[0] + "PKG_NAME__$$"]: pkg2.name || "",
    ["$$__" + appEnvPrefixes[0] + "PKG_VERSION__$$"]: pkg2.version || "",
    ["$$__" + appEnvPrefixes[0] + "BUILD_TIME_YMD__$$"]: time2.toYMD(),
    ["$$__" + appEnvPrefixes[0] + "BUILD_TIME_SQL__$$"]: time2.toSQL(),
    ["$$__" + appEnvPrefixes[0] + "BUILD_TIME_ISO__$$"]: time2.toISO(),
    ["$$__" + appEnvPrefixes[0] + "BUILD_TIME_STAMP__$$"]: time2.unix().toString(),
    ["$$__" + appEnvPrefixes[0] + "BASE_URL__$$"]: appBaseURL,
    ["$$__" + appEnvPrefixes[0] + "BASE_URL_RESOLVED_NTS__$$"]: appBaseURLResolvedNTS
  };
  Object.keys(env).filter((key) => new RegExp("^(?:" + appEnvPrefixes.map((v) => str_exports.escRegExp(v)).join("|") + ")", "u").test(key)).filter(
    (key) => is_exports.string(str_exports.parseValue(env[key]))
    /* Only those which are truly string values. */
  ).forEach((key) => staticDefs["$$__" + key + "__$$"] = env[key]);
  const appType = obp_exports.get(pkg2, "config.c10n.&." + (isSSRBuild ? "ssrBuild" : "build") + ".appType") || "cma";
  const targetEnv = obp_exports.get(pkg2, "config.c10n.&." + (isSSRBuild ? "ssrBuild" : "build") + ".targetEnv") || "any";
  const entryFiles = obp_exports.get(pkg2, "config.c10n.&." + (isSSRBuild ? "ssrBuild" : "build") + ".entryFiles") || [];
  const sideEffects = obp_exports.get(pkg2, "config.c10n.&." + (isSSRBuild ? "ssrBuild" : "build") + ".sideEffects") || [];
  const appDefaultEntryFiles = (
    // Based on app type.
    ["spa"].includes(appType) ? ["./src/index." + extensions_default.asBracedGlob([...extensions_default.byCanonical.html])] : ["mpa"].includes(appType) ? ["./src/**/index." + extensions_default.asBracedGlob([...extensions_default.byCanonical.html])] : ["./src/*." + extensions_default.asBracedGlob([...extensions_default.byDevGroup.sTypeScript, ...extensions_default.byDevGroup.sTypeScriptReact])]
  );
  const appEntryFiles = (entryFiles.length ? entryFiles : appDefaultEntryFiles).map((v) => str_exports.lTrim(v, "./"));
  const appEntries = appEntryFiles.length ? await glob_exports.promise(appEntryFiles, { cwd: projDir4 }) : [];
  const appEntriesAsProjRelPaths = appEntries.map((absPath) => "./" + path14.relative(projDir4, absPath));
  const appEntriesAsSrcSubpaths = appEntries.map((absPath) => path14.relative(srcDir, absPath));
  const appEntriesAsSrcSubpathsNoExt = appEntriesAsSrcSubpaths.map((subpath) => subpath.replace(/\.[^.]+$/u, ""));
  const sslKey = fs7.readFileSync(path14.resolve(projDir4, "./dev/.files/bin/ssl-certs/i10e-ca-key.pem")).toString();
  const sslCrt = fs7.readFileSync(path14.resolve(projDir4, "./dev/.files/bin/ssl-certs/i10e-ca-crt.pem")).toString();
  const peerDepKeys = Object.keys(pkg2.peerDependencies || {});
  const targetEnvIsServer = ["cfw", "node"].includes(targetEnv);
  const wranglerMode = process.env.VITE_WRANGLER_MODE || "";
  const wranglerSettings = await (await Promise.resolve().then(() => (init_settings(), settings_exports))).default();
  const inProdLikeMode = ["prod", "stage"].includes(mode) || "dev" === mode && "dev" === wranglerMode;
  const sourcemapsEnable = ["dev"].includes(mode);
  const minifyEnable = !["lib"].includes(appType) && inProdLikeMode;
  const vitestSandboxEnable = process.env.VITEST && str_exports.parseValue(String(process.env.VITEST_SANDBOX_ENABLE || ""));
  const vitestExamplesEnable = process.env.VITEST && str_exports.parseValue(String(process.env.VITEST_EXAMPLES_ENABLE || ""));
  const prefreshEnable = process.env.VITE_PREFRESH_ENABLE && !process.env.VITEST && "serve" === command && "dev" === mode && ["spa", "mpa"].includes(appType);
  if (!pkg2.name) {
    throw new Error("Apps must have a name.");
  }
  if (!appEntryFiles.length || !appEntries.length) {
    throw new Error("Apps must have at least one entry point.");
  }
  if (isSSRBuild && !targetEnvIsServer) {
    throw new Error("SSR builds must target an SSR environment.");
  }
  if (!["dev", "ci", "stage", "prod"].includes(mode)) {
    throw new Error("Required `mode` is missing or invalid. Expecting `dev|ci|stage|prod`.");
  }
  if (!["spa", "mpa", "cma", "lib"].includes(appType)) {
    throw new Error("Must have a valid `config.c10n.&.build.appType` in `package.json`.");
  }
  if ((["spa", "mpa"].includes(appType) || ["cfw"].includes(targetEnv) && !["lib"].includes(appType)) && !appBaseURL) {
    throw new Error("Must have a valid `APP_BASE_URL` environment variable.");
  }
  if (!["any", "node", "cfw", "cfp", "web", "webw"].includes(targetEnv)) {
    throw new Error("Must have a valid `config.c10n.&.build.targetEnv` in `package.json`.");
  }
  const pkgUpdates = await updates_default({
    command,
    isSSRBuild,
    projDir: projDir4,
    srcDir,
    distDir: distDir2,
    pkg: pkg2,
    appType,
    targetEnv,
    sideEffects,
    appEntriesAsProjRelPaths,
    appEntriesAsSrcSubpaths,
    appEntriesAsSrcSubpathsNoExt
  });
  sideEffects.length = 0, pkgUpdates.sideEffects.forEach((s) => sideEffects.push(s));
  const plugins = [
    await side_effects_default({}),
    await no_module_preload_default({}),
    await config_default6({}),
    await brand_config_default({ mode, appBaseURL }),
    await cloudflare_email_default({ mode, command }),
    await cloudflare_sockets_default({ mode, command }),
    await cloudflare_workers_default({ mode, command }),
    await cloudflare_workflows_default({ mode, command }),
    // ... `cloudflare:test` module provided by Vitest config.
    await config_default({ projDir: projDir4 }),
    await config_default4({ mode, projDir: projDir4, srcDir, pkg: pkg2, env }),
    await html_transforms_default({ staticDefs }),
    await config_default7({ minifyEnable }),
    await config_default3({ isSSRBuild, distDir: distDir2 }),
    await pre_processing_default({ command, isSSRBuild, projDir: projDir4, distDir: distDir2, appType }),
    await post_processing_default({
      mode,
      wranglerMode,
      inProdLikeMode,
      command,
      isSSRBuild,
      projDir: projDir4,
      distDir: distDir2,
      pkg: pkg2,
      env,
      appBaseURL,
      appType,
      targetEnv,
      staticDefs,
      pkgUpdates
    }),
    // prettier-ignore
    ...prefreshEnable ? [await config_default8({})] : []
  ];
  const terserConfig = await config_default10({});
  const esbuildConfig = await config_default5({});
  const depsConfig = await config_default2({ projDir: projDir4, pkg: pkg2, wranglerSettings, prefreshEnable });
  const rollupConfig = await config_default9({ projDir: projDir4, srcDir, distDir: distDir2, a16sDir, appType, appEntries, peerDepKeys, minifyEnable, sideEffects });
  const vitestConfig = await config_default11({ mode, projDir: projDir4, srcDir, logsDir, pkg: pkg2, appType, targetEnv, wranglerSettings, vitestSandboxEnable, vitestExamplesEnable, rollupConfig, depsConfig });
  const importedWorkerPlugins = () => [];
  const importedWorkerRollupConfig = { ...obj_exports.omit(rollupConfig, ["input"]) };
  const customLogger = createLogger();
  const originalLoggerWarnOnce = customLogger.warnOnce;
  customLogger.warnOnce = (msg, options4) => {
    if (msg.includes("didn't resolve at build time, it will remain unchanged to be resolved at runtime")) {
      return;
    }
    if (/^Sourcemap for "[^"]+\.mdx" points to missing source files$/iu.test(msg)) {
      return;
    }
    originalLoggerWarnOnce(msg, options4);
  };
  const baseConfig = {
    c10n: { pkg: pkg2, pkgUpdates },
    define: obj_exports.map(staticDefs, (v) => json_exports.stringify(v)),
    root: srcDir,
    // Absolute path where entry indexes live.
    cacheDir,
    // Where Vite stores cache files.
    publicDir: isSSRBuild ? false : path14.relative(srcDir, cargoDir),
    base: appBaseURLResolvedNTS ? url_exports.toPath(appBaseURLResolvedNTS) : "/",
    envDir: path14.relative(srcDir, envsDir),
    // Relative to `root` directory.
    envPrefix: appEnvPrefixes,
    // Env vars w/ these prefixes become part of the app.
    appType: ["spa", "mpa"].includes(appType) ? appType : "custom",
    plugins,
    // Additional Vite plugins; i.e., already configured above.
    server: {
      host: "0.0.0.0",
      // All.
      port: 443,
      // Default https.
      strictPort: true,
      // Only use 443.
      open: false,
      // Not automatically.
      https: { key: sslKey, cert: sslCrt }
    },
    preview: {
      host: "0.0.0.0",
      // All.
      port: 443,
      // Default https.
      strictPort: true,
      // Only use 443.
      open: false,
      // Not automatically.
      https: { key: sslKey, cert: sslCrt }
    },
    resolve: {
      alias: import_aliases_default.asFindReplaceRegExps,
      extensions: [...extensions_default.onImportWithNoExtensionTry]
    },
    worker: (
      /* <https://vitejs.dev/guide/features.html#web-workers> */
      {
        format: "es",
        plugins: importedWorkerPlugins,
        rollupOptions: importedWorkerRollupConfig
      }
    ),
    ssr: {
      target: targetEnvIsServer && ["cfw"].includes(targetEnv) ? "webworker" : "node",
      ...targetEnvIsServer && ["cfw"].includes(targetEnv) ? { noExternal: true } : {}
    },
    esbuild: esbuildConfig,
    // esBuild config options.
    optimizeDeps: depsConfig,
    // Deps config options.
    build: (
      /* <https://vitejs.dev/config/build-options.html> */
      {
        target: es_version_default.lcnYear,
        // Matches TypeScript config.
        ssr: targetEnvIsServer,
        // Target environment is server-side?
        emptyOutDir: false,
        // Instead, we handle this via our own plugin.
        outDir: path14.relative(srcDir, distDir2),
        // Relative to `root` directory.
        assetsInlineLimit: 0,
        // Disable entirely. Use import `?raw`, `?url`, etc.
        assetsDir: path14.relative(distDir2, a16sDir),
        // Relative to `outDir` directory.
        // Note: `a16s` is a numeronym for 'acquired resources'; i.e. via imports.
        manifest: !isSSRBuild ? "vite/manifest.json" : false,
        // Enables manifest of asset locations.
        ssrManifest: isSSRBuild ? "vite/ssr-manifest.json" : false,
        // Enables SSR manifest of asset locations.
        sourcemap: sourcemapsEnable,
        // Enables creation of sourcemaps; i.e., purely for debugging purposes.
        terserOptions: terserConfig,
        // Terser config options.
        minify: minifyEnable ? "terser" : false,
        // {@see https://o5p.me/pkJ5Xz}.
        cssMinify: minifyEnable ? "lightningcss" : false,
        // {@see https://o5p.me/h0Hgj3}.
        // We ran several tests between `esbuild`, `cssnano`, and `lightningcss` wins.
        modulePreload: false,
        // Disable. DOM injections conflict with our SPAs.
        // This option is sort-of respected, but not fully; {@see https://github.com/vitejs/vite/issues/13952}.
        // For now, we have a custom plugin, configured above, which effectively disables all preloading.
        ...["cma", "lib"].includes(appType) ? { lib: { entry: appEntries, formats: ["es"] } } : {},
        rollupOptions: rollupConfig
        // See: <https://o5p.me/5Vupql>.
      }
    ),
    customLogger,
    // Uses our custom logger, which is based on the default logger.
    experimental: {
      importGlobRestoreExtension: true
      // Restores file extension on glob imports containing a query string.
      // This is needed by our use of the MDX plugin for Vite; e.g., when we glob MDX files to import frontMatter,
      // we add a query to make the glob import distinct from other dynamic imports of the same file elsewhere.
      // Enabling this option restores the `.mdx` extension, such that the MDX plugin still considers
      // the import to be an MDX file; i.e., given that it ends with a query string otherwise.
      // Another way to accomplish the same thing is to set the query string to a value that ends with `.mdx`.
      // Just documenting this for future reference in case the experimental option goes away or changes.
    },
    test: vitestConfig
    // Vitest configuration.
  };
  return baseConfig;
};

// vite.config.mjs
init_dist2();
var vite_config_default = async (context) => {
  return obj_exports.mergeDeep({}, await config_default12(context), {});
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
