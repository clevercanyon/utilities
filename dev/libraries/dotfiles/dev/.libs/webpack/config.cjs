/**
 * Webpack config file.
 *
 * @since 1.0.0
 *
 * @note Webpack is not aware of this config file's location.
 *       Please use `--config ./dev/.libs/webpack/config.cjs`.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * This file and the contents of it are updated automatically.
 *
 * - Instead of editing this file, please configure `../../../package.json`. See instructions below.
 * - Instead of editing this file, please review source repository {@see https://o5p.me/LevQOD}.
 */
/* eslint-env node */

/* @formatter:ignore
-----------------------------------------------------------------------------------------------------------------------
Example `config.clevercanyon.&.webpack` using `../../../package.json`:
-----------------------------------------------------------------------------------------------------------------------
"config"          : {
	"clevercanyon" : {
		"&" : {
			"webpack" : {
				"assetDirs" : [ "../../../src" ]
			}
		}
	}
}
-----------------------------------------------------------------------------------------------------------------------
Example directory structure expected for webpack:
-----------------------------------------------------------------------------------------------------------------------
../../../src (or any other location):
	- styles/index.(scss|css)
	- scripts/index.(tsx|ts|jsx|js|cjs)
	- webpack/ (output directory)
------------------------------------------------------------------------------------------------- @formatter:/ignore */

const fs      = require( 'fs' );
const path    = require( 'path' );
const miniCss = require( 'mini-css-extract-plugin' );
const mc      = require( '@clevercanyon/js-object-mc' );

module.exports = ( env, argv ) => {
	const file = {
		'package.json' : {},
	};
	try { file[ 'package.json' ] = require( '../../../package.json' ); } catch ( e ) {}

	const configs = [];
	const config  = mc.merge(
		{
			assetDirs : [ '../../../src' ],
			config    : {}, // Merges into all base config values.
		},
		file[ 'package.json' ]?.config?.clevercanyon?.[ '&' ]?.webpack || {},
	);

	( config.assetDirs || [] ).forEach( ( assetsDir ) => {
		const entryIndexes = []; // Initialize.
		assetsDir          = path.resolve( __dirname, assetsDir );

		[ '.scss', '.css' ].forEach( ext => {
			if ( fs.existsSync( assetsDir + '/styles/index' + ext ) ) {
				entryIndexes.push( assetsDir + '/styles/index' + ext );
			}
		} );
		[ '.tsx', '.ts', '.jsx', '.js', '.cjs' ].forEach( ext => {
			if ( fs.existsSync( assetsDir + '/scripts/index' + ext ) ) {
				entryIndexes.push( assetsDir + '/scripts/index' + ext );
			}
		} );
		if ( ! entryIndexes.length ) {
			return; // No entry indexes available.
		}
		configs.push( mc.merge( {
			cache       : false,
			mode        : 'production',
			devtool     : 'source-map',
			target      : 'browserslist',
			experiments : { topLevelAwait : true },
			plugins     : [ new miniCss( { filename : '[name].min.css' } ) ],
			resolve     : { extensions : [ '.tsx', '.ts', '.jsx', '.js', '.cjs', '.json', '.wasm' ] },
			module      : {
				rules : [
					{
						test : /\.(?:txt|md)$/i,
						use  : [ 'raw-loader' ],
					},
					{
						test : /\.(?:html)$/i,
						use  : [ 'html-loader' ],
					},
					{
						test : /\.(?:gif|jpe?g|png|svg|eot|ttf|woff[0-9]*)$/i,
						use  : [ 'file-loader' ],
					},
					{
						test : /\.(?:scss|css)$/i,
						use  : [
							miniCss.loader,
							{ loader : 'css-loader' },
							{
								loader : 'postcss-loader', options : {
									postcssOptions : { config : path.resolve( __dirname, './postcss.cjs' ) },
								},
							},
							{ loader : 'sass-loader' },
						],
					},
					{
						test    : /\.(?:tsx|ts|jsx|js|cjs)$/i,
						exclude : [ /\/(?:node_modules\/(?:core-js|webpack\/buildin))\//i ],
						use     : [
							{
								loader : 'babel-loader', options : {
									configFile : path.resolve( __dirname, './babel.cjs' ),
								},
							},
						],
					},
				],
			},
			entry       : {
				index : entryIndexes,
			},
			output      : {
				path     : assetsDir + '/webpack',
				filename : '[name].min.js',
			},
		}, config.config || {} ) );
	} );

	return configs;
};
