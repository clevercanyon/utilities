/**
 * PostCSS config file.
 *
 * @since 1.0.0
 *
 * @note PostCSS doesn't know where this file lives.
 * If you ever need to call PostCSS directly be sure to tell it.
 * It's not an issue at this time because we don't call it directly.
 *
 * @note `srcDir` is a relative path, as given in `package.json`.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * This file and the contents of it are updated automatically.
 * - Instead of editing this file, please configure `../../../package.json`. See instructions below.
 * - Instead of editing this file, please review source repository {@see https://o5p.me/LevQOD}.
 */
/* eslint-env es2021, node */

/* @formatter:ignore
-----------------------------------------------------------------------------------------------------------------------
Example `config.c10n.&.postcss` in `../../../package.json`:
-----------------------------------------------------------------------------------------------------------------------
"config"          : {
	"c10n" : {
		"&" : {
			"postcss" : {
				"config" : {
					"plugins" : [
						[ "postcss-import", {} ],
						[ "tailwindcss", {} ],
						[ "postcss-preset-env", {} ],
						[ "cssnano", {} ]
					]
				}
			},
			"postcss:./src": {
				"config" : {}
			}
		}
	}
}
------------------------------------------------------------------------------------------------- @formatter:/ignore */

const path = require( 'path' );
const mc   = require( '@clevercanyon/js-object-mc' );

module.exports = ( srcDir = '' ) => {
	// Initialize global data.

	const globalData = { config : {} };

	// Get custom data by file.

	const customDataByFile = {}; // Initialize.

	try { // Try `package.json` data.
		customDataByFile[ 'package.json' ] = require( '../../../package.json' );
	} catch ( e ) {
		customDataByFile[ 'package.json' ] = {};
	}
	// Merge custom data, that's global, into global data.

	for ( const [ fileName, fileData ] of Object.entries( customDataByFile ) ) {
		switch ( fileName ) {
			case 'package.json':
				mc.patch( globalData, fileData?.config?.c10n?.[ '&' ]?.postcss || {} );
				break;
		}
	}
	// Now establish a configuration for this src directory.

	const absSrcDir = path.resolve( __dirname, '../../../', srcDir );

	const srcDirConfig = {
		postcssOptions : {
			plugins : [
				[ 'postcss-import', {} ],
				[ 'tailwindcss', require( './tailwind.cjs' )( srcDir ) ],
				[ 'postcss-preset-env', { stage : 1, features : { 'focus-within-pseudo-class' : false } } ],
				[ 'cssnano', require( './cssnano.cjs' )( srcDir ) ],
			],
		},
	};
	// Merge custom config data that's global.

	mc.patch( srcDirConfig, globalData.config || {} );

	// Merge custom config data for this src directory.

	for ( const [ fileName, fileData ] of Object.entries( customDataByFile ) ) {
		switch ( fileName ) {
			case 'package.json':
				mc.patch( srcDirConfig, fileData?.config?.c10n?.[ '&' ]?.[ 'postcss:' + srcDir ]?.config || {} );
				break;
		}
	}
	// Return config.

	return srcDirConfig;
};
