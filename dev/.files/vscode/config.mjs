#!/usr/bin/env node
/**
 * VS Code config file.
 *
 * VS Code is not aware of this config file's location.
 *
 * The underlying `../../../.vscode/settings.json` file can be recompiled using:
 *
 *     $ madrun update vscode
 *     or: $ madrun update dotfiles
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://code.visualstudio.com/docs/getstarted/settings
 */

import { $path } from '../../../node_modules/@clevercanyon/utilities/dist/index.js';
import exclusions from '../bin/includes/exclusions.mjs';
import extensions from '../bin/includes/extensions.mjs';

/**
 * Defines VS Code configuration.
 */
export default async () => {
	/**
	 * File associations.
	 */
	const fileAssociations = {
		// Special cases.
		'.env{,.*}': 'properties',
		'**/CODEOWNERS': 'ignore',
		'**/src/cargo/_headers': 'plaintext',
		'**/src/cargo/_redirects': 'plaintext',
		'**/src/cargo/_routes.json': 'jsonc',
	};
	for (const [vsCodeLang, exts] of Object.entries($path.extsByVSCodeLang())) {
		fileAssociations['**/*.' + extensions.asBracedGlob(exts)] = vsCodeLang;
	}

	/**
	 * Base config.
	 */
	const baseConfig = {
		/**
		 * Editor options.
		 */

		'editor.tabSize': 4,
		'editor.autoIndent': 'full',
		'editor.insertSpaces': false,
		'editor.detectIndentation': true,

		'editor.wordWrap': 'off',
		'editor.wordWrapColumn': 180,
		'editor.wrappingIndent': 'indent',

		/**
		 * File and search options.
		 */

		'files.eol': '\n',
		'files.encoding': 'utf8',

		'files.trimFinalNewlines': true,
		'files.insertFinalNewline': true,
		'files.trimTrailingWhitespace': true,

		'files.associations': fileAssociations,
		'files.exclude': {
			...exclusions.asBoolProps(
				exclusions.localIgnores //
					.filter((ignore) => !['**/.#*/**'].includes(ignore)),
			),
			...exclusions.asBoolProps(
				exclusions.editorIgnores //
					.filter((ignore) => !['**/*.code-search/**', '**/*.code-workspace/**'].includes(ignore)),
			),
			...exclusions.asBoolProps(
				exclusions.toolingIgnores //
					.filter((ignore) => !['**/.dev.vars/**', '**/.dev.vars.*/**'].includes(ignore)),
			),
			...exclusions.asBoolProps(exclusions.vcsIgnores),
			...exclusions.asBoolProps(exclusions.osIgnores),
		},
		'search.useIgnoreFiles': true,
		'search.useGlobalIgnoreFiles': false,
		'search.useParentIgnoreFiles': false,
		'search.exclude': {
			...exclusions.asBoolProps(exclusions.lockIgnores),
			'**/.vscode/**': true,
		},

		/**
		 * Comment anchor options.
		 */
		'commentAnchors.tags.anchors': {
			'@todo': {
				'scope': 'workspace',
				'iconColor': '#fff0b5',
				'highlightColor': '#fff0b5',
				'styleMode': 'tag',
			},
			'@someday': {
				'scope': 'workspace',
				'iconColor': '#8a826d',
				'highlightColor': '#8a826d',
				'styleMode': 'tag',
			},
		},
		'commentAnchors.tags.matchCase': true,
		'commentAnchors.tags.separators': [' ', ': '],

		'commentAnchors.workspace.excludeFiles': exclusions.asBracedGlob(
			[
				...exclusions.logIgnores, //
				...exclusions.backupIgnores,
				...exclusions.patchIgnores,
				...exclusions.editorIgnores,
				...exclusions.toolingIgnores,
				...exclusions.pkgIgnores,
				...exclusions.vcsIgnores,
				...exclusions.osIgnores,
				...exclusions.lockIgnores,
				...exclusions.distIgnores,
			],
			{ dropExistingNegations: true },
		),
		'commentAnchors.workspace.matchFiles': '**/*.' + extensions.asBracedGlob([...extensions.commentAnchorsContent]),

		/**
		 * ESLint options.
		 */

		'eslint.enable': true,
		'eslint.format.enable': true,
		'eslint.lintTask.enable': false,

		'eslint.run': 'onType',
		'eslint.runtime': 'node',

		'eslint.codeActionsOnSave.mode': 'all',
		'eslint.experimental.useFlatConfig': true,

		'eslint.validate': [
			'mdx', //
			'markdown',
			'javascript',
			'javascriptreact',
			'typescript',
			'typescriptreact',
		],
		'eslint.options': {
			'overrideConfigFile': 'eslint.config.mjs',
		},
		'javascript.validate.enable': true,
		'typescript.validate.enable': true,

		/**
		 * Stylelint options.
		 */

		'scss.validate': true,
		'less.validate': true,
		'css.validate': true,
		'stylelint.validate': [
			'scss', //
			'css',
		],

		/**
		 * Markdown options.
		 */

		'markdown.styles': [],
		'markdown.preview.fontSize': 16,
		'markdown.preview.lineHeight': 1.5,
		'markdown.preview.typographer': true,
		'markdown.preview.fontFamily': 'Georama, ui-sans-serif, sans-serif',

		/**
		 * Prettier options.
		 */

		// By default, prettier ignores everything in `.gitignore` also,
		// which we donâ€™t want, so explicitly listed here; {@see https://o5p.me/nfS7UF}.
		'prettier.ignorePath': '.prettierignore',

		/**
		 * PHP options.
		 */

		'[php]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		/**
		 * Ruby options.
		 */

		'[ruby]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		/**
		 * SQL options.
		 */

		'[sql]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		/**
		 * INI options.
		 */

		'[ini]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		/**
		 * Properties options.
		 */

		'[properties]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		/**
		 * XML/HTML options.
		 */

		'[xml]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		'[html]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		/**
		 * Markdown options.
		 */

		'[mdx]': {
			'editor.wordWrap': 'on',
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'dbaeumer.vscode-eslint',
		},

		'[markdown]': {
			'editor.wordWrap': 'on',
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'dbaeumer.vscode-eslint',
		},

		/**
		 * SCSS/LESS/CSS options.
		 */

		'[scss]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		'[less]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		'[css]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		/**
		 * JS/TS/React options.
		 */

		'[javascript]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'dbaeumer.vscode-eslint',
		},

		'[javascriptreact]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'dbaeumer.vscode-eslint',
		},

		'[typescript]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'dbaeumer.vscode-eslint',
		},

		'[typescriptreact]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'dbaeumer.vscode-eslint',
		},

		/**
		 * JSON options.
		 */

		'[json]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		'[jsonc]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		/**
		 * TOML options.
		 */

		'[toml]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'tamasfe.even-better-toml',
		},

		/**
		 * YAML options.
		 */

		'[yaml]': {
			'editor.tabSize': 2,
			'editor.insertSpaces': true,

			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		/**
		 * Shell options.
		 */

		'[shellscript]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},

		/**
		 * Docker options.
		 */

		'[dockerfile]': {
			'editor.codeActionsOnSave': {
				'source.fixAll': true,
			},
			'editor.defaultFormatter': 'esbenp.prettier-vscode',
		},
	};

	/**
	 * Composition.
	 */
	return {
		...baseConfig,
	};
};
