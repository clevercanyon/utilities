/**
 * Babel config file.
 *
 * @since 1.0.0
 *
 * @note Babel doesn't know where this file lives.
 * If you ever need to call Babel directly be sure to tell it.
 * It's not an issue at this time because we don't call it directly.
 *
 * @internal `assetsDir` is a relative path, as given.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * This file and the contents of it are updated automatically.
 * - Instead of editing this file, please configure `../../../package.json`. See instructions below.
 * - Instead of editing this file, please review source repository {@see https://o5p.me/LevQOD}.
 */
/* eslint-env es2021, node */

/* @formatter:ignore
-----------------------------------------------------------------------------------------------------------------------
Example `config.c10n.&.babel` in `../../../package.json`:
-----------------------------------------------------------------------------------------------------------------------
"config"          : {
	"c10n" : {
		"&" : {
			"babel" : {
				"config" : {
					"presets" : [ [ "@babel/preset-env", {} ] ]
				}
			},
			"babel:./src": {
				"config" : {}
			}
		}
	}
}
------------------------------------------------------------------------------------------------- @formatter:/ignore */

const path = require( 'path' );
const mc   = require( '@clevercanyon/js-object-mc' );

module.exports = ( srcDir = '' ) => {
	// Initialize global data.

	const globalData = { config : {} };

	// Get custom data by file.

	const customDataByFile = {}; // Initialize.

	try { // Try `package.json` data.
		customDataByFile[ 'package.json' ] = require( '../../../package.json' );
	} catch ( e ) {
		customDataByFile[ 'package.json' ] = {};
	}
	// Merge custom data, that's global, into global data.

	for ( const [ fileName, fileData ] of Object.entries( customDataByFile ) ) {
		switch ( fileName ) {
			case 'package.json':
				mc.patch( globalData, fileData?.config?.c10n?.[ '&' ]?.babel || {} );
				break;
		}
	}
	// Now establish a configuration for this src directory.

	const absSrcDir = path.resolve( __dirname, '../../../', srcDir );

	const srcDirConfig = {
		root    : absSrcDir,
		presets : [
			[ '@babel/preset-env', {} ],
			[ '@babel/preset-react', {} ],
			[ '@babel/preset-typescript', {} ],
		],
	};
	// Merge custom config data that's global.

	mc.patch( srcDirConfig, globalData.config || {} );

	// Merge custom config data for this src directory.

	for ( const [ fileName, fileData ] of Object.entries( customDataByFile ) ) {
		switch ( fileName ) {
			case 'package.json':
				mc.patch( srcDirConfig, fileData?.config?.c10n?.[ '&' ]?.[ 'babel:' + srcDir ]?.config || {} );
				break;
		}
	}
	// Return config.

	return srcDirConfig;
};
