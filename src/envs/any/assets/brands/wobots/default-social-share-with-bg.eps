%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.2.1 (Build 21D62) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1200 630
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1200 630
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: WXSPYP+Fredoka-Light
%!FontType1-1.0: WXSPYP+Fredoka-Light 1.0000.2.0000
14 dict begin
/FontName /WXSPYP+Fredoka-Light def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /W put
dup 34 /e put
dup 35 /quotesingle put
dup 36 /r put
dup 37 /space put
dup 38 /p put
dup 39 /a put
dup 40 /s put
dup 41 /i put
dup 42 /o put
dup 43 /n put
dup 44 /t put
dup 45 /b put
dup 46 /u put
dup 47 /l put
dup 48 /d put
dup 49 /g put
dup 50 /c put
dup 51 /m put
dup 52 /hyphen put
dup 53 /h put
dup 54 /v put
dup 55 /y put
dup 56 /period put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -70 1 index div -252 2 index div 1212 3 index div 950 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000000046670676D00000000000000A000000004676C796600000000000000A4000014C668656164000000000000156C000000366868656100000000000015A400000024686D747800000000000015C8000000646C6F6361000000000000162C000000346D61787000000000000016600000002070726570000000000000168000000007000000000000000000010021FFFA03A802B2002E000041000000010100000100000001010100000001000000010101000000010000000101000000010000000101010000000116FFF7FFF5FFFAFFFEFF2CFFFB00070010000B000E000A000300B900AF00030007000C0008000A000C0007000100B100B90004000A0010000B000A00090000FFFCFF2CFFFEFFF9FFF5FFF8FFF8FFF5FFF9FFFDFF4EFF4EFFFDFFF9FFF5FFFA00000004000900080278000F001100050004FFFFFFF6FFF6FDC702360009000A000400000000FFFCFFF9FFF9FDC2023A000C000B0002FFFCFFFDFFF7FFF1FFF4FD87FFF9FFF7FFFC000000000004000B0008023BFDC5FFF8FFF5FFFC000002002DFFF5020301D200220032000041000001010000000100000000010000000001000000010100000100000001010000000100000001000000010000000100000001E8FFF2FFF4FFFE0000FFF5FFD1FFB5FFCBFFCFFFADFFC2FFDD000000000023003F00530030002F00430033001500000000000D0010000A000B0005000000000000FFFBFFF4FF2B0030004E002E00000000FFD0FFB1FFD1FFC9FFAEFFD200000000002E0054FFF60000000E00130043FFEDFFD1FFDD000000000025004200570033003100550041002500000000FFE8FFD6FFE400390014001100000000FFF9FFF0FFF2FE6AFFF4FFF1FFFA0033000000310054003600390054002F00000000FFCEFFABFFC9FFCBFFACFFD00000030043FFF4021302AE001300230034000041000000000100000000010000000001000000000100000001000000010000000100000001000000010100000001000000010100000136FFCFFFAEFFC4FFDF000000000021003C00520031002F0050003C002200000000FFDEFFC4FFB0FFC80032004F002E00000000FFD2FFB1FFCEFFCFFFB1FFD200000000002E004FFF64FFF6FFF3FFFA0000000000000005000D000A000B000C0006000000000000FFF4FFF500000022003F00570036003600580040002200000000FFDEFFC1FFA9FFCBFFCAFFA7FFC0FFDE00350000002F0053003700380054002F00000000FFD1FFACFFC8FFC9FFADFFD1FFCA00000006000D000B027D000C000D000600000000FFFAFFF3FFF5FD83FFEFFFF2000001002DFFF501D601D20034000041000000000100000000010000000100000100000100010000000001000000010000000100000001

000400000000FFEEFFE9FFEE000000000017002E0041002A01A10010000C00000000FFFBFFF4FFF5FE58FFCDFFB0FFC8FFE300C800000021003E0055003400350055003E002100000000FFDFFFC2FFABFFCCFFBAFF97FFC600330000002E0053003700360051002D00000000FFD3FFAFFFC9FFC9FFAEFFD200010041FFF501E102AF002A000041000000010100000001000000010100000100000001010000000100000001010000000100000101000000005EFFF5FFF3FFFB0000000000000006000D000B000B000D000500000000001A004B00380039005A0035000000000000FFFBFFF4FFF5FFF5FFF3FFFB000000000000FFE0FFC0FFCFFFBDFFAEFFFA00000000FFFAFFF3FFF500000006000E000B027D000B000D000600000000FFFAFFF3FFF4FEF30020003100000000FFCDFFA1FFBCFF15FFF5FFF3FFFB000000000006000D000B00EB00310048002800000000FFB4FFC0FEFFFFF5FFF3FFFA0000020046FFF5009102AF00110021000041000000010100000001000000010100000001000000010000000100000001000000006BFFF6FFF3FFFB0000000000000005000D000B000B000C0005000000000000FFFBFFF3FFF5FFF2FFF0FFF90000000000070011000E000E0010000700000000FFF9FFF0FFF500000006000D000B01A2000B000D000500000000FFFAFFF3FFF4FE5FFFF5FFF3FFFB026D000000080012000E000E0010000700000000FFF8FFEFFFF1FFF3FFEFFFF900010041FFF500EC02B1001C0000410000000000010100000001000000010100000000010000000100000000CEFFE4FFD3FFDEFFE9FFF50000000000000005000D000A000B000D0006000000000000000A0015001F0014000C000D000600000000FFFAFFF3FFF50000000C001800240030001D0208000C000D000600000000FFFBFFF4FFF5FDF3FFEAFFDFFFE9FFF500000000FFFBFFF3FFF5FFF5FFF3FFFB000001004BFFF302FF01D40046000041000000010100000001000001010000000001000000010000000100000001010000000100000001010000000100000001010000000100000001010000000100000001010000000066FFF6FFF4FFFB0000000000000005000D000A000E000C0000000000090021002A002D001500240039002C000F0017002F003B00250039004B0026000000000000FFFBFFF4FFF5FFF5FFF3FFFB000000000000FFE7FFCEFFD8FFD6FFBEFFDA000000000000FFF3FFEDFFF8FFFAFFF8FFFD000000000000FFE7FFCEFFD8FFD6FFBEFFDA000000000000FFFBFFF3FFF600000006000D000B01A4000A000B000500000000FFF4FFF2FFC4001500200017000C00000000FFE4FFCDFFDB00280033001900000000FFC8FF9CFFBCFF1FFFF5FFF3FFFB000000000006000D000B00E10033004D002B00000000FFD5FFB3FFCDFF1DFF



00>] def
/CharStrings 25 dict dup begin
/.notdef 0 def
/W 1 def
/a 2 def
/b 3 def
/c 4 def
/d 5 def
/e 6 def
/g 7 def
/h 8 def
/i 9 def
/l 10 def
/m 11 def
/n 12 def
/o 13 def
/p 14 def
/r 15 def
/s 16 def
/t 17 def
/u 18 def
/v 19 def
/y 20 def
/period 21 def
/hyphen 22 def
/quotesingle 23 def
/space 24 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-70 -252 1212 950} readonly def
/UniqueID 4074573 def
currentdict end
currentfile eexec

906CFF99472055F45BD916FA349F306E270B4013C63E49CCA4AE108289EF183BDC4BEF1A9FE5BC702AEEBFD1588B93C35A3F4269219E979411A4A90483318BE2295BD41CAC86E0982653865DAA6909AEBEACF18E84202E132B62E2ED2E8C22217E09F30B25D8F348E8CB9135F64C02C25FC0D5B036C79C185636B8A1227CAD1A9AFDFC8A3DE38E671F5C0C39E340B7836709988573E7F09280CD30C6D2239F241FC09A1D09A1AB7F40E4875AA70A9C93F464CCBAA52C471376DD2C9A0EE0BB3D13E38216941D7D18BBA8412B8EA072B16EF9316C2281EC328B6F9EB598FADF8ED9E9020AEF274E13B610A167C27D8D54A93FB10A3ABB7F461DC7700167B8CFC5E952D807C579677D4595D64092751C9D2A373EB75A5F5A7CA041A2F4C1C0BFEFB90CE0098E6A89BE117FD461B74BF93BA365CCDC49485A8656189C684490DB4C8931F4A3223CB0087D16E66FA4A87314F21FAE9C9342B428FA3298B449890008C5D5D8CF866999433D4EF3777920AC73955D0BB806A3FC6193CBC942556D72170ACDC86F27932C19616DF8822B91CD5DCED8B1342FE372D9DB23A3B7299B004A19287BFE592199EF1DED481DD7638F3BA5DC10E33FE99E09FAC775A5D248389A2A80F95FA0C31A8E8BF0455F2742E7EC1E6E9A0B2306D598E0CBCE25DDF7688E9759225BA782B97250C1586A8922ABA4901EBAA721856F181714FC9ED66AC32A85EB1005D8A6918A345939F5CF561388303BE45B29F18262532A8A57DF6B3AE1D3DE9D6D1BB478506162AD4E1DC6AA4E2FCE62444448682A1A3DD62BD6492CE9A4274255E0EC6DF1B0388B8D1642611CC84E9B877F097B60F44A75DB5C2862F19DC7BC9BFA2AD7ED2D3A87A6552381F4F2776CD907C1A4E2AEC9E254BA85C4B61F0BB78C414600B4E2164ABEBC41AC6E8CF1D7992FA856AEB57671A6924959B9834DC8CB07E484577B3E91ECA4F5048DD87C3EA63DA3220B822431872BEE73B8D6D45A8870F48DDA43D1A0916B70F079DE2D7BE5218C06EB3B2CEFA5553880C7915BCE9F6B5C23F454F8C57E2313425BCF6DCAAAC4CF634461801E72FE66C75AADBFC98C7E5C100F1CC0AC74A2C44C91B02D28021CEEB8D8F4370150098F8CF7CD6F94A714DE45A92425328ADC027DFB15DE9358586F44FF50F427AAF546789F3A5EA06F01C24382819CA750CEC8F1D47ECDDC70AEADAC30E902486809194303A4C8ECCDA517570244AB88A49A5454F9E22A742731E03C9E6EE753442A4C644408AF741301A118329624DFF84E4AC0A4EDE3FA2F993C255FACCC92EDA5FC7F19DC8068B05D141664C9491766B827C9B2A16E2AB7A368B83F38DDAF04DD3B94C032A547E7500B2C9BB4D4D78D2DD35A3BDD4879D25988ADABEFE79343C19E129B6CD5E776A4DB018093067534814B31D12B96434C09B25F241FB82DEE255EB8EA
09DB018F6D108BEDCB6A6AF70463AA91983B6CFDD52DF6EE943A185731BCCE4AA3E1EF74AA6DE50B649DAD9231E9CE4108738EBD7C12021B00D4A6F96C17735ABC3AF43A3406F4039FEC195AFDB27B21EB3AEB21B1FB8FE2BFF539834777744A6FC1AD0D31A31C162107AAE4CFB2F7D78C6485EB1EBBED5BA77B4E0E0F72C3A6AC840B0BE5A981D2D00F024C202B887D8EC0852906B9A89ED3A7621A90644D0880FC35B618C1A37DCEDBF001EB05BB1D31C95AAD0F06DDBF015F095DF855E9DB7D02449654948F2999A9B7FD5ED79BEE78AA6EBA80BB670B122C5F037AFD784CCAAFBC78406661065A0633DBFB1B5B9716135201A646B45FD86CD68CCDD899D11A2258D3084EDC6C6097C5591275805113D698D24EC4FD854C0A09F34DE597745ED2DA1B04FB4B9D30A3A5510F368CD7C0640621578C932E80A77FBDE9D67656AFD0B25A7AEAF664427F530F35853310465352516DD8594FAC7D9397A110B2941EC603C135D7103049804D66239C2998EE04E9224D9CD1C2CDECEFDCBE96C5C5BF67E79EAEB69D96A38E26F4116E0D6C0F1EFFBDB62FEB94BD9ED344AFE36FB3BC6DBAC78D23710E6E1473EA8C3C966AEAFA4D592366AB8D933F80A8F6AE18BD23E1023F6BF70C22EE8FEC5B0EB09F92ED264EAF6262510D1531525C5B612953722913041F0CD54333AFE11EF4F00689263B89136AF69042DFFDC9ED71A72ED15DB4BF296CFEF97E83C92677B3E55B64A703E91E1B045086E5E50CA40D2E794D66F416F1200C2ED0BF36A0C11E09879E17C636757553EFD66B9B2C2A5E9EB3AC58F5B885A3A6F18A088A10A452F7D8CA587B4BB84B91D608D1D004C4A50155BE21133CC5D4388DA73DB1A03125AA11E43397391FF5FEE828E8EDD1CB720DD9E406902D4234E1CC2EB5AF307A9299ADF09CEFD5A53C60D97EE968F6024D9DEDA9E8E2FBCDBAA684D89B3B3DA5B084A8AAB5064D933CF9AB60C9D897EC94F3BC291D8DE9AF4C0549BC8754FEF3575DEE52B951451DD98FB2BD7B3378090F068A73FFE9932E1A78C206C0C43FABE1663501BC6CDA3B760E1BA7273F1DFDDC645801979D41BBAC58512E03C48DB45E485F6D0CDDA5EF610F467A5E8A653F9ABA9C55676C71AD96048F7212435B072ED04A1BC8D1CC9EE397ECD85F004AD79C4737A557382035411C0CE245B9E4B3E90765D534B0672B56133467275A93A8654C4094D510308DC34EB821639968AD2A3514CB788F30C48D8A9B40ED63DFB5DC701FB0785A9E5C61479F01D10ADF12279EF68FC3428B38D5830CEF3B2B230A85EC038359BFF738E8CD28D0A1C854566D706E1D7B34BF081453DA58231F22C6D780FACFF62B5A6EE7F929B9BC06BFE85102F829164D51D20572E49CD204C060BD76BA4B0C6460ECBAC4B144579851C9EAF62A061690C163D41287C9C3599B860D13349C
478C0C197A01A5AAAFC31B6060D164FA2EDF397BFCC797F56E73504FAD7EA189E23B5D7F511D67F06144F648AD2A68488952B5C2B4F69CB1DB3F5DE6EF09074BB76702DF23D2E82194D072BAB005E2111EADDD7010219A9960FA7AE74940EDAF520162E4F33C8D469FE3A5E246A368C19DFEE2F1CA7C80B958FAD8BC6B6F15A6154068697368D8157EE19EA3E1E6CAB12D84DA847BDC76B4B5B0738B2EA3ADDA2518555E252186DC8F8FB746D7C89E703C251B6D7EFECBB8CF281203EE647260779FE5AE641455D0A8277782DFD9E6D5CACE6AE6EE44F597F295B6A977B81AAEC741105A8E021AA3629D8C4A94AE7A581E8BC78260D2A1510021065FB5BE74AE283FC082B0B702F70DF10B4F838CE890500E26B967AA1ED500BE701D5954FCB2E2C8F88227CD5E880E1BBC0A154F6681B1741A3702BA6742A523D1923BAC0E3F3E49CDFB016A3CCB1D1018A200690FC1B483F1B57382FCD409045A61615D9DBB14DF46B41CF2F9B20F601E5DB724244B2B576DF2CD89BCFEDDF4CC93CF9276DAF30ED3027759C7A87C709CF1B6F4657F075FF3668A3618354EB5069F1678180262B17A953C99FF6052E8E50D72DF58BF59A082BE73FB35B060A247BE418A9237C65E929FE608DA954EAE20BC909AF1A65F17EF3EC6336C2377A7AEBCD892732DCD784CCE27FBEF9F2F5176481A8EC6E5F506F820794B09CE0E27D8979FC37EB1F07E76DE7EBD1EBA8CB3FCC4A2A1661E43EB691ED2DDF6EAB2DFFC1988F3D0D24BB8EF188A2D61D120CA480DBF9E6FD626E63E123BD3ADBFDEC1845C2538F6AB4A74C4085783325253BA1AEA33305F8D36B0BD567FACB84A4B98135F9432DCF2C2FB924B912B9AF48EDD8DFB9C105693FB2C5401422DB618BEA02F5C81FD6BB0E1781EB46864611608FB04F4A750D8DFACC0FF4C5B5B7DD3D4947D5AE0FBB4DD579563A445A32ED54B5CC3F8B4E3ABF448F47DA85BFE1965334B4E748E79C3B8535F38F48D1E2F86B72BBE74854962798672AD11A3A01EDCA92B75C6BE899164D95783D401314C2B924B10007A43A41762AB05CC54531C5617CEAB44B7AE974BB9D8A052A50B785773996E96B4CFF5D936E6E8293573D190ABC792FB3B6FD592374D7F12F808B7898C62CA8F638F365E76E4E1B45341FBEB4C811D054BCD8D163D70950F1DD95B719A02CB40A24AB36E7BFC7A78E4797288EFE724EEF15860D2A56F2378AB5572288AFBEF50F45454EFFE54555C791D036F0EDB546D09A705982000CE0579B2FF35E3034C151B2FC30FF1DCC690D137912B0A91882EC49A8F2411EB4D51FE1A3F60F8481EC51D83A164D7461BF11E9F7B5306093824158F9323FBAF636ACBD4813F8DC23119C0B920897A7C2AEE78561752C47C01DD7119D350B6FE943EFAFE75A0E3A2DAD5320C50EFF85AFC6C6DB8CE42C97E3540155F68C1
22B63FEC55C22FDBB286EC8A8FB3A48EEF08D7027EC7AD9817C6FFED2BF69365894FA92975A5942D51D293D3177E9454D7FDF106A77392FC5AC623624D565DF7C177EDEE989C98217B0CCD99B5C56CF4D5B325D8AB4A52557BCA63316F83DA15B56223DC472BAA577B4531253B927E51098093DA92C550618FE2F7918676798F3F9AB4D54D829FDF6F4693A8ADBD31038E97197DE990875469AF94E78A372472FF9AE381A8EEE91B03CAECEE56508622302B0CA8BA7E1461387B2FB03774C32E77C15BD89610A6536793D618C3229E3B55D1187F7F7BE5BBC550B7459478FF6CF630E23EDB4ECBA97BADD1BF97C6EEF04DBE7430B787F058129008E71E1212925CF67ADD3F2160B986140F8E611F3B05ADEBF273B1E9FBD4FB0012D40A89CF9DB69E74C307E0ED226FB15E7834A5B2DC5E0A68B5694AF0928F1817111440F3704A7C77C2030C312402D0F3A17959EF84EA0504B4924F6321DA4F9301ED2D68D1346C8EE366796BCD5BEA55612EA4131A12E9E20F05C451F698BDBF180A66D8D754A50A7E618BE2F626BF82904DF6B9AD379282B5C0443301075604CAC6AB5FF11083642FE88FE3B2E717FC2015F93034714BCCF18B733BC3CD967AD3173BB671CCFE8E68B198473BEB4072C5DF4F44E777A17141DA73FA5CDC56787D368A91B2F7ACDC4A9199E1A6B8C5BF88838E10B5F5F75AF7E32B41E9A3C3A89C8B44ADD36A8C1B73A5AD86AE62FD75A47289F33173C3636E78A0BEC66C235B5DB89E671BE4961F58962229DC8E27B11675233667F61FBC93D30C5116E4793B115F6F0E724C9D28EA0B1E80A916135AF17A826DEB2775038BE33E11FD241D77DCB06C8E3E0A95086908F340E7490E7BD0D9A6AC4441A7C61B74CD28422669BE27DB5BCD3F4857469CF0664620A1DC34E3D081CCF311B6DDB59C2540F3097B0A122EAF633564BADECD4A16BFB94E9371D2CEEFEC1B6A7768CEC28EDD9DB1FE50EEA07C23931331C8030B43F1D0944AE338FD4E8A8DC9CA903859562743F5C020189F64BFD796573F5CEE9B5501E9CBBDFFEC45091373917630E14664CB18D5888370F9FADAF9BB937C58DA71824B55E3A3CC5B37A90B9BDAF209C8D5082183D22EBFFC0F2B1655BD336B3E9870D57F0EAB9A0724F8AD9E187C62DEED6C7FD00D97F7FDB828A0852ED7D9AE57344BFE25C6A246BA12D34D885C5622F2FC0F988C1D844C1C5B883E1D8A72F9D450C2EA83865AB6D3E3456734EB91C67B10071B10AC010A7FDDC087B706631A128CD90EE2D83030A886AA0D8296BF94D42A4CC6251319A0E307E625A07F568B1B3695F52484F18B30C78F7D1B064A185A98669ED029E3A1EA5FEBFA3BDCBF6B2D832917085D83ED49C609A14F6E9CF0A0E8EBBF800E4EF8041D32E83A16F2C5044455B898F11138D65F3E069012800CCCCF0B9D5C1152DD0ABE
3326F8D5BBE4269112EA021C47D644B3E3C9F82B80EFDAB3226A0DFE9E409D29C2C68C1AEDA5452B2185393E3206EB06A9B78FD25AA93CF9CDA90F9B4B09A3FE88BFC268476CB2085D76B60DDA25CE12F0E951E520EB7F9400714BA0EF82486236DA3D037318A6C508D1065ADB7FB60173C933C54D753968771FB073B18AEFC519CCE5A85C038D3B1C3CE7E729A9A8701DCC935738FF7A9A67E7B7A6A76F91FBA612629A5E95C777803DCF5591CF1D0F0632AAADCEC487EE701A356028E68353FC6A192CA482CAAC0EC3A9CB153C04CB6B41F25E21FA6A081C8B9806F4BE1FE83CDB90AA8DEC49BD52FC48359915281A4A9D41E00C19BA64A56FD4474AD94E3B08B40D6175C85B09BFE290E32F4528619849B6C0385A0E232D1F6698F358BE1CD2191A42BDBB3F09F719169D99E9B04888125F87D608010EA7CD2827ECCA6CE405CB2971CB65C966189C6E6E30245562488AC7E8981EC4308DA18BC9540EA8058EC1505A22E8C8C50A7E60357068D3973BA99DAA6E84316A645169CAB7E7B893289DD76693B3AD5206DFBCA166CF7680DAE51D90A90CBF8DD4174277BA5FB392FE27CEA308D1535EEC3A18D06F4E5F780497F83A04BA3B1F174D5994BF76643E5EEE5067656D98814511CCDE9E803011056288E1FBAA72E170BE01818278007B28D38A1BFFED601E0A9880BA076BC47C75ABAF8FB2445701F0631A150E829C5E5C41DA5C52B5352E57F14F0CFBB6D88F44F6B5D223A86A2BFDA8BC5E6B703D694E827BECB426F108E1374793D33248BB086E3724EDE36ED79910465E2AAA57B75715DAC134AF09CF09EDAAAE3514510880453DD87DB888016B81BAB9FFF436F15BF413F9A567D611A95A72C87318A90C3D2040CB84984D8D2D339EC48B37A13A25E340FD148777A9EE6AB07FAEA421F4AE3E395A04ABDA2ACF3E6F602F654E5C8B3D57816A9A3381FD778C084534A039A8889C55926EBE61440D833CC52BB2E3E50234B79D3336BF9EC3FE5F3515C847EC1A445B13E0779BF29AE13636BFAC983119C76E571AE418745AB5FDE6A63193D20E949BCD21997954C01D9838F6A06489CF932F3C8A46BE3E37790EF6D4D9AAA4E2AF7239DDDA5CE003F1206AAA53871AED077B91EF69A24EF8D683A81FB09D12BCEF1AD74042F51F622BFA364B3245606B130DA0577777C518B2407FA20B1CDC019971E74B05964205142E901D039ECEDA4860C2E05459CA41CCB2D186FCFB419D92906FF2A02D7707E5FC161CA2D31BC7768F1900D1BFE2D7148A74D1888997E476224CEA7B7F6058FAC10B2AB93FE19BE3BF62B6011C0EDA75D128D2D969D9E2F1C43921C595559F7B746092F857A4D96E81E5291F77CB2E4CE730E5152AD1302D16F7C647AF0D0F74B3E2ACE5A79482028B02C787351AD4E623D45DB9323EEF43EED393B687CADF7A8743CA14EF
46433804823B51165EBB9E4DF064342815214FBC103B89899D5E442C99542F3B856C170B76EA9FBA27F7ABA89750786CFFA5513BE53D00DED79321A6E80AC86FBB0880E3E4B56D0E44BC9E614F2BEEF1C0EDA5A76A685E3AB3364976FDB225EEFAF6929FCA656A7E3126EC0CE0BEF05EFDEF40925B82E58103254613A3CD2B65C6B81F03489143541EB3DB7F319731297EDE310E82836BCE8D0BB07BE9E57E5C82F7A5CA6603D676906C58568556278CA55C68E0AB68AE5452CABD6A001EE13629C67763DEFC70CD56E3EC01C3D4E553FE0835BF45FCBFEA06590B361E741313CBECBA6097A1C4B9CF73E6A05110503A03F94DA31828764ED47C0CF2E9D0EEF61279E8EF9FF46095C5B5C9AB8201AB357F35996D416AEAB2B294BEF487C113A8203CF3E72D235E32645F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/WXSPYP+Fredoka-Light cguidfix
/F1.1/WXSPYP+Fredoka-Light renmfont
%RBIBeginFontSubset: GZONYU+Domine-Regular
%!FontType1-1.0: GZONYU+Domine-Regular 1.0000.1.0000
14 dict begin
/FontName /GZONYU+Domine-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /quotedblleft put
dup 34 /quotedblright put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -200 1 index div -240 2 index div 1366 3 index div 900 5 -1 roll div]cvx def
/sfnts [<




00>] def
/CharStrings 3 dict dup begin
/.notdef 0 def
/quotedblright 1 def
/quotedblleft 2 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-200 -240 1366 900} readonly def
/UniqueID 4378247 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB28024022816FF807CAF9CEF58EA120E680185C875EBD525A303749E656DA3FBFC0D980F1B5B581101D8967339D5961C55018A28C6F5A1EA7DE624997A49E26D3D04866845F59799ED01F818577D4782E931C70426AF0B59EAA4DA85E45FD5A895379BC666DCB9A282313EB034EF1BEE6B0E5AEEBC49A9FF69453F2E6328675B4531DA395DB97B85BD6FFFFA75110E9D95EAFA7D15FBFD7A714E955D550FB5683A2B39CA15A07CF2E9E63D38D0F0B81C277377EAABCC66D6122F745BB879F88E11FAC9DFF09D0E3E83CE148DDE695E8E457AE41DB9BF49B974867E75B640656178F41B2BF1C4431A741097FA1D7453D15EAE64EE60566CF2EE43B41DAA5E7ADB02011D1E5D4DB3B3731C4858D7C25801BBA4C950F416E74AA1F782CC1475099ED29193F83614AFED185564EDA3316F1958A5573AD85787663A871F31B92C3CE66D32219B7FC8434C59B62152EB1BA38CEE6F58C698B48564F5FE70688136FC027D61215B0454B401B39830F2BFC33FB567393EE96D413C66488B4A2E893016E614D267990CADCD3D7EEE23D6CEB999753A4B782377160ECA2B0AFAFAE121F748C5E6323226D1800609B94EC26D00B737160B67F4654461D9EAD0795D3EB7CE542CB73490A7D352F8792DAC8F843A435AA1AB4A07ABB1AD7BCC88EC05EE1CC6D178C4B48C6FB0613F9AD3DFDD6A2096761E5763E84D671DBB309388C29175BADCFCE9D6930D24F65A605C6EC222912C3A5EBF6DAEDB32515DB7E54A0665278825D3C0452B60
D5D2819203A9B6B76D6CCE030D9063E97E6AD43BDF25E5E990FFB0BA1B1C708214FDD5E6698613CEC1E3D69387FB0E34A244FA0914AF973707AA0C14596AE22EDE55E50A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/GZONYU+Domine-Regular cguidfix
/F2.1/GZONYU+Domine-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 1200 630 rc
0 630 m
1200 630 l
1200 0 l
0 0 l
h
f*
1 1 1 sc
1 0 0 -1 153.5 546 cm
/F1.1[ 60.349998 0 0 -60.349998 0 0]sf
9.7772245 59 m
(!"#$"%&'\(\(\)*+',"%'-*.,%-.\)/0\)+1%)[ 58.599850 32.709700 10.681950 23.958950 32.709700 15.691000 35.304750 35.003000 27.761000 27.761000 12.975250 33.796000 33.433900 35.003000 21.605300 32.709700 15.691000 35.003000 35.666850 33.796000 32.226900 21.605300 15.691000 35.666850 32.226900 12.975250 16.354850 35.968600 12.975250 33.433900 34.459850 0.000000 ] xS
31.6541 132 m
(1$"',%2*33'+04/\)+"%,**/\(%,5',%)[ 34.459850 23.958950 32.709700 35.003000 21.605300 15.691000 30.778500 33.796000 50.512950 50.512950 35.003000 33.433900 35.968600 26.131550 16.354850 12.975250 33.433900 32.709700 15.691000 21.605300 33.796000 33.796000 16.354850 27.761000 15.691000 21.605300 31.744100 35.003000 21.605300 0.000000 ] xS
155.94493 205 m
(\)+2$"'\("%&$*0.2,\)6\),78)[ 12.975250 33.433900 30.778500 23.958950 32.709700 35.003000 27.761000 32.709700 15.691000 35.304750 23.958950 33.796000 35.968600 32.226900 30.778500 21.605300 12.975250 31.623400 12.975250 21.605300 30.718150 0.000000 ] xS
0.75686276 0.75686276 0.75686276 sc
1 0 0 -1 56.993576 577 cm
/F2.1[ 100 0 0 -100 0 0]sf
0 90 m
(!)s
0.75781161 0.75781161 0.75781161 sc
1 0 0 -1 1082.5054 360 cm
0 90 m
(")s
Q
1 1 1 sc
q
418.08817 55.392879 m
420.54239 55.392879 422.68985 56.159828 424.53052 57.693722 c
426.37119 59.227619 427.47562 61.221684 427.84375 63.675919 c
427.84375 63.675919 l
437.78339 115.03077 l
438.15152 117.60771 438.51965 120.12331 438.88779 122.57754 c
439.10867 124.05744 l
439.4032 126.04047 439.69769 128.06276 439.99219 130.12431 c
439.99219 130.12431 l
442.20102 130.12431 l
442.69186 127.54736 443.06 125.03178 443.30542 122.57754 c
443.55084 120.12331 443.8576 117.60771 444.22574 115.03077 c
444.22574 115.03077 l
454.34946 63.675919 l
454.59488 61.221684 455.63794 59.227619 457.47861 57.693722 c
459.31931 56.159828 461.46674 55.392879 463.92099 55.392879 c
463.92099 55.392879 l
484.53656 55.392879 l
486.86807 55.392879 488.89282 56.037113 490.61078 57.325588 c
492.32874 58.614059 493.43314 60.362701 493.92398 62.571514 c
493.92398 62.571514 l
516.38025 146.32225 l
488.95416 146.32225 l
476.43759 87.420631 l
475.94672 84.843689 475.54791 82.35878 475.24115 79.965897 c
474.93436 77.573021 474.53555 75.088104 474.04471 72.511162 c
474.04471 72.511162 l
471.83588 72.511162 l
471.46774 75.088104 471.03827 77.603699 470.54742 80.05793 c
470.05658 82.512169 469.62708 84.9664 469.25894 87.420631 c
469.25894 87.420631 l
459.50336 138.03922 l
459.13522 140.49345 458.06149 142.48752 456.28217 144.02141 c
454.50287 145.55531 452.38608 146.32225 449.93185 146.32225 c
449.93185 146.32225 l
432.26135 146.32225 l
429.80713 146.32225 427.69034 145.55531 425.91104 144.02141 c
424.13171 142.48752 423.11935 140.55481 422.8739 138.22328 c
422.8739 138.22328 l
412.75021 87.420631 l
412.38208 84.9664 411.98325 82.481491 411.55377 79.965897 c
411.29974 78.460228 l
410.96597 76.457573 410.65182 74.474548 410.35733 72.511162 c
410.35733 72.511162 l
407.96445 72.511162 l
407.71902 74.965393 407.41223 77.45031 407.0441 79.965897 c
406.67596 82.481491 406.24649 84.9664 405.75565 87.420631 c
405.75565 87.420631 l
393.23904 146.32225 l
365.99704 146.32225 l
388.45328 62.571514 l
388.94412 60.362701 390.04852 58.614059 391.76651 57.325588 c
393.48447 56.037113 395.44785 55.392879 397.65665 55.392879 c
397.65665 55.392879 l
418.08817 55.392879 l
h
572.3526 55.392879 m
574.8092 55.392879 577.73022 55.737408 581.1156 56.42646 c
584.50092 57.115517 588.02112 58.328854 591.67609 60.066467 c
595.33105 61.804085 598.9411 64.185822 602.50623 67.21167 c
606.07135 70.237518 609.27698 74.087242 612.12305 78.760834 c
614.96918 83.434418 617.26099 89.05172 618.9986 95.612717 c
620.73627 102.17372 621.60504 109.85818 621.60504 118.6661 c
621.60504 128.55255 620.45166 137.61511 618.14478 145.85382 c
615.83795 154.09251 612.46759 161.19278 608.03369 167.1546 c
603.59973 173.11642 598.16217 177.74509 591.72101 181.04056 c
585.27985 184.33604 577.9549 185.98378 569.74615 185.98378 c
561.89691 185.98378 554.39221 184.366 547.23206 181.13043 c
540.07184 177.89487 533.3161 172.95166 526.96484 166.30078 c
526.96484 166.30078 l
536.04242 158.03212 l
537.48041 159.88957 539.33789 161.79196 541.61475 163.73929 c
543.8916 165.68661 546.46808 167.45419 549.34418 169.04202 c
552.22021 170.62984 555.38086 171.93304 558.82617 172.95166 c
562.27142 173.97026 565.91144 174.47955 569.74615 174.47955 c
574.65942 174.47955 579.06342 173.73059 582.95807 172.23264 c
586.85272 170.7347 590.29797 168.68251 593.29388 166.07608 c
596.28979 163.46965 598.85126 160.39886 600.97833 156.86372 c
603.10541 153.32857 604.84302 149.49382 606.19116 145.3595 c
607.53937 141.22516 608.52795 136.88112 609.1571 132.32736 c
609.78625 127.77361 610.10083 123.21986 610.10083 118.6661 c
610.10083 111.05654 609.38184 104.49554 607.94379 98.983093 c
606.50574 93.470657 604.6333 88.797066 602.32648 84.962326 c
600.01965 81.127586 597.44318 78.02684 594.59711 75.66008 c
591.75098 73.293327 588.93488 71.465836 586.14868 70.177605 c
583.36249 68.889366 580.74109 68.020561 578.28448 67.571175 c
575.82782 67.121796 573.85052 66.897102 572.3526 66.897102 c
566.54059 66.897102 561.34271 67.810844 556.75897 69.638344 c
552.17529 71.465836 548.29559 73.99736 545.11993 77.232925 c
541.94427 80.468491 539.51764 84.30323 537.8399 88.737152 c
536.16223 93.171066 535.32336 97.994453 535.32336 103.20731 c
535.32336 107.46147 536.04242 111.55086 537.48041 115.47548 c
538.91846 119.40009 541.0755 122.87533 543.95154 125.90118 c
546.82758 128.92703 550.42267 131.3537 554.73676 133.1812 c
559.05084 135.0087 564.08392 135.92244 569.83606 135.92244 c
569.83606 135.92244 l
569.83606 147.42667 l
564.68311 147.42667 559.9646 146.82748 555.68048 145.62912 c
551.39636 144.43077 547.54663 142.798 544.13129 140.73083 c
540.716 138.66368 537.73505 136.22203 535.18854 133.40588 c
532.64203 130.58975 530.52997 127.54892 528.85223 124.2834 c
527.17456 121.01788 525.91626 117.58759 525.07745 113.99252 c
524.23859 110.39745 523.81915 106.83233 523.81915 103.29718 c
523.81915 96.406631 525.01752 90.040359 527.41425 84.198372 c
529.81091 78.356384 533.16632 73.293327 537.48041 69.009201 c
541.79449 64.725082 546.91748 61.384663 552.84937 58.987949 c
558.78119 56.591236 565.28229 55.392879 572.3526 55.392879 c
h
686.04022 53.184067 m
695.24359 53.184067 702.729 54.380508 708.49646 56.773384 c
714.26392 59.166264 718.77356 62.540836 722.02539 66.897102 c
725.27728 71.253365 727.54742 76.376579 728.83594 82.266739 c
730.12439 88.156906 730.76862 94.599266 730.76862 101.59383 c
730.76862 118.40534 728.16101 130.46176 722.94574 137.76311 c
717.73047 145.06445 709.10999 148.71513 697.08423 148.71513 c
692.66663 148.71513 688.3717 147.94818 684.19952 146.41429 c
680.02734 144.88039 676.10052 142.76361 672.41919 140.06395 c
669.88824 138.20795 667.47333 136.17793 665.17444 133.97391 c
664.73486 133.54796 l
664.7583 133.63263 l
665.46924 136.35928 665.99866 139.13544 666.34662 141.96107 c
666.43701 142.73294 l
666.86652 146.59836 667.08124 150.61716 667.08124 154.78937 c
667.08124 154.78937 l
666.89716 184.24017 l
639.65515 184.24017 l
639.65515 60.362701 l
640.10541 60.170223 l
642.83429 59.022987 646.05878 58.01342 649.77887 57.141521 c
653.70569 56.221184 657.84717 55.454235 662.20343 54.840675 c
666.55969 54.227116 670.82397 53.797626 674.99615 53.552204 c
679.16833 53.306778 682.84967 53.184067 686.04022 53.184067 c
h
685.48798 72.879295 m
683.27917 72.756584 680.70227 72.787262 677.75714 72.971329 c
674.81207 73.155396 671.92834 73.523537 669.10596 74.075737 c
668.40039 74.213783 667.71014 74.35759 667.03522 74.507141 c
666.85608 74.546951 l
666.73682 119.85776 l
667.10425 120.09263 l
669.81006 121.81059 672.33545 123.28804 674.68048 124.52497 c
675.18024 124.78635 l
678.49341 126.50431 682.1748 127.3633 686.22424 127.3633 c
690.64191 127.3633 694.04712 126.59634 696.44 125.06245 c
698.83289 123.52856 700.4895 120.89025 701.40985 117.14754 c
702.3302 113.40484 702.79034 108.15891 702.79034 101.40977 c
702.79034 94.047066 702.20746 88.310295 701.04169 84.199455 c
699.87592 80.088608 698.06592 77.204887 695.61169 75.548279 c
693.15747 73.89167 689.7829 73.002007 685.48798 72.879295 c
h
792.43127 53 m
803.84344 53 812.98547 54.564575 819.8573 57.693722 c
826.72919 60.822872 831.66833 65.884727 834.67474 72.879295 c
837.68121 79.873863 839.18439 89.138596 839.18439 100.6735 c
839.18439 112.45382 837.68121 121.84127 834.67474 128.83583 c
831.66833 135.8304 826.72919 140.89226 819.8573 144.02141 c
812.98547 147.15056 803.84344 148.71513 792.43127 148.71513 c
781.14178 148.71513 772.0611 147.15056 765.18927 144.02141 c
758.31738 140.89226 753.3476 135.8304 750.27979 128.83583 c
747.21198 121.84127 745.6781 112.45382 745.6781 100.6735 c
745.6781 89.138596 747.21198 79.873863 750.27979 72.879295 c
753.3476 65.884727 758.31738 60.822872 765.18927 57.693722 c
772.0611 54.564575 781.14178 53 792.43127 53 c
h
792.43127 72.879295 m
787.76819 72.879295 784.08685 73.646248 781.38721 75.180138 c
778.68756 76.714035 776.78552 79.50573 775.68109 83.555214 c
774.57672 87.604698 774.02448 93.310799 774.02448 100.6735 c
774.02448 108.28162 774.57672 114.11043 775.68109 118.15992 c
776.78552 122.2094 778.68756 125.03178 781.38721 126.62702 c
784.08685 128.22227 787.76819 129.0199 792.43127 129.0199 c
797.21698 129.0199 800.95972 128.22227 803.65936 126.62702 c
806.35901 125.03178 808.23041 122.2094 809.27344 118.15992 c
810.31647 114.11043 810.83801 108.28162 810.83801 100.6735 c
810.83801 93.310799 810.31647 87.604698 809.27344 83.555214 c
808.23041 79.50573 806.35901 76.714035 803.65936 75.180138 c
800.95972 73.646248 797.21698 72.879295 792.43127 72.879295 c
h
892.10382 53.184067 m
894.31262 53.184067 897.01233 53.337456 900.20282 53.644238 c
903.39331 53.951015 906.5838 54.380508 909.77429 54.932709 c
912.96484 55.484913 915.66449 56.12915 917.87329 56.865417 c
917.87329 56.865417 l
914.92822 75.272179 l
903.14789 75.272179 l
899.58923 75.272179 897.04297 75.977768 895.50909 77.388954 c
893.97522 78.80014 893.20825 81.162338 893.20825 84.475555 c
893.20825 84.475555 l
893.20764 128.4677 l
918.60956 128.4677 l
918.60956 146.32225 l
893.20764 146.32225 l
893.20825 171.53951 l
865.96625 171.53951 l
865.96564 146.22653 l
850.13641 145.40192 l
850.13641 128.4677 l
865.96564 128.4677 l
865.96625 78.401321 l
865.96625 70.570084 868.1842 64.454056 872.62006 60.053226 c
872.86877 59.810501 l
877.47046 55.392879 883.88214 53.184067 892.10382 53.184067 c
h
971.89709 53.368134 m
981.59137 53.368134 989.50623 54.135082 995.64185 55.66898 c
1001.7774 57.202877 1006.2564 59.994568 1009.0788 64.044052 c
1011.9011 68.093536 1013.3123 73.922348 1013.3123 81.530472 c
1013.3123 89.261307 1011.4717 95.059441 1007.7903 98.924858 c
1004.1089 102.79028 998.46423 105.70468 990.85608 107.66807 c
990.85608 107.66807 l
967.11139 113.37416 l
962.81647 114.47857 959.74866 115.49094 957.90802 116.41128 c
956.06732 117.33161 955.14697 119.20296 955.14697 122.02534 c
955.14697 124.35686 955.66852 125.98279 956.71155 126.90313 c
957.75458 127.82346 959.56458 128.37567 962.14154 128.55974 c
964.71851 128.7438 968.39984 128.83583 973.18561 128.83583 c
978.83032 128.83583 984.62848 128.77448 990.57996 128.65176 c
996.53149 128.52905 1002.4523 128.40634 1008.3425 128.28363 c
1008.3425 128.28363 l
1010.1832 145.21785 l
1006.3791 145.95412 1002.0228 146.56767 997.11438 147.05852 c
992.20593 147.54938 987.17474 147.94818 982.02081 148.25496 c
976.86694 148.56174 972.08118 148.71513 967.66357 148.71513 c
958.21478 148.71513 950.66797 147.88683 945.02325 146.23022 c
939.37854 144.57361 935.2677 141.84328 932.69073 138.03922 c
930.11377 134.23515 928.82532 129.20396 928.82532 122.94567 c
928.82532 118.03721 929.46954 113.83433 930.758 110.33704 c
932.04651 106.83976 934.28601 103.86401 937.4765 101.40977 c
940.66699 98.955536 945.20734 96.930794 951.09747 95.335541 c
951.09747 95.335541 l
974.10596 89.629448 l
978.64624 88.402328 981.95947 87.328598 984.04559 86.408264 c
986.13165 85.487923 987.17474 83.61657 987.17474 80.794205 c
987.17474 78.585388 986.56116 76.92878 985.33405 75.824379 c
984.10693 74.719971 981.83679 74.014381 978.52356 73.707603 c
975.21033 73.400818 970.36322 73.247429 963.98224 73.247429 c
950.97119 73.247902 l
947.25568 73.251968 943.83118 73.282494 940.69769 73.339462 c
937.32312 73.400818 934.47003 73.492859 932.13855 73.61557 c
932.13855 73.61557 l
930.48193 56.681351 l
939.31714 55.086098 947.47748 54.135082 954.96289 53.828304 c
962.4483 53.521526 968.09308 53.368134 971.89709 53.368134 c
h
W
0 0 1200 630 rc
364.99704 186.98378 m
1014.3123 186.98378 l
1014.3123 52 l
364.99704 52 l
h
f
Q
0.074509807 0.078431375 0.082352944 sc
q
347.02356 121.47891 m
344.56219 134.67409 333.41376 144.82372 319.47818 146.55678 c
315.63693 159.97034 304.64508 171.35497 282.66135 171.35497 c
249.50848 171.35497 l
249.50848 183.13409 l
259.63531 186.24655 265.19922 196.59979 261.93564 206.25769 c
258.67133 215.9156 247.81612 221.22185 237.68929 218.10939 c
227.56244 214.99695 221.99855 204.64441 225.26213 194.98579 c
227.16354 189.35829 231.78854 184.94817 237.68929 183.13409 c
237.68929 171.8622 l
204.47733 171.8622 l
188.93507 171.8622 172.50638 165.04269 167.54231 147.06401 c
149.9088 144.83499 137.50897 129.39531 139.84622 112.57834 c
141.69223 99.29792 152.34946 88.690361 166.18311 86.36483 c
166.18311 85.85759 l
168.01508 61.735722 186.80762 53 204.47733 53 c
282.66135 53 l
309.01816 53 319.59634 69.344254 320.95557 85.85759 c
338.46793 88.829147 350.1394 104.77747 347.02356 121.47891 c
h
W
0 0 1200 630 rc
136.50897 222.22185 m
351.1394 222.22185 l
351.1394 52 l
136.50897 52 l
h
f
Q
2.2978561 w
5 M
1 1 1 sc
q
237.68929 218.10939 m
247.81612 221.22185 258.67133 215.9156 261.93564 206.25769 c
265.19922 196.59979 259.63531 186.24655 249.50848 183.13409 c
249.50848 183.13409 l
249.50848 171.35497 l
282.66135 171.35497 l
304.64508 171.35497 315.63693 159.97034 319.47818 146.55678 c
333.41376 144.82372 344.56219 134.67409 347.02356 121.47891 c
350.1394 104.77747 338.46793 88.829147 320.95557 85.85759 c
319.59634 69.344254 309.01816 53 282.66135 53 c
282.66135 53 l
204.47733 53 l
186.80762 53 168.01508 61.735722 166.18311 85.85759 c
166.18311 85.85759 l
166.18311 86.36483 l
152.34946 88.690361 141.69223 99.29792 139.84622 112.57834 c
137.50897 129.39531 149.9088 144.83499 167.54231 147.06401 c
172.50638 165.04269 188.93507 171.8622 204.47733 171.8622 c
204.47733 171.8622 l
237.68929 171.8622 l
237.68929 183.13409 l
231.78854 184.94817 227.16354 189.35829 225.26213 194.98579 c
221.99855 204.64441 227.56244 214.99695 237.68929 218.10939 c
h
137.41409 221.14897 m
349.6763 221.14897 l
349.6763 50.85107 l
137.41409 50.85107 l
h
W*
0 0 1200 630 rc
1 0 0 -1 139.56328 219 cm
207.46028 97.521088 m
204.99893 84.32592 193.85046 74.176277 179.91489 72.443222 c
176.07364 59.029659 165.08179 47.645039 143.09807 47.645039 c
109.9452 47.645039 l
109.9452 35.865906 l
120.07204 32.753448 125.63593 22.400209 122.37235 12.742304 c
119.10804 3.0843983 108.25284 -2.2218492 98.125999 0.89060444 c
87.999153 4.003058 82.435265 14.355595 85.698845 24.014204 c
87.600258 29.641701 92.225258 34.051834 98.125999 35.865906 c
98.125999 47.137806 l
64.91404 47.137806 l
49.371784 47.137806 32.943092 53.957306 27.979027 71.935989 c
10.345514 74.165009 -2.0543075 89.604691 0.28293988 106.42166 c
2.1289515 119.70208 12.78618 130.30965 26.619818 132.63518 c
26.619818 133.14241 l
28.451794 157.26428 47.244328 166 64.91404 166 c
143.09807 166 l
169.4549 166 180.03308 149.65575 181.39229 133.14241 c
198.90465 130.17085 210.57611 114.22253 207.46028 97.521088 c
h
S
Q
q
282.66135 64.15918 m
204.47733 64.15918 l
194.4901 64.15918 177.82501 67.48439 177.82501 89.577316 c
177.82501 134.66492 l
177.82501 156.81421 194.54919 160.08305 204.47733 160.08305 c
282.66135 160.08305 l
305.88608 160.08305 309.31366 144.13332 309.31366 134.66492 c
309.31366 89.577316 l
309.31366 80.052559 305.827 64.15918 282.66135 64.15918 c
h
W
0 0 1200 630 rc
176.82501 161.08305 m
310.31366 161.08305 l
310.31366 63.159184 l
176.82501 63.159184 l
h
f
Q
q
166.00581 97.52401 m
155.25182 100.59983 149.14868 111.40817 152.37384 121.66419 c
154.33731 127.90812 159.45946 132.79237 166.00581 134.66492 c
166.00581 97.52401 l
h
W
0 0 1200 630 rc
148.14868 135.66492 m
167.00581 135.66492 l
167.00581 96.52401 l
148.14868 96.52401 l
h
f
Q
q
334.82391 110.52544 m
332.86047 104.28151 327.73831 99.397255 321.19196 97.524712 c
321.19196 134.66563 l
331.94595 131.5891 338.0491 120.78146 334.82391 110.52544 c
h
W
0 0 1200 630 rc
320.19196 135.66563 m
339.0491 135.66563 l
339.0491 96.524712 l
320.19196 96.524712 l
h
f
Q
q
235.94281 201.09448 m
235.776 205.25868 239.04501 208.7679 243.24321 208.93333 c
247.44139 209.09877 250.98062 205.85678 251.14745 201.69333 c
251.31425 197.52913 248.04523 194.01991 243.84705 193.85448 c
243.76854 193.85149 243.69005 193.84924 243.61154 193.84848 c
239.51375 193.84399 236.13603 197.03508 235.94281 201.09448 c
h
W
0 0 1200 630 rc
234.776 210.09877 m
252.31425 210.09877 l
252.31425 192.84399 l
234.776 192.84399 l
h
f
Q
0.074509807 0.078431375 0.082352944 sc
q
277.55237 87.952995 m
267.04568 84.409332 256.15131 82.637505 244.86923 82.637505 c
233.58716 82.637505 222.69278 84.409332 212.1861 87.952995 c
208.94565 87.952995 206.31837 85.572983 206.31837 82.637505 c
206.31837 79.702019 209.22873 78.49012 212.1861 77.322006 c
222.69278 74.313911 233.58716 72.809868 244.86923 72.809868 c
256.15131 72.809868 267.04568 74.313911 277.55237 77.322006 c
281.11728 78.632713 283.42007 79.702019 283.42007 82.637505 c
283.42007 85.572983 280.79282 87.952995 277.55237 87.952995 c
h
W
0 0 1200 630 rc
205.31837 88.952995 m
284.42007 88.952995 l
284.42007 71.809868 l
205.31837 71.809868 l
h
f
Q
q
265.02301 95.904114 m
270.39066 95.904114 275.13528 97.038353 279.25687 99.306824 c
283.37845 101.57529 286.58945 104.72239 288.88986 108.74812 c
291.19028 112.77386 292.34048 117.3747 292.34048 122.55064 c
292.34048 127.53489 291.23822 132.03987 289.03363 136.06561 c
286.82907 140.09134 283.69794 143.28638 279.64026 145.6507 c
275.58258 148.01501 270.806 149.19717 265.31058 149.19717 c
260.00681 149.19717 255.53378 148.11086 251.89145 145.93825 c
248.24911 143.76562 245.46944 140.79425 243.55243 137.02412 c
241.63541 140.73035 238.8717 143.68575 235.26134 145.89032 c
231.65096 148.09489 227.19389 149.19717 221.89014 149.19717 c
216.3947 149.19717 211.61813 148.03099 207.56044 145.69862 c
203.50276 143.36624 200.37163 140.18719 198.16707 136.16145 c
195.96249 132.13573 194.86021 127.59879 194.86021 122.55064 c
194.86021 117.5025 195.96249 112.96556 198.16707 108.93983 c
200.37163 104.91409 203.47081 101.73504 207.4646 99.402672 c
211.45837 97.070305 216.17104 95.904114 221.60258 95.904114 c
226.84244 95.904114 231.31548 97.006401 235.0217 99.210968 c
238.72794 101.41553 241.5715 104.40289 243.55243 108.17302 c
245.46944 104.46679 248.21716 101.49541 251.79559 99.258896 c
255.37402 97.022377 259.78317 95.904114 265.02301 95.904114 c
h
220.93164 102.99708 m
217.7366 102.99708 214.81316 103.79584 212.16129 105.39335 c
209.50941 106.99086 207.41667 109.24335 205.88306 112.15083 c
204.34944 115.0583 203.58264 118.46101 203.58264 122.35894 c
203.58264 128.3656 205.22807 133.15813 208.51895 136.73657 c
211.80983 140.315 216.17104 142.10422 221.60258 142.10422 c
226.90634 142.10422 231.17169 140.29903 234.39867 136.68864 c
237.62566 133.07826 239.23914 128.33365 239.23914 122.4548 c
239.23914 116.70374 237.65761 112.02303 234.49452 108.41265 c
231.33145 104.80227 226.81049 102.99708 220.93164 102.99708 c
h
275.47076 105.6809 m
274.19275 112.58216 271.23734 118.02968 266.60455 122.02347 c
261.97177 126.01725 256.07693 128.39754 248.92007 129.16435 c
249.87859 133.19008 251.81157 136.35316 254.71904 138.65358 c
257.62653 140.95399 261.54044 142.10422 266.46078 142.10422 c
269.8475 142.10422 272.81888 141.2735 275.37491 139.61209 c
277.93091 137.95067 279.92783 135.65025 281.36557 132.71083 c
282.80334 129.77141 283.52222 126.32078 283.52222 122.35894 c
283.52222 118.58881 282.80334 115.26598 281.36557 112.39046 c
279.92783 109.51493 277.96286 107.27841 275.47076 105.6809 c
h
221.50674 116.41619 m
223.10425 116.41619 224.51007 116.94337 225.72417 117.99773 c
226.93828 119.05209 227.54533 120.69753 227.54533 122.93404 c
227.54533 125.17056 226.95425 126.80003 225.77209 127.82244 c
224.58994 128.84485 223.16815 129.35605 221.50674 129.35605 c
219.71753 129.35605 218.27975 128.86082 217.19345 127.87036 c
216.10715 126.87991 215.56398 125.23447 215.56398 122.93404 c
215.56398 120.69753 216.12312 119.05209 217.24138 117.99773 c
218.35963 116.94337 219.78142 116.41619 221.50674 116.41619 c
h
266.07736 102.99708 m
260.70972 102.99708 256.39642 104.73837 253.13751 108.22095 c
249.87859 111.70353 248.21716 116.38424 248.15326 122.26309 c
254.41551 121.56019 259.28793 119.49939 262.77051 116.08071 c
266.25308 112.66203 268.05829 108.33277 268.1861 103.09293 c
267.48318 103.02903 266.78027 102.99708 266.07736 102.99708 c
h
W
0 0 1200 630 rc
193.86021 150.19717 m
293.34048 150.19717 l
293.34048 94.904114 l
193.86021 94.904114 l
h
f
Q
q
0 0 1200 630 rc
33 0 0 19 1022 152 cm
BI
/Width 99
/Height 57
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
JH16$fDtmNJLU"9rWAShl2^f-odTkgrW)qIJUm9@r^N=Vm/[,/npp^frW)qIJUm9@rdXnhSH/-ZrW`@?
npp^frW)qIJUm0=rbqc?TE+H]r^uX0rdFbGrdTKLl[\t0TE+Q`rZD,hmstCcrW)qIJUls7r[+B?p&P'q
rb_"PrdFbGb;oQ;mstC1c8kl,l%&bTrX,M&p&P(^l%&b]a8l3CmstB\c2di(k(*G3V?$DlrZ1ufl%&b]
a8l3CmstB\c2di(j+.+]W;uhrrWN4:k(*GZa8l3CmstB\c2di(j+.,QrXQ"0quH^bj+.,Wa8l3CmstB\
c2di(npp^Cnpp^FX8i8$!<*r:Ie\HmIf<OAJGsu<!<-0jJGp_;!<,"LJGq,!Fn1(^2R!/]!s&K+rbD+V
r`/qcnpp^fa8l3CmstB\c2di(npp^%r^-1+rd+PWZN'tl!CB-DJGpPf;=]8:IE2Ef>47"@+jL)e3V%_"
:]:k'II_pfAGuV?!<*f8I0"bEomm$OrW)q)npp^fa8l3CmstB\c2di(npp^LrW)ptmstC#]E%p4rb):^
o76firW)q7npp^fa8l3CmstB\c2di(npp^_rW)p>mstCcrYWBMr]g@3p43-]rW2uurd+-crdDifr`\c@
rZTPer]0FtrX&Q(rb1bNrbDE7`;olQrd=Zpp43-%rW)p'mstCca8l3CmstB\c2di(mstBXrW)pPm"#((
a8l2@rau"Wq1/HhrWiE&rYFsQrdDifr`\c@rZTPer]0Ftr\"0MrW3".mstCerZ95_r]Kq*q1/H'qZ-U?
mstCca8l3CmstB\c2di(mstBlqZ-U/rd4*arbqc?d/a.[rd=Hjr.+cVrW2lrr[%#`rdDifr`\c@rZTPe
r]0Ftr\=0Jr\j+nr_:lBrW3".oRHsmJGsrq(&.e.-1?B`IE2Ef>47"@+jL)e3U_Lt1%bPG?L34A-.`.r
3UqV#J:RV`o`4t;mstCca8l3CmstB\c2di(mstBlo`4t%rcmm^rcA&Fh#REerd43d!,2IJC&S2,!<+;5
JGsu<!<-0jJGp_;!<,"IJGq:o!<+Y<JGrR)!<-EtJGt#u)Z^lsnc8Y8mstCca8l3CmstB\c2di(mstBl
mf<>hm"#'eirK';mstC,!!)Kgr[%#`rdDifr`\c@rZTPer]0Ftr\<jArX8^JmstC]rXJ)lrXo-Unpp^W
rWN9%n,WG6mstCca8l3CmstB\c2di(mstBlli@#6m"#(@klC]imstB\r;c<er[%#`rdDifr`\c@rZTPe
r]0Ftr\<X;r_`$4r\a-Er\X(or_E:in,WG6mstCca8l3CmstB\c2di(mstBlklC\grc.CWrd+PTo`4t!
rd"'brcA&Eq>g!br[%#`rdDifr`\c@rZTPer]0Ftr\<O8rZgc[r_<%cr]fk%r[@L@n,WG6mstCca8l3C
mstB\c2di(mstBlirK'NmstCbrXJ`)rWE.@npp^>oDn@\r[%#`rdDifr`\c@rZTPer]0Ftr\<F5rWW:=
mstC,qZ-UJnpp^`rX8>un,WG6mstCca8l3CmstB\c2di(mstBlhuN`srdXKhrd+PMrW)q0npp]nnGr%Y
r[%#`rdDifr`\c@rZTPer]0Ftr\<4/r^?4*r]pH'npp^FmJu_Vr[%#`rdDifr`\c@rZTPer]0Ftr\<4/
rWE.6npp^`ra#2Ird+PTmJu_Vr[%#`rdDifr`\c@rZTPer]0Ftr\<+,rYYW_j+.+flN$DSr[%#`rdDif
r`\c@rZTPer]0Ftr\<")r]TCoraYp.lN$DSr[%#`rdDifr`\c@rZTPer]0Ftr\<")rW3"/m"#(_rY=Vs
n,WG6mstCca8l3CmstB\c2di(mstBle,]I]rd4*ar]fKEn,WG6mstCca8l3CmstB\c2di(mstBld/a/)
npp^RrW;0]n,WG6mstCca8l3CmstB\c2di(mstBlc2diMpji?nrYshsn,WG6mstCca8l3CmstB\c2di(
mstBlc2dhSrcn<jr^PcFn,WG6mstCca8l3CmstB\c2di(mstBlb5hMgr^m)ZrWV0Zn,WG6mstCca8l3C
mstB\c2di(mstBlSH/-Zr[%#`rdDifr`\c@rZTPer]0Ftr\9rDn,WG6mstCca8l3CmstB\c2di(mstBl
SH/-Zr[%#`rdDifr`\c@rZTPer]0Ftr\9rDn,WG6mstCca8l3CmstB\c2di(mstBlSH/-Zr[%#`rdDif
r`\c@rZTPer]0Ftr\9rDn,WG6mstCca8l3CmstB\c2di(mstBlSH/-Zr[%#`rdDifr`\c@rZTPer]0Ft
r\9rDn,WG6mstCca8l3CmstB\c2di(mstBlSH/-Zr[%#`rdDifr`\c@rZTPer]0Ftr\9rDn,WG6mstCc
a8l3CmstB\c2di(mstBlSH/-Zr[%#`rdDifr`\c@rZTPer]0Ftr\9rDn,WG6mstCca8l2Wmj.l=c2dhT
mj.lBSH/-ZrX/!;J,
~> %APLeod
EI
ep
end
