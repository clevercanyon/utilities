/**
 * Test suite.
 */

// @todo Rewrite this. Must of it doesnâ€™t work now.

import { describe, expect, test } from 'vitest';
import { $fn, $obj, type $type } from '../../index.ts';

describe('$fn.memoize()', async () => {
    $memo.$.collectStats();

    test('.svz()', async () => {
        $memo.$.clearStats();
        const fn1 = $memo.svz({ maxSize: 10 })(() => true);
        expect(fn1()).toBe(true);
        expect(fn1()).toBe(true);
        expect(fn1.getStats()).toMatchObject({ calls: 2, hits: 1 });

        $memo.$.clearStats();
        const fn2 = $memo.svz({ maxSize: 10 })((a: string, b: string, c: string) => a + b + c);
        expect(fn2('a', 'b', 'c')).toBe('abc');
        expect(fn2('b', 'a', 'c')).toBe('bac');
        expect(fn2('a', 'b', 'c')).toBe('abc');
        expect(fn2.getStats()).toMatchObject({ calls: 3, hits: 1 });
    });
    test('.svzAsync()', async () => {
        $memo.$.clearStats();
        const fn1 = $memo.svzAsync({ maxSize: 10 })(async () => true);
        expect(await fn1()).toBe(true);
        expect(await fn1()).toBe(true);
        expect(fn1.getStats()).toMatchObject({ calls: 3, hits: 2 });

        $memo.$.clearStats();
        const fn2 = $memo.svzAsync({ maxSize: 10 })(async (a: string, b: string, c: string) => a + b + c);
        expect(await fn2('a', 'b', 'c')).toBe('abc');
        expect(await fn2('b', 'a', 'c')).toBe('bac');
        expect(await fn2('a', 'b', 'c')).toBe('abc');
        expect(fn2.getStats()).toMatchObject({ calls: 5, hits: 3 });
    });
    test('.shallow()', async () => {
        $memo.$.clearStats();
        const fn1 = $memo.shallow({ maxSize: 10 })(() => true);
        expect(fn1()).toBe(true);
        expect(fn1()).toBe(true);
        expect(fn1.getStats()).toMatchObject({ calls: 2, hits: 1 });

        $memo.$.clearStats();
        const fn2 = $memo.shallow({ maxSize: 10 })((a: string[], b: string[], c: string[]) => a.concat(b).concat(c).flat().join(''));
        expect(fn2(['a'], ['b'], ['c'])).toBe('abc');
        expect(fn2(['b'], ['a'], ['c'])).toBe('bac');
        expect(fn2(['a'], ['b'], ['c'])).toBe('abc');
        expect(fn2.getStats()).toMatchObject({ calls: 3, hits: 1 });
    });
    test('.shallowAsync()', async () => {
        $memo.$.clearStats();
        const fn1 = $memo.shallowAsync({ maxSize: 10 })(async () => true);
        expect(await fn1()).toBe(true);
        expect(await fn1()).toBe(true);
        expect(fn1.getStats()).toMatchObject({ calls: 3, hits: 2 });

        $memo.$.clearStats();
        const fn2 = $memo.shallowAsync({ maxSize: 10 })(async (a: string[], b: string[], c: string[]) => a.concat(b).concat(c).flat().join(''));
        expect(await fn2(['a'], ['b'], ['c'])).toBe('abc');
        expect(await fn2(['b'], ['a'], ['c'])).toBe('bac');
        expect(await fn2(['a'], ['b'], ['c'])).toBe('abc');
        expect(fn2.getStats()).toMatchObject({ calls: 5, hits: 3 });
    });
    test('.deep()', async () => {
        $memo.$.clearStats();
        const fn1 = $memo.deep({ maxSize: 10 })(() => true);
        expect(fn1()).toBe(true);
        expect(fn1()).toBe(true);
        expect(fn1.getStats()).toMatchObject({ calls: 2, hits: 1 });

        $memo.$.clearStats();
        const fn2 = $memo.deep({ maxSize: 10 })((a: $type.Object, b: $type.Object, c: $type.Object) => $obj.mergeDeep(a, b, c));
        expect(fn2({ a: 'a' }, { b: 'b' }, { c: { a: { b: { c: 'c' } } } })).toStrictEqual({ a: 'a', b: 'b', c: { a: { b: { c: 'c' } } } });
        expect(fn2({ b: 'b' }, { a: 'a' }, { c: { a: { b: { c: 'c' } } } })).toStrictEqual({ b: 'b', a: 'a', c: { a: { b: { c: 'c' } } } });
        expect(fn2({ a: 'a' }, { b: 'b' }, { c: { a: { b: { c: 'c' } } } })).toStrictEqual({ a: 'a', b: 'b', c: { a: { b: { c: 'c' } } } });
        expect(fn2.getStats()).toMatchObject({ calls: 3, hits: 1 });
    });
    test('.deepAsync()', async () => {
        $memo.$.clearStats();
        const fn1 = $memo.deepAsync({ maxSize: 10 })(async () => true);
        expect(await fn1()).toBe(true);
        expect(await fn1()).toBe(true);
        expect(fn1.getStats()).toMatchObject({ calls: 3, hits: 2 });

        $memo.$.clearStats();
        const fn2 = $memo.deepAsync({ maxSize: 10 })(async (a: $type.Object, b: $type.Object, c: $type.Object) => $obj.mergeDeep(a, b, c));
        expect(await fn2({ a: 'a' }, { b: 'b' }, { c: { a: { b: { c: 'c' } } } })).toStrictEqual({ a: 'a', b: 'b', c: { a: { b: { c: 'c' } } } });
        expect(await fn2({ b: 'b' }, { a: 'a' }, { c: { a: { b: { c: 'c' } } } })).toStrictEqual({ b: 'b', a: 'a', c: { a: { b: { c: 'c' } } } });
        expect(await fn2({ a: 'a' }, { b: 'b' }, { c: { a: { b: { c: 'c' } } } })).toStrictEqual({ a: 'a', b: 'b', c: { a: { b: { c: 'c' } } } });
        expect(fn2.getStats()).toMatchObject({ calls: 5, hits: 3 });
    });
});
