%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 13.3.1 (a) (Build 22E772610a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1200 630
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1200 630
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 630 m
1200 630 l
1200 0 l
0 0 l
h
W*
0 0 1200 630 rc
0 630 m
1200 630 l
1200 0 l
0 0 l
h
f*
Q
0.92900002 0.373 0.23100001 sc
q
0 630 m
1200 630 l
1200 0 l
0 0 l
h
W*
357.98248 272.42148 m
304.86414 97.145485 422.57333 -29.601473 568.79639 40.514206 c
767.40137 40.514206 l
783.28528 40.514206 797.758 47.032661 808.24744 57.515041 c
808.32495 57.590797 l
817.38031 66.651451 823.48126 78.675354 824.96991 92.022331 c
867.08972 128.50455 862.76111 193.88464 825.32928 245.5249 c
825.32928 327.5993 l
825.32928 343.48849 818.81439 357.95944 808.32495 368.45065 c
808.24744 368.5264 l
797.758 379.01407 783.28528 385.52899 767.40137 385.52899 c
699.4967 385.52899 l
699.4967 396.95038 l
699.4967 411.31564 693.62659 424.38428 684.17126 433.83075 c
674.72656 443.28076 661.65796 449.15088 647.29266 449.15088 c
577.90991 449.15088 l
563.53406 449.15088 550.48126 443.28076 541.03131 433.83075 c
531.5813 424.38428 525.71118 411.31564 525.71118 396.95038 c
525.71118 385.52899 l
457.81 385.52899 l
441.91379 385.52899 427.45337 379.01407 416.96219 368.5264 c
416.88641 368.45065 l
406.39877 357.95944 399.88559 343.48849 399.88559 327.5993 c
399.88559 243.10075 l
385.2825 250.79605 371.31891 261.5603 357.98248 272.42148 c
h
566.492 385.52899 m
658.71057 385.52899 l
658.71057 396.95038 l
658.71057 400.07397 657.42273 402.93152 655.34912 405.0051 c
653.27734 407.07162 650.41449 408.37003 647.29266 408.37003 c
577.90991 408.37003 l
574.79163 408.37003 571.93054 407.07162 569.86224 405.0051 c
567.7887 402.93152 566.492 400.07397 566.492 396.95038 c
566.492 385.52899 l
h
W*
0 0 1200 630 rc
303.86414 450.15088 m
868.08972 450.15088 l
868.08972 -1 l
303.86414 -1 l
h
f
Q
0 0 0 sc
q
0 630 m
1200 630 l
1200 0 l
0 0 l
h
W*
630.88556 81.295067 m
668.5957 111.84196 704.86121 144.27744 746.48242 154.21544 c
761.03094 154.92896 773.78595 149.89565 784.54315 142.42584 c
784.54315 98.440369 l
784.54315 93.731224 782.6405 89.448425 779.58032 86.342468 c
779.50281 86.264954 l
776.39508 83.199516 772.1123 81.295067 767.40137 81.295067 c
630.88556 81.295067 l
h
W*
0 0 1200 630 rc
629.88556 155.92896 m
785.54315 155.92896 l
785.54315 80.295067 l
629.88556 80.295067 l
h
f
Q
q
0 630 m
1200 630 l
1200 0 l
0 0 l
h
W*
784.54315 286.07675 m
722.70062 330.61188 624.66132 342.78906 508.66803 263.81888 c
495.66812 254.97139 483.92786 246.98363 474.94824 241.76535 c
463.1886 234.95091 451.76721 232.01233 440.66647 231.90134 c
440.66647 327.5993 l
440.66647 332.31021 442.56915 336.59302 445.63458 339.6972 c
445.7121 339.77826 l
448.81982 342.84369 453.09909 344.74637 457.81 344.74637 c
767.40137 344.74637 l
772.1123 344.74637 776.39508 342.84369 779.50281 339.77826 c
779.58032 339.6972 l
782.6405 336.59302 784.54315 332.31021 784.54315 327.5993 c
784.54315 286.07675 l
h
W*
0 0 1200 630 rc
439.66647 345.74637 m
785.54315 345.74637 l
785.54315 230.90134 l
439.66647 230.90134 l
h
f
Q
1 1 1 sc
q
0 630 m
1200 630 l
1200 0 l
0 0 l
h
W*
641.29218 233.33188 m
609.875 212.84982 586.3786 192.54924 547.68011 174.23944 c
547.68011 174.23944 577.81122 230.06737 585.41492 263.65503 c
542.03546 218.66359 453.84607 157.62267 392.70999 193.96216 c
389.96344 137.60571 412.12796 95.556396 467.54364 74.827705 c
535.9046 49.263027 612.50879 107.67015 655.02673 165.46947 c
634.63806 158.4084 618.60797 149.0782 594.42096 149.24733 c
614.33746 170.41469 633.64093 200.21988 641.29218 233.33188 c
641.29218 233.33188 l
h
W*
0 0 1200 630 rc
388.96344 264.65503 m
656.02673 264.65503 l
656.02673 48.263027 l
388.96344 48.263027 l
h
f
Q
q
0 630 m
1200 630 l
1200 0 l
0 0 l
h
W*
61.685432 569.76422 m
61.423859 569.24109 61.096897 565.12134 60.704536 557.40497 c
60.31218 549.6886 60.116001 541.84149 60.116001 533.86353 c
60.116001 525.75482 60.31218 518.95392 60.704536 513.46094 c
61.096897 509.92972 62.143181 506.49658 63.843399 503.16156 c
65.543617 499.82651 67.570793 497.57047 69.924942 496.39337 c
74.502441 496.13181 77.968269 498.2244 80.322418 502.67111 c
80.126236 502.67111 l
81.303307 505.15604 81.891846 508.88342 81.891846 513.85327 c
81.891846 517.77686 82.153419 520.85034 82.676559 523.07367 c
85.946205 522.55054 89.085068 522.289 92.09314 522.289 c
101.11736 522.48517 l
105.82565 522.48517 110.27238 521.96204 114.45752 520.91571 c
116.02695 516.3382 116.81167 511.56454 116.81167 506.59467 c
116.81167 499.13989 114.94797 492.07745 111.22057 485.40738 c
107.49318 478.7373 102.35983 473.30969 95.820541 469.12454 c
89.28125 464.93939 82.022629 462.71603 74.044693 462.45444 c
71.690552 462.0621 68.944046 461.86591 65.805183 461.86591 c
55.603889 461.86591 46.645058 464.15466 38.928692 468.73218 c
31.212328 473.30969 26.896395 480.17593 25.980894 489.33093 c
25.326965 502.40952 25 516.46899 25 531.5094 c
25 543.93402 25.065393 554.13531 25.196178 562.11328 c
25.392357 570.94135 l
25.261572 572.90308 25.425055 575.15918 25.882805 577.70947 c
26.340555 580.25983 26.961788 582.51587 27.746504 584.47766 c
28.923576 587.48572 30.46031 590.49377 32.356705 593.50189 c
34.253098 596.50995 36.247581 598.99487 38.340157 600.95667 c
41.086658 603.18005 45.141022 605.07642 50.503242 606.64587 c
55.603889 608.21527 60.900715 609 66.393723 609 c
75.287163 609 83.657455 606.94012 91.504608 602.82037 c
99.351761 598.70062 105.62948 593.07684 110.33777 585.94897 c
115.04606 578.82117 117.40021 571.07208 117.40021 562.70178 c
117.40021 557.73193 116.4847 552.76208 114.6537 547.79224 c
109.1607 546.61517 104.58319 546.02661 100.92119 546.02661 c
95.951324 546.02661 89.085068 546.87671 80.322418 548.57697 c
79.733879 556.03174 l
79.472305 562.04785 78.720291 566.59271 77.477821 569.66614 c
76.235359 572.73962 73.586945 574.21094 69.532585 574.0802 c
69.401794 574.0802 69.238312 574.04749 69.042137 573.98212 c
68.845955 573.91669 68.551689 573.88397 68.159332 573.88397 c
68.355507 573.88397 l
64.301147 573.23004 62.077789 571.85681 61.685432 569.76422 c
h
210.38895 479.71817 m
210.51973 478.14874 210.58513 475.86002 210.58513 472.85193 c
210.58513 470.10544 210.35625 468.17633 209.8985 467.06467 c
209.44075 465.95297 208.75412 465.26636 207.83862 465.00479 c
206.92313 464.74319 205.35368 464.61243 203.13033 464.61243 c
201.75708 464.61243 l
198.61823 464.80859 l
193.51758 464.61243 l
185.40884 464.35086 173.44194 464.22006 157.61685 464.22006 c
142.57648 464.22006 130.60957 464.28546 121.71614 464.41623 c
121.71614 468.92834 l
122.63164 490.50803 123.08939 512.21844 123.08939 534.05969 c
123.08939 540.4682 122.9586 551.51959 122.69703 567.21393 c
122.69703 571.92224 l
122.69703 579.18085 l
122.56625 581.40417 122.50085 585.39313 122.50085 591.14771 c
122.30467 603.89935 l
124.13567 604.55328 126.686 605.10913 129.95564 605.56689 c
133.2253 606.0246 136.49493 606.25348 139.76459 606.25348 c
143.42659 606.25348 147.08859 605.99194 150.7506 605.46881 c
154.4126 604.94562 157.35529 604.22632 159.57864 603.31079 c
159.31708 593.89423 159.18628 586.37402 159.18628 580.75024 c
159.18628 572.90308 159.31708 561.13239 159.57864 545.43805 c
159.70943 537.59094 159.77483 526.01636 159.77483 510.71445 c
159.77483 497.9628 l
164.09076 497.9628 169.38759 497.76663 175.6653 497.37427 c
186.06277 496.9819 l
191.55579 496.58957 196.72182 496.39337 201.5609 496.39337 c
204.96133 496.39337 207.96941 496.52417 210.58513 496.78574 c
210.58513 493.77765 210.51973 491.81589 210.38895 490.90036 c
210.38895 491.09656 l
210.12738 487.56534 210.06198 485.01501 210.19276 483.44559 c
210.38895 479.71817 l
h
302.20062 483.05322 m
302.20062 476.38315 301.48129 470.4324 300.04263 465.20096 c
294.28806 465.20096 285.78699 465.07016 274.5394 464.80859 c
248.83998 464.61243 l
237.20004 464.61243 225.5601 465.00479 213.92017 465.78949 c
214.05095 469.97464 213.85477 486.25748 213.33163 514.638 c
212.93927 530.72467 212.74309 543.08392 212.74309 551.71582 c
212.74309 569.63348 213.20084 586.30865 214.11635 601.74139 c
231.38008 602.3299 l
250.73637 603.11462 265.5152 603.50702 275.71649 603.50702 c
284.47913 603.50702 292.98022 603.18005 301.21973 602.52612 c
301.74286 599.7796 302.00443 596.57532 302.00443 592.91333 c
302.00443 590.95154 301.87366 587.74731 301.61209 583.3006 c
301.35049 579.11542 301.21973 575.84576 301.21973 573.49164 c
293.37256 571.79144 284.60992 570.94135 274.93176 570.94135 c
249.42853 570.74512 l
248.7746 564.59821 248.44763 559.49756 248.44763 555.44318 c
248.44763 552.30432 248.83998 549.5578 249.62469 547.20367 c
262.57251 548.77313 l
264.4035 548.77313 267.14999 548.64233 270.81201 548.38074 c
273.36234 548.18457 l
274.01627 544.26099 274.34323 540.01044 274.34323 535.43298 c
273.95087 519.73865 l
269.76572 518.56158 264.14194 517.97302 257.0795 517.97302 c
251.97885 518.16925 l
251.06334 518.16925 250.47481 518.03845 250.21324 517.77686 c
249.42853 507.57556 l
249.42853 502.21335 249.69009 497.76663 250.21324 494.23541 c
257.0141 494.23541 263.61877 494.03925 270.02728 493.64688 c
272.25064 493.51608 274.99716 493.38531 278.26682 493.25452 c
281.53644 493.12375 285.39462 493.05835 289.84134 493.05835 c
301.80826 493.45071 l
302.06982 487.43454 302.20062 483.96872 302.20062 483.05322 c
h
392.83521 600.7605 m
388.78085 579.18085 384.20334 558.1897 379.10269 537.78711 c
374.00204 517.38452 367.59354 493.05835 359.87717 464.80859 c
356.99988 464.80859 355.03809 464.74319 353.99182 464.61243 c
352.03003 464.41623 l
349.67587 464.15466 347.25635 464.0239 344.77142 464.0239 c
336.53189 464.0239 330.12338 464.80859 325.5459 466.37802 c
314.16751 506.5293 306.51654 550.80029 302.59296 599.19104 c
303.77005 600.4989 306.18958 601.4798 309.85159 602.13373 c
313.51358 602.78766 317.56796 603.11462 322.01468 603.11462 c
326.19983 603.11462 330.90811 602.65686 336.13956 601.74139 c
337.31662 584.28149 l
338.10132 571.33368 338.95145 560.11877 339.86694 550.63684 c
340.78244 541.15485 342.0903 531.77094 343.79053 522.48517 c
345.35995 529.67841 347.77948 542.75696 351.04913 561.72089 c
354.97272 584.87 357.58841 598.66791 358.89627 603.11462 c
363.99692 602.06836 369.81689 601.54523 376.3562 601.54523 c
382.89548 601.54523 387.53839 601.28363 390.28488 600.7605 c
392.83521 600.7605 l
h
482.88126 483.05322 m
482.88126 476.38315 482.16196 470.4324 480.7233 465.20096 c
474.96872 465.20096 466.46765 465.07016 455.22006 464.80859 c
429.52063 464.61243 l
417.88071 464.61243 406.24075 465.00479 394.60083 465.78949 c
394.7316 469.97464 394.53543 486.25748 394.01227 514.638 c
393.61993 530.72467 393.42374 543.08392 393.42374 551.71582 c
393.42374 569.63348 393.8815 586.30865 394.797 601.74139 c
412.06073 602.3299 l
431.41702 603.11462 446.19583 603.50702 456.39713 603.50702 c
465.15979 603.50702 473.66086 603.18005 481.90036 602.52612 c
482.42352 599.7796 482.68509 596.57532 482.68509 592.91333 c
482.68509 590.95154 482.55429 587.74731 482.29272 583.3006 c
482.03116 579.11542 481.90036 575.84576 481.90036 573.49164 c
474.05322 571.79144 465.29056 570.94135 455.61243 570.94135 c
430.10919 570.74512 l
429.45526 564.59821 429.1283 559.49756 429.1283 555.44318 c
429.1283 552.30432 429.52063 549.5578 430.30536 547.20367 c
443.25314 548.77313 l
445.08417 548.77313 447.83066 548.64233 451.49268 548.38074 c
454.043 548.18457 l
454.69693 544.26099 455.0239 540.01044 455.0239 535.43298 c
454.63153 519.73865 l
450.44638 518.56158 444.8226 517.97302 437.76016 517.97302 c
432.65952 518.16925 l
431.74399 518.16925 431.15546 518.03845 430.89389 517.77686 c
430.10919 507.57556 l
430.10919 502.21335 430.37076 497.76663 430.89389 494.23541 c
437.69476 494.23541 444.29944 494.03925 450.70795 493.64688 c
452.9313 493.51608 455.67783 493.38531 458.94745 493.25452 c
462.2171 493.12375 466.07529 493.05835 470.522 493.05835 c
482.48892 493.45071 l
482.75049 487.43454 482.88126 483.96872 482.88126 483.05322 c
h
567.04199 502.08258 m
572.27338 494.10461 576.49127 487.36917 579.6955 481.87616 c
582.89978 476.38315 585.54816 470.82474 587.64075 465.20096 c
584.50189 465.20096 l
582.93243 465.20096 579.40125 465.07016 573.9082 464.80859 c
568.41522 464.54703 564.03387 464.41623 560.76422 464.41623 c
558.93323 464.41623 556.18677 464.54703 552.52472 464.80859 c
549.1897 465.00479 l
540.6886 484.36108 533.10303 498.87833 526.43298 508.55646 c
526.43298 503.45581 l
526.43298 495.34711 526.89069 484.88422 527.80621 472.0672 c
527.80621 472.2634 l
527.93701 471.3479 528.00238 469.77847 528.00238 467.55511 c
523.55566 465.46252 516.23169 464.41623 506.03036 464.41623 c
501.32208 464.61243 l
490.92459 464.61243 l
489.48596 464.61243 488.76663 476.44855 488.76663 500.12079 c
488.76663 521.56964 488.57047 543.05121 488.1781 564.56549 c
487.78574 586.07977 487.1972 598.99487 486.41248 603.31079 c
491.70932 604.09552 l
499.55646 605.14185 506.03036 605.92651 511.13101 606.44965 c
516.23169 606.97284 521.46307 607.23438 526.82532 607.23438 c
532.5799 607.23438 537.48438 606.97284 541.5387 606.44965 c
549.12433 605.53418 556.21942 602.91846 562.8241 598.60254 c
569.42883 594.28662 574.72565 588.98975 578.7146 582.71204 c
582.70355 576.43433 584.69806 569.96045 584.69806 563.29034 c
584.69806 556.88184 582.60547 549.88477 578.42035 542.29919 c
575.80463 537.59094 572.33881 533.66736 568.02289 530.5285 c
563.70691 527.38965 558.54089 525.49323 552.52472 524.83929 c
556.05597 518.56158 560.17572 512.02228 564.88397 505.22144 c
565.7995 503.65201 566.5188 502.60571 567.04199 502.08258 c
h
538.79224 552.10815 m
540.62323 552.63129 542.06189 553.93915 543.10815 556.03174 c
544.15442 558.12433 544.67761 560.60925 544.67761 563.48651 c
544.67761 568.84875 543.36975 572.31458 540.75403 573.88397 c
539.05377 574.9303 537.32086 575.58423 535.5553 575.84576 c
533.78967 576.10736 531.79517 576.23816 529.57184 576.23816 c
521.13611 574.86487 l
521.39771 570.94135 521.5285 567.60626 521.5285 564.8598 c
521.5285 557.79736 521.72467 553.48138 522.117 551.91199 c
524.34039 551.65039 527.08691 551.51959 530.35651 551.51959 c
533.36462 551.51959 536.17651 551.71582 538.79224 552.10815 c
h
668.46637 609 m
677.3598 609 685.7301 606.94012 693.57727 602.82037 c
701.42444 598.70062 707.70215 593.07684 712.41046 585.94897 c
717.11871 578.82117 719.4729 571.07208 719.4729 562.70178 c
719.4729 557.73193 718.55737 552.76208 716.72638 547.79224 c
711.23334 546.61517 706.65588 546.02661 702.99384 546.02661 c
698.02399 546.02661 691.15771 546.87671 682.39508 548.57697 c
681.80658 556.03174 l
681.54498 562.04785 680.79297 566.59271 679.55048 569.66614 c
678.30804 572.73962 675.65961 574.21094 671.60522 574.0802 c
671.47449 574.0802 671.31097 574.04749 671.11481 573.98212 c
670.91864 573.91669 670.62439 573.88397 670.23199 573.88397 c
670.42816 573.88397 l
666.37384 573.23004 664.15045 571.85681 663.75812 569.76422 c
663.49652 569.24109 663.16956 565.12134 662.77722 557.40497 c
662.38483 549.6886 662.18866 541.84149 662.18866 533.86353 c
662.18866 525.75482 662.38483 518.95392 662.77722 513.46094 c
663.16956 509.92972 664.21588 506.49658 665.91608 503.16156 c
667.61627 499.82651 669.64349 497.57047 671.99762 496.39337 c
676.57513 496.13181 680.04095 498.2244 682.39508 502.67111 c
682.19891 502.67111 l
683.37598 505.15604 683.96454 508.88342 683.96454 513.85327 c
683.96454 517.77686 684.22607 520.85034 684.74921 523.07367 c
688.01886 522.55054 691.15771 522.289 694.16583 522.289 c
703.19006 522.48517 l
707.89832 522.48517 712.34503 521.96204 716.53021 520.91571 c
718.09961 516.3382 718.88434 511.56454 718.88434 506.59467 c
718.88434 499.13989 717.02063 492.07745 713.29327 485.40738 c
709.56586 478.7373 704.4325 473.30969 697.89319 469.12454 c
691.35394 464.93939 684.09528 462.71603 676.11737 462.45444 c
673.76324 462.0621 671.01672 461.86591 667.87787 461.86591 c
657.67657 461.86591 648.71771 464.15466 641.00134 468.73218 c
633.28497 473.30969 628.96906 480.17593 628.05359 489.33093 c
627.39966 502.40952 627.07269 516.46899 627.07269 531.5094 c
627.07269 543.93402 627.13806 554.13531 627.26886 562.11328 c
627.46503 570.94135 l
627.33423 572.90308 627.49774 575.15918 627.95551 577.70947 c
628.41321 580.25983 629.03448 582.51587 629.81915 584.47766 c
630.99628 587.48572 632.53296 590.49377 634.42938 593.50189 c
636.32574 596.50995 638.32025 598.99487 640.41284 600.95667 c
643.1593 603.18005 647.21368 605.07642 652.57593 606.64587 c
657.67657 608.21527 662.97339 609 668.46637 609 c
h
779.30743 605.07642 m
780.87683 598.9295 782.31549 592.88062 783.62335 586.92987 c
784.93121 580.97913 786.10828 575.6496 787.15454 570.94135 c
791.33972 552.76208 794.15161 540.66437 795.59027 534.64825 c
808.53802 465.00479 l
804.35291 464.08926 799.84076 463.63153 795.00171 463.63153 c
789.24713 463.63153 782.96942 464.35086 776.16852 465.78949 c
775.25305 468.27441 773.81439 473.50586 771.8526 481.4838 c
769.89081 489.59253 768.32141 494.95474 767.14435 497.57047 c
763.22076 497.76663 l
759.88568 497.57047 l
759.36255 496.00104 758.51245 492.14285 757.33539 485.99591 c
756.41986 480.89526 755.50439 476.7428 754.58887 473.53854 c
753.6734 470.33429 752.36554 467.42432 750.66528 464.80859 c
749.35742 464.54703 747.39563 464.41623 744.77997 464.41623 c
743.60284 464.41623 741.05255 464.54703 737.12897 464.80859 c
725.75061 465.33173 719.40747 465.59332 718.09961 465.59332 c
718.09961 466.24725 718.23041 467.78397 718.492 470.20352 c
718.75354 472.62305 719.14594 475.33685 719.66907 478.34494 c
723.98499 503.06345 l
727.38544 523.33527 730.62238 540.99133 733.69586 556.03174 c
736.76929 571.07208 740.79095 586.96259 745.7608 603.70319 c
747.59186 603.96472 750.07678 604.09552 753.21564 604.09552 c
754.3927 604.09552 l
762.8938 604.09552 771.19867 604.42249 779.30743 605.07642 c
h
763.21997 563.87402 m
763.21899 563.85797 l
763.2027 563.66266 763.07251 562.10022 762.82837 559.17059 c
762.43604 549.36163 761.84747 541.5799 761.06281 535.82532 c
759.29718 522.68134 l
767.53668 522.68134 l
764.65936 548.8385 763.28613 561.91711 763.41693 561.91711 c
763.21997 563.87402 l
h
859.54449 482.07233 m
851.30499 500.12079 845.87738 512.61084 843.26166 519.54248 c
843.26166 481.87616 l
843.26166 473.76743 843.32709 468.20901 843.45789 465.20096 c
839.92664 464.15466 836.06848 463.63153 831.8833 463.63153 c
830.57544 463.63153 828.61365 463.7623 825.99792 464.0239 c
823.12067 464.28546 821.02808 464.41623 819.72021 464.41623 c
810.10748 464.80859 l
810.10748 479.522 l
810.10748 487.8923 809.97668 499.79382 809.71509 515.22656 c
809.58435 522.94293 809.51892 534.64825 809.51892 550.34253 c
809.51892 571.39905 810.10748 589.05518 811.28455 603.31079 c
814.81573 604.22632 818.73932 604.68408 823.0553 604.68408 c
825.93256 604.68408 829.43109 604.42249 833.55084 603.89935 c
837.67059 603.37622 840.5152 602.59149 842.08459 601.54523 c
843.91559 598.14478 846.17169 593.40381 848.85278 587.32227 c
851.53387 581.24072 854.11688 575.19183 856.60187 569.17572 c
864.44897 551.12726 l
864.18744 560.28229 864.05664 571.07208 864.05664 583.49677 c
864.05664 593.56726 864.12201 600.4989 864.25281 604.29169 c
869.61505 605.33801 875.3042 605.86115 881.32037 605.86115 c
886.42102 605.86115 891.71783 605.27258 897.21088 604.09552 c
897.21088 465.00479 l
896.81848 465.00479 896.03375 464.80859 894.85669 464.41623 c
893.54883 463.8931 891.26007 463.63153 887.99042 463.63153 c
887.33655 463.50073 883.87067 463.69693 877.59296 464.22006 c
876.02356 464.35086 874.02905 464.48163 871.6095 464.61243 c
869.19 464.74319 867.78406 464.74319 867.39166 464.61243 c
859.54449 482.07233 l
h
1034.9283 604.09552 m
1041.2061 604.09552 1047.1241 603.27814 1052.6825 601.64331 c
1058.241 600.00848 1063.1127 597.62164 1067.2979 594.48279 c
1071.8754 590.29761 1074.8834 586.17786 1076.322 582.12354 c
1077.8915 577.93835 1079.0032 573.75323 1079.6571 569.56805 c
1080.0494 565.51373 1080.2456 561.39392 1080.2456 557.2088 c
1080.0494 553.67761 l
1080.0494 550.14636 l
1079.7878 545.83044 1079.6571 539.4873 1079.6571 531.117 c
1079.6571 521.83124 1079.4609 514.7688 1079.0686 509.92972 c
1078.48 503.45581 l
1077.8262 492.86215 1075.145 483.83795 1070.4368 476.38315 c
1068.475 473.63666 1065.5322 471.2171 1061.6086 469.12454 c
1057.6851 467.03195 1053.3691 465.33173 1048.6609 464.0239 c
1043.8218 462.58524 1038.1326 461.86591 1031.5933 461.86591 c
1028.5852 461.86591 1026.4927 461.9313 1025.3156 462.0621 c
1018.9071 462.58524 1013.1852 463.99118 1008.15 466.27994 c
1003.1147 468.5687 999.41998 471.93643 997.06586 476.38315 c
993.927 482.26852 992.22675 489.6579 991.96521 498.55136 c
991.57281 504.82907 l
991.44208 505.87537 991.37665 508.03333 991.37665 511.30298 c
990.72272 522.0274 990.39575 532.29407 990.39575 542.10303 c
990.39575 548.1192 990.59192 554.13531 990.98431 560.15149 c
991.37665 566.6908 992.52106 573.06659 994.41742 579.27893 c
996.31384 585.49127 999.22382 590.95154 1003.1474 595.65985 c
1007.4633 598.01398 l
1015.8336 602.06836 1024.9886 604.09552 1034.9283 604.09552 c
h
923.30261 603.70319 m
927.88013 603.70319 931.67291 602.85309 934.68097 601.15283 c
935.85809 596.31378 937.65637 590.29761 940.07593 583.10443 c
942.49542 575.91119 944.81689 569.50269 947.04028 563.87891 c
947.69421 565.18677 949.78674 571.13751 953.31799 581.73114 c
957.24158 593.50189 959.4649 599.9104 959.98804 600.95667 c
967.18127 602.39532 974.30908 603.11462 981.37152 603.11462 c
985.6875 603.11462 989.48029 602.85309 992.74994 602.3299 c
989.61108 590.5592 985.75287 579.2135 981.17535 568.29291 c
976.59784 557.37231 970.38556 543.67249 962.53839 527.19342 c
956.26068 514.37646 951.02924 503.16156 946.84406 493.5488 c
942.65894 483.93604 938.93152 474.15979 935.66187 464.22006 c
932.52301 464.61243 929.51495 464.80859 926.6377 464.80859 c
924.6759 464.80859 921.99475 464.67783 918.59436 464.41623 c
910.3548 464.22006 l
907.73914 464.22006 904.73102 464.41623 901.33063 464.80859 c
904.46948 474.22519 910.4856 490.44263 919.37903 513.46094 c
927.42236 533.86353 l
926.1145 539.09497 924.47968 544.22833 922.51788 549.26355 c
920.55615 554.29883 918.07117 560.28229 915.06311 567.21393 c
911.53192 575.97656 908.88348 582.71204 907.11786 587.42035 c
905.35229 592.1286 903.81555 597.09851 902.50769 602.3299 c
904.99261 602.19916 908.85077 602.39532 914.08221 602.91846 c
918.2674 603.44159 921.34082 603.70319 923.30261 603.70319 c
h
1036.8901 574.6687 m
1033.7512 574.6687 1030.6779 573.62244 1027.6697 571.52985 c
1026.1003 570.22198 1024.5636 568.35828 1023.0595 565.93878 c
1021.5555 563.51923 1020.4111 561.06696 1019.6264 558.58203 c
1018.3185 552.82745 1017.6646 545.50348 1017.6646 536.61005 c
1017.6646 532.16333 1017.73 528.82825 1017.8608 526.60492 c
1017.8608 526.80109 l
1018.384 524.18536 1018.7763 520.71954 1019.0378 516.40363 c
1019.2341 513.6571 l
1019.7572 507.11783 1020.4765 502.27875 1021.392 499.13989 c
1021.392 499.33606 l
1022.5691 496.72034 1024.302 494.72586 1026.5907 493.3526 c
1028.8795 491.97937 1031.3318 491.29272 1033.9475 491.29272 c
1036.04 491.29272 1038.1653 491.78317 1040.3232 492.76407 c
1042.4812 493.74496 1044.345 495.15091 1045.9143 496.9819 c
1047.2222 498.68213 1048.0397 500.12079 1048.3666 501.29785 c
1048.6936 502.47491 1048.8571 504.30594 1048.8571 506.79086 c
1048.8571 509.01422 1048.9225 510.64905 1049.0532 511.69531 c
1049.2494 514.24567 l
1049.4456 517.97302 l
1049.4456 520.71954 l
1049.6417 524.44696 l
1049.6417 533.86353 l
1049.2494 547.20367 l
1049.2494 548.18457 l
1048.4647 558.38586 l
1048.2031 562.04785 1047.3203 565.28485 1045.8163 568.09674 c
1044.3123 570.90863 1042.3832 572.90308 1040.0291 574.0802 c
1038.9827 574.47253 1037.9364 574.6687 1036.8901 574.6687 c
h
1137.3336 482.07233 m
1129.0941 500.12079 1123.6665 512.61084 1121.0508 519.54248 c
1121.0508 481.87616 l
1121.0508 473.76743 1121.1162 468.20901 1121.2471 465.20096 c
1117.7158 464.15466 1113.8577 463.63153 1109.6725 463.63153 c
1108.3646 463.63153 1106.4028 463.7623 1103.7871 464.0239 c
1100.9098 464.28546 1098.8173 464.41623 1097.5094 464.41623 c
1087.8966 464.80859 l
1087.8966 479.522 l
1087.8966 487.8923 1087.7659 499.79382 1087.5043 515.22656 c
1087.3735 522.94293 1087.3081 534.64825 1087.3081 550.34253 c
1087.3081 571.39905 1087.8966 589.05518 1089.0737 603.31079 c
1092.6049 604.22632 1096.5284 604.68408 1100.8445 604.68408 c
1103.7217 604.68408 1107.2202 604.42249 1111.34 603.89935 c
1115.4597 603.37622 1118.3043 602.59149 1119.8738 601.54523 c
1121.7047 598.14478 1123.9608 593.40381 1126.642 587.32227 c
1129.323 581.24072 1131.906 575.19183 1134.391 569.17572 c
1142.2382 551.12726 l
1141.9766 560.28229 1141.8458 571.07208 1141.8458 583.49677 c
1141.8458 593.56726 1141.9111 600.4989 1142.042 604.29169 c
1147.4042 605.33801 1153.0934 605.86115 1159.1095 605.86115 c
1164.2102 605.86115 1169.507 605.27258 1175 604.09552 c
1175 465.00479 l
1174.6077 465.00479 1173.8229 464.80859 1172.6459 464.41623 c
1171.338 463.8931 1169.0492 463.63153 1165.7795 463.63153 c
1165.1256 463.50073 1161.6598 463.69693 1155.3821 464.22006 c
1153.8127 464.35086 1151.8182 464.48163 1149.3987 464.61243 c
1146.9791 464.74319 1145.5732 464.74319 1145.1808 464.61243 c
1137.3336 482.07233 l
h
W
0 0 1200 630 rc
24 610 m
1176 610 l
1176 460.86591 l
24 460.86591 l
h
f
ep
end
%%Trailer
%%EOF
