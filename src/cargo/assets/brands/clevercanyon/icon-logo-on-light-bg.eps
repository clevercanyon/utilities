%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 13.3.1 (a) (Build 22E772610a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 428 267
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 428 267
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
14.225806 40.463829 m
14.131504 40.270016 14.013627 38.743717 13.872175 35.884937 c
13.730722 33.026157 13.659996 30.118921 13.659996 27.163235 c
13.659996 24.159092 13.730722 21.63949 13.872175 19.604425 c
14.013627 18.296169 14.390834 17.024256 15.003795 15.788681 c
15.616755 14.553106 16.347593 13.717277 17.196308 13.281192 c
18.846586 13.184283 20.096083 13.959546 20.944798 15.606978 c
20.874071 15.606978 l
21.298429 16.527603 21.510609 17.908539 21.510609 19.749786 c
21.510609 21.203403 21.60491 22.342072 21.793512 23.165787 c
22.972284 22.971972 24.103903 22.875063 25.188372 22.875063 c
28.44178 22.947744 l
30.13921 22.947744 31.742336 22.753929 33.251163 22.366299 c
33.816975 20.670412 34.099876 18.901844 34.099876 17.060596 c
34.099876 14.298723 33.427979 11.682213 32.084179 9.2110634 c
30.740381 6.7399149 28.889711 4.7290778 26.532171 3.1785531 c
24.174629 1.6280284 21.557758 0.80431205 18.681559 0.70740426 c
17.832844 0.56204253 16.842676 0.4893617 15.711057 0.4893617 c
12.033293 0.4893617 8.8034611 1.3373049 6.0215626 3.0331914 c
3.2396641 4.7290778 1.683687 7.2729077 1.3536311 10.66468 c
1.117877 15.510071 1 20.718864 1 26.291063 c
1 30.894184 1.0235754 34.673588 1.0707263 37.629276 c
1.1414524 40.899914 l
1.0943017 41.626724 1.1532402 42.462555 1.3182681 43.407406 c
1.4832959 44.352257 1.7072624 45.188084 1.9901673 45.914894 c
2.4145248 47.029335 2.9685469 48.143772 3.6522338 49.258213 c
4.3359208 50.372654 5.0549707 51.293278 5.8093839 52.020084 c
6.7995515 52.8438 8.2612267 53.546383 10.19441 54.127831 c
12.033293 54.709278 13.942901 55 15.923236 55 c
19.129492 55 22.147144 54.236851 24.976194 52.710552 c
27.805243 51.184254 30.068483 49.100739 31.765913 46.459999 c
33.463341 43.819263 34.312057 40.948368 34.312057 37.847321 c
34.312057 36.006069 33.982002 34.164822 33.321888 32.323574 c
31.341555 31.887489 29.691277 31.669447 28.371054 31.669447 c
26.579321 31.669447 24.103903 31.984398 20.944798 32.6143 c
20.73262 35.376171 l
20.638317 37.605049 20.367201 39.288822 19.919268 40.42749 c
19.471334 41.566154 18.516531 42.111263 17.054855 42.062809 c
17.007704 42.062809 16.948767 42.050694 16.87804 42.026466 c
16.807314 42.002243 16.701223 41.990128 16.559772 41.990128 c
16.630499 41.990128 l
15.168822 41.74786 14.367258 41.239094 14.225806 40.463829 c
h
68.560036 7.2265062 m
68.609055 6.6464872 68.633568 5.8006263 68.633568 4.6889229 c
68.633568 3.6738894 68.547775 2.9609494 68.37619 2.5501025 c
68.204605 2.1392558 67.947227 1.8854973 67.604057 1.7888275 c
67.260887 1.6921576 66.672592 1.6438228 65.83918 1.6438228 c
65.324425 1.6438228 l
64.147842 1.7163252 l
62.235889 1.6438228 l
59.196381 1.5471529 54.710651 1.4988179 48.778702 1.4988179 c
43.1409 1.4988179 38.65517 1.5229855 35.321514 1.5713203 c
35.321514 3.2388752 l
35.664684 11.214137 35.836269 19.237734 35.836269 27.309666 c
35.836269 29.678078 35.787243 33.762379 35.689198 39.562569 c
35.689198 41.302628 l
35.689198 43.985214 l
35.640171 44.806908 35.615658 46.281124 35.615658 48.40786 c
35.542122 53.120514 l
36.228462 53.36219 37.184441 53.567612 38.410049 53.736786 c
39.635658 53.905956 40.861267 53.990543 42.086876 53.990543 c
43.459557 53.990543 44.832241 53.893875 46.204922 53.700535 c
47.577606 53.507195 48.680653 53.241352 49.514069 52.903008 c
49.416019 49.422894 49.366993 46.643635 49.366993 44.565235 c
49.366993 41.665138 49.416019 37.314995 49.514069 31.514805 c
49.563091 28.61471 49.587605 24.337069 49.587605 18.681883 c
49.587605 13.969228 l
51.205406 13.969228 53.190895 13.896726 55.544064 13.75172 c
59.441502 13.606716 l
61.500523 13.461711 63.436989 13.389209 65.250885 13.389209 c
66.52552 13.389209 67.653084 13.437544 68.633568 13.534214 c
68.633568 12.42251 68.609055 11.697487 68.560036 11.359142 c
68.560036 11.431644 l
68.461983 10.126601 68.437469 9.1840706 68.486496 8.6040516 c
68.560036 7.2265062 l
h
94.102417 53.990543 m
97.36544 53.990543 100.53106 53.866974 103.59927 53.619839 c
103.79408 52.581867 103.89149 51.370899 103.89149 49.986938 c
103.89149 49.245529 103.84278 48.034561 103.74538 46.354034 c
103.64798 44.772366 103.59927 43.536682 103.59927 42.646992 c
100.67716 42.00444 97.414139 41.683163 93.810204 41.683163 c
84.313347 41.60902 l
84.069839 39.285942 83.948082 37.35828 83.948082 35.826035 c
83.948082 34.639782 84.094193 33.601807 84.386398 32.71212 c
89.207886 33.305244 l
89.889709 33.305244 90.912445 33.255817 92.2761 33.156963 c
93.225784 33.082821 l
93.469292 31.600006 93.591049 29.99362 93.591049 28.263666 c
93.444939 22.332397 l
91.886482 21.887554 89.792305 21.665131 87.162407 21.665131 c
85.263031 21.739271 l
84.922119 21.739271 84.702965 21.689844 84.60556 21.59099 c
84.313347 17.735666 l
84.313347 15.709148 84.410751 14.028623 84.60556 12.694087 c
87.138054 12.694087 89.597496 12.619946 91.983887 12.471664 c
92.811821 12.422237 93.834557 12.37281 95.052101 12.323383 c
96.269646 12.273955 97.706352 12.249242 99.362213 12.249242 c
103.81844 12.397524 l
103.91584 10.123871 103.96454 8.8140488 103.96454 8.4680586 c
103.96454 5.9472694 103.69668 3.6983299 103.16096 1.7212405 c
101.01807 1.7212405 97.852455 1.6718132 93.664101 1.5729588 c
84.094193 1.4988179 l
79.759727 1.4988179 75.425262 1.6470997 71.090797 1.9436631 c
71.099197 2.2163651 71.103973 2.6249774 71.105133 3.1694996 c
71.105194 3.6962657 l
71.100639 6.5135741 71.022781 12.083064 70.871643 20.404736 c
70.725533 26.484285 70.652481 31.155161 70.652481 34.417358 c
70.652481 41.188889 70.822937 47.490864 71.163849 53.323277 c
77.592491 53.5457 l
84.800369 53.842262 90.303673 53.990543 94.102417 53.990543 c
h
124.74837 53.990543 m
126.63122 53.595684 128.7796 53.398254 131.19353 53.398254 c
133.60744 53.398254 135.32132 53.299538 136.33517 53.102108 c
137.2766 53.102108 l
135.77997 44.958118 134.09023 37.036236 132.20737 29.33646 c
130.32451 21.636688 127.95888 12.456188 125.11045 1.7949631 c
124.04833 1.7949631 123.32416 1.7702843 122.93793 1.7209268 c
122.21375 1.6468905 l
121.34474 1.5481755 120.45159 1.4988179 119.5343 1.4988179 c
116.49277 1.4988179 114.12713 1.7949631 112.43739 2.3872533 c
108.23717 17.540012 105.41289 34.247536 103.96454 52.509819 c
104.39905 53.003395 105.29219 53.373573 106.64399 53.620361 c
107.99578 53.867149 109.49241 53.990543 111.13387 53.990543 c
112.67878 53.990543 114.4168 53.817791 116.34793 53.47229 c
116.78244 46.88306 l
117.07211 41.996666 117.38592 37.764259 117.72387 34.185837 c
118.06181 30.607418 118.5446 27.066015 119.17222 23.56163 c
119.75156 26.276295 120.64471 31.212048 121.85166 38.368889 c
123.30002 47.105167 124.26558 52.312389 124.74837 53.990543 c
h
170.58865 8.4680586 m
170.58865 5.9472694 170.32079 3.6983299 169.78506 1.7212405 c
167.6422 1.7212405 164.47658 1.6718132 160.28821 1.5729588 c
150.71831 1.4988179 l
146.38383 1.4988179 142.04938 1.6470997 137.7149 1.9436631 c
137.76361 3.5253346 137.69057 9.6790257 137.49576 20.404736 c
137.34966 26.484285 137.2766 31.155161 137.2766 34.417358 c
137.2766 41.188889 137.44705 47.490864 137.78796 53.323277 c
144.21661 53.5457 l
151.42448 53.842262 156.92778 53.990543 160.72653 53.990543 c
163.98955 53.990543 167.15517 53.866974 170.22339 53.619839 c
170.4182 52.581867 170.51559 51.370899 170.51559 49.986938 c
170.51559 49.245529 170.4669 48.034561 170.36949 46.354034 c
170.27209 44.772366 170.22339 43.536682 170.22339 42.646992 c
167.30128 42.00444 164.03825 41.683163 160.43433 41.683163 c
150.93745 41.60902 l
150.69395 39.285942 150.5722 37.35828 150.5722 35.826035 c
150.5722 34.639782 150.71831 33.601807 151.01051 32.71212 c
155.832 33.305244 l
156.51382 33.305244 157.53656 33.255817 158.90021 33.156963 c
159.8499 33.082821 l
160.0934 31.600006 160.21516 29.99362 160.21516 28.263666 c
160.06906 22.332397 l
158.51059 21.887554 156.41641 21.665131 153.78651 21.665131 c
151.88715 21.739271 l
151.54623 21.739271 151.32707 21.689844 151.22968 21.59099 c
150.93745 17.735666 l
150.93745 15.709148 151.03487 14.028623 151.22968 12.694087 c
153.76216 12.694087 156.2216 12.619946 158.608 12.471664 c
159.43593 12.422237 160.45866 12.37281 161.67622 12.323383 c
162.89377 12.273955 164.33046 12.249242 165.98633 12.249242 c
170.44255 12.397524 l
170.53995 10.123871 170.58865 8.8140488 170.58865 8.4680586 c
h
201.55313 15.60902 m
203.4312 12.6204 204.94537 10.097222 206.09569 8.039484 c
207.246 5.9817467 208.19676 3.8995121 208.948 1.7927805 c
207.82115 1.7927805 l
207.25774 1.7927805 205.99005 1.7437867 204.01808 1.6457993 c
202.04613 1.5478117 200.47325 1.4988179 199.29947 1.4988179 c
198.64215 1.4988179 197.65616 1.5478117 196.34152 1.6457993 c
195.14426 1.7192899 l
192.09242 8.9703655 189.36923 14.408672 186.97472 18.03421 c
186.97472 16.123455 l
186.97472 13.085841 187.13904 9.1663408 187.4677 4.3649526 c
187.4677 4.4384432 l
187.51465 4.0954871 187.53813 3.5075619 187.53813 2.6746681 c
185.94177 1.8907681 183.3125 1.4988179 179.65028 1.4988179 c
177.96004 1.5723087 l
174.22739 1.5723087 l
173.71092 1.5723087 173.4527 6.0062437 173.4527 14.874113 c
173.4527 22.90909 173.38226 30.956314 173.24141 39.015785 c
173.10056 47.07526 172.88927 51.913395 172.60756 53.530186 c
174.50909 53.82415 l
177.32619 54.216099 179.65028 54.510063 181.48138 54.706036 c
183.3125 54.902012 185.19055 55 187.11557 55 c
189.18143 55 190.94211 54.902012 192.3976 54.706036 c
195.12079 54.363083 197.66791 53.383205 200.03896 51.766411 c
202.41 50.149616 204.31154 48.165371 205.74356 45.813671 c
207.17557 43.461971 207.89159 41.036781 207.89159 38.538097 c
207.89159 36.137405 207.14037 33.516239 205.63791 30.674601 c
204.69888 28.910824 203.45467 27.441011 201.90527 26.265162 c
200.35588 25.089312 198.5013 24.378902 196.34152 24.133934 c
197.60921 21.782232 199.08818 19.332546 200.77844 16.78487 c
201.1071 16.196945 201.36533 15.804995 201.55313 15.60902 c
h
191.41162 34.349133 m
192.06894 34.545105 192.5854 35.035046 192.96101 35.818943 c
193.33664 36.602844 193.52444 37.533726 193.52444 38.611588 c
193.52444 40.620331 193.05492 41.918667 192.11589 42.506592 c
191.50552 42.89854 190.88342 43.143513 190.24957 43.241497 c
189.61572 43.339485 188.89972 43.388481 188.10155 43.388481 c
185.07318 42.874046 l
185.16708 41.404232 185.21404 40.154892 185.21404 39.126022 c
185.21404 36.480362 185.28445 34.863567 185.42531 34.275642 c
186.22348 34.177654 187.20947 34.128658 188.38326 34.128658 c
189.46313 34.128658 190.4726 34.202152 191.41162 34.349133 c
h
238.3251 40.463829 m
238.23079 40.270016 238.11292 38.743717 237.97147 35.884937 c
237.83002 33.026157 237.75929 30.118921 237.75929 27.163235 c
237.75929 24.159092 237.83002 21.63949 237.97147 19.604425 c
238.11292 18.296169 238.49013 17.024256 239.10309 15.788681 c
239.71605 14.553106 240.44688 13.717277 241.29559 13.281192 c
242.94588 13.184283 244.19537 13.959546 245.04408 15.606978 c
244.97336 15.606978 l
245.39772 16.527603 245.60989 17.908539 245.60989 19.749786 c
245.60989 21.203403 245.70419 22.342072 245.89281 23.165787 c
247.07158 22.971972 248.2032 22.875063 249.28766 22.875063 c
252.54108 22.947744 l
254.23849 22.947744 255.84163 22.753929 257.35046 22.366299 c
257.91626 20.670412 258.19916 18.901844 258.19916 17.060596 c
258.19916 14.298723 257.52728 11.682213 256.18347 9.2110634 c
254.83968 6.7399149 252.989 4.7290778 250.63145 3.1785531 c
248.27393 1.6280284 245.65704 0.80431205 242.78085 0.70740426 c
241.93213 0.56204253 240.94197 0.4893617 239.81035 0.4893617 c
236.13258 0.4893617 232.90276 1.3373049 230.12085 3.0331914 c
227.33896 4.7290778 225.78297 7.2729077 225.45293 10.66468 c
225.21716 15.510071 225.09929 20.718864 225.09929 26.291063 c
225.09929 30.894184 225.12286 34.673588 225.17001 37.629276 c
225.24074 40.899914 l
225.19359 41.626724 225.25253 42.462555 225.41756 43.407406 c
225.58258 44.352257 225.80655 45.188084 226.08946 45.914894 c
226.51381 47.029335 227.06784 48.143772 227.75153 49.258213 c
228.43521 50.372654 229.15427 51.293278 229.90868 52.020084 c
230.89885 52.8438 232.36052 53.546383 234.2937 54.127831 c
236.13258 54.709278 238.04219 55 240.02252 55 c
243.22878 55 246.24643 54.236851 249.07549 52.710552 c
251.90454 51.184254 254.16777 49.100739 255.8652 46.459999 c
257.56262 43.819263 258.41135 40.948368 258.41135 37.847321 c
258.41135 36.006069 258.0813 34.164822 257.42117 32.323574 c
255.44084 31.887489 253.79057 31.669447 252.47034 31.669447 c
250.67862 31.669447 248.2032 31.984398 245.04408 32.6143 c
244.83191 35.376171 l
244.73761 37.605049 244.46649 39.288822 244.01855 40.42749 c
243.57063 41.566154 242.61581 42.111263 241.15414 42.062809 c
241.10699 42.062809 241.04805 42.050694 240.97733 42.026466 c
240.9066 42.002243 240.80052 41.990128 240.65906 41.990128 c
240.72978 41.990128 l
239.26811 41.74786 238.46655 41.239094 238.3251 40.463829 c
h
318.99905 53.990543 m
320.93668 53.990543 322.94879 53.773396 325.03546 53.339104 c
325.03546 2.0199714 l
324.88641 2.0199714 324.58832 1.9475889 324.14117 1.8028241 c
323.64435 1.6098044 322.7749 1.5132945 321.53284 1.5132945 c
321.28442 1.4650395 319.96786 1.5374219 317.5831 1.7304417 c
316.98691 1.7786967 316.22925 1.8269516 315.31012 1.8752065 c
314.39099 1.9234614 313.85693 1.9234614 313.70789 1.8752065 c
310.72693 8.3172417 l
307.59692 14.976423 305.53513 19.58477 304.54147 22.142282 c
304.54147 8.2448587 l
304.54147 5.2530522 304.56631 3.2022173 304.616 2.0923538 c
303.27457 1.7063142 301.80893 1.5132945 300.21909 1.5132945 c
299.72226 1.5132945 298.97705 1.5615494 297.9834 1.6580592 c
296.89038 1.7545692 296.09546 1.8028241 295.59863 1.8028241 c
292.358 1.932 l
292.21454 1.9014874 l
290.8205 1.6330411 289.33127 1.4988179 287.74689 1.4988179 c
285.62726 1.4988179 283.31491 1.7657661 280.80988 2.2996626 c
280.47269 3.2218473 279.94278 5.1632891 279.22015 8.1239872 c
278.49756 11.133222 277.91946 13.123199 277.4859 14.09392 c
276.04071 14.166724 l
274.81229 14.09392 l
274.61957 13.511488 274.30646 12.079675 273.87289 9.798481 c
273.53568 7.9055753 273.19846 6.3645558 272.86124 5.1754227 c
272.52402 3.98629 272.0423 2.906363 271.41605 1.9356424 c
270.9343 1.8385702 270.2117 1.7900342 269.24823 1.7900342 c
268.81467 1.7900342 267.87527 1.8385702 266.43005 1.9356424 c
262.23895 2.1297865 259.90253 2.2268586 259.42081 2.2268586 c
259.42081 2.4695387 259.46896 3.0398371 259.56534 3.9377539 c
259.66168 4.8356705 259.80618 5.8427935 259.9989 6.9591222 c
261.58862 16.132433 l
262.84113 23.655519 264.03342 30.207886 265.1655 35.789528 c
266.29758 41.371174 267.77893 47.268303 269.60953 53.480915 c
270.28397 53.577988 271.19925 53.626522 272.35541 53.626522 c
272.78897 53.626522 l
275.92026 53.626522 278.97928 53.747864 281.96606 53.990543 c
282.54413 51.709351 283.07404 49.464558 283.55579 47.256168 c
284.03754 45.047779 284.4711 43.069935 284.85648 41.322639 c
286.39804 34.57613 287.43378 30.086544 287.96368 27.853888 c
291.94601 6.2690001 l
291.94617 8.0840092 l
291.93933 11.122283 291.88992 15.27757 291.79794 20.54987 c
291.75168 23.200563 291.72696 27.127029 291.72375 32.329269 c
291.72342 33.506321 l
291.72342 41.275368 291.94696 47.789783 292.3941 53.049572 c
293.73553 53.387356 295.22601 53.556248 296.86554 53.556248 c
297.95856 53.556248 299.28754 53.45974 300.85254 53.26672 c
302.41754 53.0737 303.49814 52.784172 304.09433 52.398132 c
304.78989 51.143501 305.64691 49.39426 306.66537 47.150406 c
307.68387 44.906551 308.6651 42.674759 309.60907 40.455032 c
312.59003 33.795849 l
312.49066 37.173695 312.44098 41.154728 312.44098 45.738949 c
312.44098 49.454578 312.46582 52.012093 312.5155 53.411484 c
314.55246 53.797523 316.71365 53.990543 318.99905 53.990543 c
h
276.04071 38.701691 m
276.04071 38.701691 275.99252 38.119259 275.89618 36.954395 c
275.75165 33.31419 275.53488 30.426296 275.24585 28.29071 c
274.59549 23.41284 l
277.63043 23.41284 l
276.57062 33.120049 276.06479 37.973652 276.11298 37.973652 c
276.04071 38.701691 l
h
373.84863 52.981087 m
376.17612 52.981087 378.37024 52.679409 380.43103 52.076057 c
382.49182 51.472706 384.29803 50.591808 385.8497 49.433372 c
387.54681 47.888786 388.66205 46.368336 389.19543 44.872021 c
389.77731 43.327438 390.18948 41.782852 390.43192 40.23827 c
390.57739 38.741951 390.65012 37.221504 390.65012 35.676918 c
390.57739 34.373676 l
390.57739 33.070435 l
390.48041 31.477581 390.43192 29.13657 390.43192 26.047401 c
390.43192 22.620356 390.35919 20.01387 390.21371 18.227945 c
389.99551 15.838666 l
389.75308 11.928938 388.75903 8.5984287 387.01343 5.8471379 c
386.2861 4.8335047 385.1951 3.9405417 383.74042 3.1682498 c
382.28574 2.3959577 380.68561 1.7684704 378.93997 1.2857879 c
377.14587 0.7548371 375.03662 0.4893617 372.61215 0.4893617 c
371.49689 0.4893617 370.72107 0.5134958 370.28467 0.56176406 c
367.90869 0.7548371 365.78729 1.2737209 363.92047 2.1184154 c
362.05362 2.9631097 360.68381 4.206017 359.811 5.8471379 c
358.64728 8.0192089 358.01691 10.746366 357.91992 14.028606 c
357.77448 16.345484 l
357.72598 16.731628 357.70172 17.528055 357.70172 18.734762 c
357.45929 22.692759 357.33807 26.481815 357.33807 30.101934 c
357.33807 32.322273 357.4108 34.542614 357.55627 36.762955 c
357.70172 39.176369 358.12601 41.529446 358.8291 43.822186 c
359.5322 46.114929 360.61108 48.130127 362.06577 49.867786 c
363.66589 50.736614 l
366.7692 52.232929 370.16345 52.981087 373.84863 52.981087 c
h
334.05124 53.990543 m
335.71924 53.990543 337.10129 53.670624 338.19739 53.030781 c
338.62628 51.209686 339.28159 48.945629 340.16324 46.238602 c
341.04486 43.531574 341.89078 41.119858 342.70096 39.003456 c
342.93924 39.49564 343.70175 41.735092 344.98846 45.721806 c
346.41818 50.151485 347.22833 52.563202 347.41898 52.956951 c
350.04007 53.498356 352.63736 53.769058 355.21085 53.769058 c
356.78351 53.769058 358.16556 53.670624 359.35696 53.473747 c
358.21323 49.044067 356.80734 44.774345 355.13934 40.664585 c
353.47137 36.554825 351.20767 31.399168 348.34827 25.197615 c
346.06076 20.374184 344.15448 16.153681 342.62946 12.536108 c
341.10443 8.9185343 339.74622 5.2394381 338.55481 1.4988179 c
337.41104 1.646474 336.31494 1.720302 335.26651 1.720302 c
334.55164 1.720302 333.57468 1.6710833 332.3356 1.572646 c
329.33322 1.4988179 l
328.3801 1.4988179 327.284 1.572646 326.04492 1.720302 c
327.18869 5.2640471 329.38089 11.367164 332.62155 20.029652 c
335.55243 27.707767 l
335.07587 29.676514 334.48016 31.608347 333.76532 33.503265 c
333.05045 35.398186 332.14499 37.64994 331.04889 40.25853 c
329.76215 43.556183 328.79709 46.090946 328.15372 47.862816 c
327.51038 49.634689 326.95041 51.505001 326.47382 53.473747 c
327.3793 53.42453 328.78519 53.498356 330.69144 53.695232 c
332.21646 53.892105 333.3364 53.990543 334.05124 53.990543 c
h
374.57596 42.120731 m
373.41223 42.120731 372.27274 41.734585 371.15747 40.962292 c
370.57559 40.47961 370.00586 39.791786 369.44824 38.898823 c
368.89059 38.005863 368.46634 37.100834 368.17538 36.183735 c
367.69049 34.059933 367.44806 31.356911 367.44806 28.074669 c
367.44806 26.433548 367.47229 25.202707 367.52078 24.382147 c
367.52078 24.45455 l
367.71475 23.489185 367.8602 22.210075 367.95718 20.617224 c
368.02991 19.60359 l
368.22388 17.190178 368.49057 15.404252 368.82999 14.245814 c
368.82999 14.318216 l
369.26639 13.352851 369.90887 12.61676 370.75745 12.109943 c
371.60599 11.603127 372.51517 11.349719 373.48495 11.349719 c
374.26077 11.349719 375.04874 11.530725 375.84879 11.892736 c
376.64886 12.254748 377.33984 12.773632 377.92172 13.449388 c
378.40662 14.076875 378.70966 14.607826 378.83087 15.04224 c
378.95212 15.476654 379.01273 16.152411 379.01273 17.069508 c
379.01273 17.890068 379.03696 18.49342 379.08545 18.879566 c
379.15817 19.820797 l
379.23093 21.196442 l
379.23093 22.210075 l
379.30365 23.585722 l
379.30365 27.061035 l
379.15817 31.984398 l
379.15817 32.346409 l
378.86725 36.111332 l
378.77026 37.462845 378.44296 38.657482 377.88535 39.695251 c
377.32773 40.733017 376.61252 41.469109 375.73969 41.903522 c
375.35178 42.048328 374.96387 42.120731 374.57596 42.120731 c
h
413.69147 8.3172417 m
410.56146 14.976423 408.49966 19.58477 407.50601 22.142282 c
407.50601 8.2448587 l
407.50601 5.2530522 407.53085 3.2022173 407.58054 2.0923538 c
406.23911 1.7063142 404.77347 1.5132945 403.18362 1.5132945 c
402.6868 1.5132945 401.94159 1.5615494 400.94794 1.6580592 c
399.85492 1.7545692 399.06 1.8028241 398.56317 1.8028241 c
394.9115 1.9475889 l
394.9115 7.3762698 l
394.9115 10.464586 394.86185 14.855786 394.76248 20.54987 c
394.7128 23.39691 394.68796 27.715729 394.68796 33.506321 c
394.68796 41.275368 394.9115 47.789783 395.35864 53.049572 c
396.70007 53.387356 398.19055 53.556248 399.83008 53.556248 c
400.9231 53.556248 402.25208 53.45974 403.81708 53.26672 c
405.38208 53.0737 406.46268 52.784172 407.05887 52.398132 c
407.75443 51.143501 408.61145 49.39426 409.62991 47.150406 c
410.64841 44.906551 411.62964 42.674759 412.57361 40.455032 c
415.55457 33.795849 l
415.4552 37.173695 415.40552 41.154728 415.40552 45.738949 c
415.40552 49.454578 415.43036 52.012093 415.48004 53.411484 c
417.517 53.797523 419.67819 53.990543 421.96359 53.990543 c
423.90121 53.990543 425.91333 53.773396 428 53.339104 c
428 2.0199714 l
427.85095 2.0199714 427.55286 1.9475889 427.10571 1.8028241 c
426.60889 1.6098044 425.73944 1.5132945 424.49738 1.5132945 c
424.24899 1.4650395 422.9324 1.5374219 420.54764 1.7304417 c
419.95145 1.7786967 419.19379 1.8269516 418.27466 1.8752065 c
417.35553 1.9234614 416.82147 1.9234614 416.67242 1.8752065 c
413.69147 8.3172417 l
h
W
0 0 428 267 rc
0 56 m
429 56 l
429 -0.5106383 l
0 -0.5106383 l
h
f
Q
0.92900002 0.373 0.23100001 sc
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
94.440338 179.52281 m
68.089462 92.76503 126.48246 30.028063 199.02055 64.733788 c
297.54422 64.733788 l
305.42386 64.733788 312.60349 67.960281 317.80707 73.148827 c
317.84552 73.186325 l
322.33768 77.67115 325.36423 83.622719 326.10272 90.229187 c
346.99744 108.28708 344.85013 140.6488 326.28101 166.20959 c
326.28101 206.83463 l
326.28101 214.69943 323.0491 221.86224 317.84552 227.05515 c
317.80707 227.09265 l
312.60349 232.28381 305.42386 235.50856 297.54422 235.50856 c
263.85815 235.50856 l
263.85815 241.1619 l
263.85815 248.27238 260.94611 254.74107 256.25555 259.41687 c
251.57024 264.09442 245.08717 267 237.96088 267 c
203.54158 267 l
196.41003 267 189.93483 264.09442 185.2469 259.41687 c
180.55896 254.74107 177.64691 248.27238 177.64691 241.1619 c
177.64691 235.50856 l
143.9626 235.50856 l
136.07683 235.50856 128.90334 232.28381 123.69889 227.09265 c
123.66131 227.05515 l
118.4586 221.86224 115.22756 214.69943 115.22756 206.83463 c
115.22756 165.00969 l
107.98328 168.8187 101.05624 174.14677 94.440338 179.52281 c
h
197.87741 235.50856 m
243.62503 235.50856 l
243.62503 241.1619 l
243.62503 242.70799 242.98618 244.12242 241.95752 245.14879 c
240.92973 246.17168 239.50954 246.81436 237.96088 246.81436 c
203.54158 246.81436 l
201.99466 246.81436 200.57535 246.17168 199.5493 245.14879 c
198.52066 244.12242 197.87741 242.70799 197.87741 241.1619 c
197.87741 235.50856 l
h
W*
0 0 428 267 rc
67.089462 268 m
347.99744 268 l
347.99744 29.028063 l
67.089462 29.028063 l
h
f
Q
0 0 0 sc
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
230 86 m
248.65167 101.06677 266.58881 117.06506 287.17493 121.96683 c
294.3707 122.31876 300.67941 119.83616 306 116.15179 c
306 94.45665 l
306 92.133942 305.05893 90.021515 303.54535 88.489548 c
303.50702 88.451317 l
301.96991 86.939339 299.85162 86 297.52158 86 c
230 86 l
h
W*
0 0 428 267 rc
229 123.31876 m
307 123.31876 l
307 85 l
229 85 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
305 185.88486 m
274.42734 207.98569 225.9603 214.02869 168.61748 174.83926 c
162.1908 170.44864 156.38684 166.48468 151.94766 163.89507 c
146.13412 160.51337 140.48781 159.05508 135 159 c
135 206.49068 l
135 208.82849 135.94061 210.95386 137.45605 212.49432 c
137.49438 212.53455 l
139.03072 214.05579 141.14624 215 143.47513 215 c
296.52573 215 l
298.85464 215 300.97189 214.05579 302.50824 212.53455 c
302.54657 212.49432 l
304.05939 210.95386 305 208.82849 305 206.49068 c
305 185.88486 l
h
W*
0 0 428 267 rc
134 216 m
306 216 l
306 158 l
134 158 l
h
f
Q
1 1 1 sc
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
235.14691 159.91646 m
219.47076 149.72815 207.74686 139.6301 188.43759 130.52231 c
188.43759 130.52231 203.47202 158.2926 207.26601 175 c
185.62111 152.62006 141.61751 122.25668 111.11263 140.33292 c
109.7422 112.29972 120.80155 91.38327 148.45213 81.072266 c
182.562 68.355721 220.78496 97.408974 242 126.15989 c
231.82672 122.64753 223.82823 118.00644 211.75972 118.09057 c
221.6974 128.61978 231.32918 143.44568 235.14691 159.91646 c
235.14691 159.91646 l
h
W*
0 0 428 267 rc
108.7422 176 m
243 176 l
243 67.355721 l
108.7422 67.355721 l
h
f
ep
end
%%Trailer
%%EOF
