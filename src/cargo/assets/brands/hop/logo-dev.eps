%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 13.3.1 (a) (Build 22E772610a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 304 60
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 304 60
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 60 m
304 60 l
304 0 l
0 0 l
h
W*
91 12 m
91 55 l
102.03318 55 l
102.03318 41.365479 l
103.04682 42.062775 104.02745 42.629932 104.97507 43.066956 c
105.92269 43.503975 106.88419 43.831741 107.85956 44.050255 c
108.83493 44.268764 109.82768 44.378021 110.83781 44.378021 c
112.84172 44.378021 114.51963 44.00425 115.87154 43.256714 c
117.22345 42.509178 118.2495 41.434479 118.9497 40.032623 c
119.6499 38.630764 120 36.920509 120 34.901859 c
120 12 l
108.92651 12 l
108.92651 31.245586 l
108.92651 32.548782 108.6712 33.467617 108.16058 34.00209 c
107.64996 34.536564 106.95123 34.803802 106.06437 34.803802 c
105.62678 34.803802 105.1927 34.757648 104.76212 34.66534 c
104.33154 34.573032 103.89278 34.445015 103.44585 34.281281 c
102.99891 34.11755 102.52802 33.920677 102.03318 33.690666 c
102.03318 12 l
91 12 l
h
W
0 0 304 60 rc
90 56 m
121 56 l
121 11 l
90 11 l
h
f
Q
q
0 60 m
304 60 l
304 0 l
0 0 l
h
W*
124 29.055977 m
124 31.461933 124.24779 33.642811 124.74337 35.598606 c
125.23895 37.554401 126.06813 39.231049 127.23093 40.628551 c
128.39372 42.026051 129.97607 43.104 131.97801 43.8624 c
133.97995 44.6208 136.48729 45 139.5 45 c
142.51271 45 145.01317 44.6208 147.00133 43.8624 c
148.9895 43.104 150.57187 42.026051 151.74843 40.628551 c
152.92499 39.231049 153.76105 37.554401 154.25664 35.598606 c
154.75221 33.642811 155 31.461933 155 29.055977 c
155 26.612995 154.73346 24.40156 154.20039 22.421669 c
153.66733 20.441778 152.80051 18.753082 151.59993 17.355583 c
150.39935 15.958082 148.80762 14.882776 146.82472 14.129665 c
144.84181 13.376555 142.40024 13 139.5 13 c
136.59976 13 134.15804 13.376555 132.17485 14.129665 c
130.19165 14.882776 128.59991 15.958082 127.39964 17.355583 c
126.19935 18.753082 125.33267 20.441778 124.79961 22.421669 c
124.26653 24.40156 124 26.612995 124 29.055977 c
h
135.37721 29.055977 m
135.37721 27.073147 135.51018 25.520647 135.77614 24.398474 c
136.04208 23.2763 136.48143 22.487637 137.09416 22.032478 c
137.70689 21.577322 138.50885 21.349743 139.5 21.349743 c
140.50169 21.349743 141.29939 21.577322 141.8931 22.032478 c
142.4868 22.487637 142.92351 23.2763 143.20322 24.398474 c
143.48293 25.520647 143.62279 27.073147 143.62279 29.055977 c
143.62279 31.028814 143.49493 32.566917 143.23924 33.670284 c
142.98355 34.773651 142.55885 35.552914 141.96515 36.008072 c
141.37144 36.46323 140.54973 36.690807 139.5 36.690807 c
138.45027 36.690807 137.62856 36.46323 137.03485 36.008072 c
136.44115 35.552914 136.01645 34.773651 135.76076 33.670284 c
135.50507 32.566917 135.37721 31.028814 135.37721 29.055977 c
h
W
0 0 304 60 rc
123 46 m
156 46 l
156 12 l
123 12 l
h
f
Q
q
0 60 m
304 60 l
304 0 l
0 0 l
h
W*
158 0 m
158 43.47488 l
168.12259 43.47488 l
168.47571 41.006985 l
170.1646 42.039307 171.80101 42.796223 173.38496 43.277733 c
174.96893 43.759243 176.59198 44 178.2541 44 c
181.73233 44 184.39288 42.655682 186.23573 39.967049 c
188.07858 37.278412 189 33.375099 189 28.257103 c
189 24.512548 188.44476 21.396469 187.3343 18.908861 c
186.22383 16.421253 184.52797 14.559581 182.2467 13.323843 c
179.96542 12.088104 177.08151 11.470235 173.59497 11.470235 c
172.94165 11.470235 172.24077 11.502345 171.49234 11.566566 c
170.7439 11.630788 169.99695 11.709496 169.2515 11.802692 c
169.2515 0 l
158 0 l
h
172.83435 19.623062 m
173.87466 19.623062 174.72594 19.852018 175.38818 20.309933 c
176.05042 20.767845 176.54561 21.547016 176.87375 22.647442 c
177.2019 23.747868 177.36597 25.239595 177.36597 27.122625 c
177.36597 29.067785 177.23459 30.588636 176.97183 31.685179 c
176.70909 32.781723 176.31004 33.567314 175.77473 34.041954 c
175.23941 34.516594 174.55592 34.753914 173.72426 34.753914 c
173.29982 34.753914 172.84386 34.711647 172.3564 34.627117 c
171.86893 34.542583 171.37003 34.417576 170.85966 34.252094 c
170.34932 34.086609 169.80672 33.869156 169.23187 33.599724 c
169.23187 20.22525 l
169.83644 20.031092 170.44414 19.882189 171.05496 19.778538 c
171.66577 19.674889 172.2589 19.623062 172.83435 19.623062 c
h
W
0 0 304 60 rc
157 45 m
190 45 l
190 -1 l
157 -1 l
h
f
Q
q
0 60 m
304 60 l
304 0 l
0 0 l
h
W*
191 18.477339 m
191 20.329416 191.50117 21.712879 192.50352 22.627728 c
193.50589 23.542576 195.17137 24 197.5 24 c
199.84648 24 201.51643 23.542576 202.50986 22.627728 c
203.50328 21.712879 204 20.329416 204 18.477339 c
204 16.655476 203.50328 15.287121 202.50986 14.372272 c
201.51643 13.457424 199.84648 13 197.5 13 c
195.17329 13 193.50827 13.457424 192.50496 14.372272 c
191.50165 15.287121 191 16.655476 191 18.477339 c
h
W
0 0 304 60 rc
190 25 m
205 25 l
205 12 l
190 12 l
h
f
Q
q
0 60 m
304 60 l
304 0 l
0 0 l
h
W*
220.04507 0 m
215.44159 0 211.94987 0.64190197 209.56993 1.9257059 c
207.18997 3.2095098 206 5.1432509 206 7.7269287 c
206 8.7661133 206.18553 9.7073908 206.55661 10.550762 c
206.92769 11.394133 207.48019 12.147631 208.21411 12.811256 c
208.94803 13.474883 209.84721 14.032269 210.91162 14.483416 c
216.13023 12.479146 l
215.77797 12.273213 215.48174 12.066239 215.2415 11.858224 c
215.00127 11.650208 214.81985 11.422106 214.69724 11.173916 c
214.57462 10.925725 214.51331 10.623076 214.51331 10.265968 c
214.51331 9.6707878 214.69812 9.1974707 215.06772 8.8460169 c
215.43733 8.4945621 216.08202 8.2365522 217.00177 8.0719843 c
217.92152 7.9074173 219.18677 7.8251333 220.79752 7.8251333 c
222.31004 7.8251333 223.57178 7.9196181 224.58267 8.1085882 c
225.59358 8.2975578 226.355 8.5661325 226.86693 8.9143133 c
227.37885 9.2624941 227.6348 9.698761 227.6348 10.223115 c
227.6348 10.61772 227.55615 10.917542 227.39883 11.122581 c
227.24153 11.327621 226.91528 11.479987 226.42014 11.579679 c
225.92497 11.679373 225.18134 11.729218 224.18925 11.729218 c
218.51195 11.729218 l
216.24608 11.729218 214.26941 11.979492 212.58191 12.480039 c
210.89442 12.980585 209.5864 13.756105 208.65782 14.806599 c
207.72925 15.857092 207.26495 17.2022 207.26495 18.841921 c
207.26495 20.529852 207.70219 21.938644 208.57666 23.068296 c
209.45114 24.197948 210.59818 25.130001 212.01781 25.864454 c
217.41724 24.509228 l
216.8121 24.144978 216.36385 23.778496 216.07245 23.409782 c
215.78107 23.041067 215.63536 22.58025 215.63536 22.027327 c
215.63536 21.463692 215.84692 21.039774 216.27005 20.755575 c
216.69318 20.471376 217.34344 20.329277 218.22086 20.329277 c
227.9753 20.329277 l
231.15327 20.329277 233.61923 19.555988 235.37317 18.009413 c
237.12712 16.462837 238.00409 14.325991 238.00409 11.598874 c
238.00409 9.1151867 237.3331 7.0075045 235.9911 5.2758274 c
234.64911 3.5441501 232.64772 2.2319262 229.98697 1.3391558 c
227.3262 0.44638526 224.01224 0 220.04507 0 c
h
221.16977 22.701368 m
216.60098 22.701368 213.16382 23.616013 210.85826 25.445299 c
208.5527 27.274586 207.39992 29.975067 207.39992 33.546745 c
207.39992 37.155918 208.5527 39.868305 210.85826 41.683903 c
213.16382 43.4995 216.60098 44.407299 221.16977 44.407299 c
225.73854 44.407299 229.17572 43.4995 231.48128 41.683903 c
233.78683 39.868305 234.93962 37.155918 234.93962 33.546745 c
234.93962 29.975067 233.78683 27.274586 231.48128 25.445299 c
229.17572 23.616013 225.73854 22.701368 221.16977 22.701368 c
h
221.16977 29.608734 m
222.32005 29.608734 223.16644 29.886385 223.70894 30.441689 c
224.25145 30.996992 224.52269 32.032009 224.52269 33.546745 c
224.52269 35.098976 224.25145 36.155567 223.70894 36.716526 c
223.16644 37.277485 222.32005 37.557961 221.16977 37.557961 c
220.03008 37.557961 219.18633 37.277485 218.63853 36.716526 c
218.09074 36.155567 217.81683 35.098976 217.81683 33.546745 c
217.81683 32.032009 218.09074 30.996992 218.63853 30.441689 c
219.18633 29.886385 220.03008 29.608734 221.16977 29.608734 c
h
233.20361 35.932228 m
229.0956 41.62096 l
229.64955 43.108315 230.48051 44.209995 231.58846 44.925999 c
232.6964 45.641998 234.08455 46 235.75293 46 c
236.37747 46 236.96716 45.957741 237.52202 45.873226 c
238.07686 45.788712 238.56953 45.661938 239 45.492905 c
237.72182 37.10265 l
237.40425 37.178833 237.06258 37.242813 236.69679 37.294594 c
236.33101 37.346375 235.95169 37.372265 235.55887 37.372265 c
235.08722 37.372265 234.65042 37.258438 234.24847 37.030781 c
233.84653 36.803123 233.49823 36.436939 233.20361 35.932228 c
h
W
0 0 304 60 rc
205 47 m
240 47 l
240 -1 l
205 -1 l
h
f
Q
q
0 60 m
304 60 l
304 0 l
0 0 l
h
W*
261.14972 12.474792 m
259.88403 14.724229 l
258.41437 13.819437 256.9306 13.139201 255.43275 12.683521 c
253.93489 12.22784 252.36354 12 250.7187 12 c
247.26517 12 244.61533 13.348826 242.7692 16.046478 c
240.92307 18.744131 240 22.646381 240 27.753229 c
240 31.519909 240.55402 34.640247 241.66205 37.114239 c
242.77008 39.588234 244.4633 41.440964 246.74173 42.672436 c
249.02014 43.903912 251.89771 44.519646 255.3744 44.519646 c
256.08401 44.519646 256.81393 44.495159 257.56421 44.446186 c
258.31448 44.397217 259.04144 44.318382 259.74509 44.209686 c
259.74509 55 l
271 55 l
271 12.474792 l
261.14972 12.474792 l
h
259.74509 22.452583 m
259.74509 35.807667 l
259.1127 36.01968 258.50168 36.166595 257.91202 36.248417 c
257.32239 36.330235 256.72946 36.371147 256.1333 36.371147 c
255.10779 36.371147 254.26015 36.144203 253.59033 35.690311 c
252.92053 35.236423 252.42233 34.470936 252.09573 33.393845 c
251.76915 32.316753 251.60585 30.811903 251.60585 28.879292 c
251.60585 26.998638 251.73798 25.502895 252.00221 24.392063 c
252.26645 23.281229 252.67143 22.486475 253.21713 22.007803 c
253.76283 21.529129 254.43858 21.289791 255.24437 21.289791 c
255.69269 21.289791 256.15482 21.331896 256.63074 21.416103 c
257.10669 21.500313 257.60831 21.631851 258.13559 21.810719 c
258.66287 21.989586 259.19937 22.203541 259.74509 22.452583 c
h
W
0 0 304 60 rc
239 56 m
272 56 l
272 11 l
239 11 l
h
f
Q
q
0 60 m
304 60 l
304 0 l
0 0 l
h
W*
275 13 m
275 44.425705 l
284.95068 44.425705 l
284.95068 41.716637 l
286.19656 42.509884 287.35681 43.143406 288.43149 43.617203 c
289.50613 44.090996 290.56384 44.439911 291.60461 44.663948 c
292.64539 44.887981 293.72763 45 294.85138 45 c
296.92355 45 298.63736 44.6119 299.99283 43.835701 c
301.34827 43.059505 302.35498 41.987633 303.013 40.62009 c
303.67099 39.252544 304 37.646008 304 35.800484 c
304 13 l
292.95889 13 l
292.95889 32.037045 l
292.95889 33.332802 292.69812 34.242851 292.17657 34.767197 c
291.65503 35.291542 290.96298 35.553715 290.10043 35.553715 c
289.67618 35.553715 289.24463 35.504063 288.80576 35.404755 c
288.36691 35.30545 287.92221 35.176235 287.47165 35.017105 c
287.02109 34.857979 286.54425 34.664154 286.04111 34.435631 c
286.04111 13 l
275 13 l
h
W
0 0 304 60 rc
274 46 m
305 46 l
305 12 l
274 12 l
h
f
Q
0.4509804 0.4509804 0.4509804 sc
q
0 60 m
304 60 l
304 0 l
0 0 l
h
W*
72.434464 45.802982 m
70.510254 45.415958 69.261337 43.564911 69.636925 41.656696 c
69.820297 40.730869 70.369347 39.915821 71.162186 39.392483 c
71.955025 38.869144 72.926056 38.68082 73.859718 38.869312 c
73.949806 38.887154 74.140793 38.922832 74.439873 39.008461 c
75.350494 39.275459 76.116409 39.890217 76.568634 40.717091 c
77.020866 41.543968 77.122238 42.515018 76.850403 43.416 c
76.288406 45.2761 74.318092 46.3409 72.434013 45.802715 c
72.434464 45.802982 l
h
31.147511 39.380177 m
38.089966 36.827877 44.082466 31.40378 49.125011 23.107889 c
53.059772 29.310293 55.87389 32.747871 57.567368 33.420628 c
60.107586 34.42976 63.787212 31.421326 60.914783 28.755167 c
56.184689 24.364735 54.054798 20.267239 52.566635 17.467344 c
56.512611 17.152937 59.33976 16.300962 59.33976 15.299429 c
59.33976 14.689587 58.270222 14.104719 56.366333 13.673491 c
54.462444 13.242265 51.880203 13.000002 49.187679 13 c
46.495152 13.000002 43.91291 13.242265 42.009022 13.673491 c
40.105133 14.104719 39.035595 14.689587 39.035595 15.299429 c
39.035595 16.270393 41.692795 17.100788 45.449989 17.437943 c
42.150196 22.233223 37.225746 30.36134 28.90423 33.420628 c
28.105322 33.716297 27.45809 34.314598 27.105385 35.083477 c
26.752682 35.852352 26.723503 36.728596 27.02429 37.518806 c
27.646303 39.157803 29.489906 39.99007 31.147511 39.380177 c
h
68.298241 38.022228 m
68.542313 37.213264 68.451286 36.341393 68.04525 35.598965 c
67.639206 34.856541 66.951523 34.304573 66.133904 34.064842 c
65.865364 33.987957 65.693886 33.955925 65.612999 33.939907 c
64.774696 33.770664 63.90284 33.939754 63.190975 34.409645 c
62.479111 34.879532 61.986137 35.611336 61.821495 36.442604 c
61.484261 38.15593 62.605625 39.817924 64.332909 40.16518 c
66.024559 40.648399 67.79364 39.692352 68.298241 38.022228 c
h
13.256912 60 m
5.9704633 59.99889 0.0011199239 54.089928 0 46.874062 c
-0.0011199239 39.658272 5.9665809 33.735561 13.25303 33.736668 c
20.539553 33.73785 26.508821 39.662117 26.509941 46.877907 c
26.511061 54.093624 20.543436 60.001034 13.256912 60 c
h
W
0 0 304 60 rc
-1 61 m
78.122238 61 l
78.122238 12 l
-1 12 l
h
f
ep
end
%%Trailer
%%EOF
